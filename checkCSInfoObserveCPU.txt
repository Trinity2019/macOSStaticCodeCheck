Date/Time:        2021-05-26 12:09:05.002 -0700
End time:         2021-05-26 12:09:15.005 -0700
OS Version:       macOS 11.3.1 (Build 20E241)
Architecture:     x86_64h
Report Version:   32

Data Source:      Stackshots
Shared Cache:     94BDF3EE-CD67-34B0-91E1-19D61487C096 slid base address 0x7fff20124000, slide 0x124000

Command:          checkCSInfoObserveCPU
Path:             /Users/ytian/Library/Developer/Xcode/DerivedData/checkCSInfoObserveCPU-exapmbzjiptvozdslzwcbieuyasi/Build/Products/Debug/checkCSInfoObserveCPU
Version:          ??? (???)
Parent:           zsh [42404] [unique pid 141868]
Responsible:      Terminal [564]
PID:              42412
Time Since Fork:  115s

Duration:         10.00s
Steps:            1001 (10ms sampling interval)

Hardware model:   MacBookPro15,1
Active cpus:      16
Boot args:        chunklist-security-epoch=0 -chunklist-no-rev2-dev

Time Awake Since Boot: 897115s
Time Since Wake:  617846s

Fan speed:        5922 rpm

----------------------------------------
Heavy format: stacks are sorted by count
----------------------------------------



Process:          checkCSInfoObserveCPU [42412] [unique pid 141876]
UUID:             20CDC2F4-0BAE-3A75-9078-5A2519285468
Path:             /Users/ytian/Library/Developer/Xcode/DerivedData/checkCSInfoObserveCPU-exapmbzjiptvozdslzwcbieuyasi/Build/Products/Debug/checkCSInfoObserveCPU
Architecture:     x86_64
Parent:           zsh [42404] [unique pid 141868]
Responsible:      Terminal [564]
UID:              502
Footprint:        565.05 MB
Time Since Fork:  115s
Num samples:      1001 (1-1001)
CPU Time:         30.110s (70.6G cycles, 85.3G instructions, 0.83c/i)
Note:             16 idle work queue threads omitted

  Thread 0x849d4f    DispatchQueue "com.apple.main-thread"(1)    1001 samples (1-1001)    priority 31-46 (base 31)    cpu time 7.782s (18.1G cycles, 28.8G instructions, 0.63c/i)
  1001  start + 1 (libdyld.dylib + 89917) [0x7fff2044df3d]
    1001  main + 122 (main.m:27,9 in checkCSInfoObserveCPU + 15498) [0x10308ac8a]
      1001  -[checkStaticCSInfo checkStaticCSInfoOnPath:withRequirement:] + 427 (checkStaticCSInfo.m:65,14 in checkCSInfoObserveCPU + 14811) [0x10308a9db]
        1001  SecStaticCodeCheckValidityWithErrors + 187 (Security + 1673198) [0x7fff224517ee]
          1001  Security::CodeSigning::SecStaticCode::staticValidate(unsigned int, Security::CodeSigning::SecRequirement const*) + 2714 (Security + 1716598) [0x7fff2245c176]
            417   Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 116 (Security + 1878434) [0x7fff224839a2]
              416   fts_read$INODE64 + 883 (libsystem_c.dylib + 21052) [0x7fff2030c23c]
                188   fts_build + 252 (libsystem_c.dylib + 21953) [0x7fff2030c5c1]
                  188   getattrlistbulk + 10 (libsystem_kernel.dylib + 15646) [0x7fff203ffd1e]
                   *188   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                     *188   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                       *187   getattrlistbulk + 1544 (kernel + 3045736) [0xffffff80004f7968]
                         *183   apfs_vnop_getattrlistbulk + 728 (apfs + 362488) [0xffffff80033f27f8]
                           *153   iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                             *137   attrlistbulk_iterator + 481 (apfs + 378831) [0xffffff80033f67cf]
                               *135   _get_inode_with_lookaside_and_hint + 94 (apfs + 664436) [0xffffff800343c374]
                                 *132   fs_get_inode_with_hint + 217 (apfs + 664760) [0xffffff800343c4b8]
                                   *123   iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                     *123   bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                       *84    _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                         *84    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *84    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *80    obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *77    obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *77    vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *62    _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *62    buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *62    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *62    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *62    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *62    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *62    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                   *15    _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                                     *15    nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                                       *15    VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                         *15    spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                           *14    dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                             *13    IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                               *13    IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                                 *13    vm_map_create_upl + 184 (kernel + 1346120) [0xffffff8000358a48]
                                                                   *13    IORWLockRead + 769 (kernel + 1746593) [0xffffff80003ba6a1]
                                                                     *13    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                       *13    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                         *13    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                             *1     IOGeneralMemoryDescriptor::prepare(unsigned int) + 259 (kernel + 8334275) [0xffffff8000a02bc3]
                                                               *1     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 620 (kernel + 8347612) [0xffffff8000a05fdc]
                                                                 *1     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 479 (kernel + 8333407) [0xffffff8000a0285f]
                                                                   *1     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1137 (kernel + 8331761) [0xffffff8000a021f1]
                                                                     *1     IOGeneralMemoryDescriptor::dmaMap(IOMapper*, IOMemoryDescriptor*, IODMACommand*, IODMAMapSpecification const*, unsigned long long, unsigned long long, unsigned long long*, unsigned long long*) + 527 (kernel + 8349375) [0xffffff8000a066bf]
                                                                       *1     AppleVTD::iovmMapMemory(IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 67 (IOPCIFamily + 22917) [0xffffff8002d64985]
                                                                         *1     AppleVTD::spaceMapMemory(vtd_space*, IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 538 (IOPCIFamily + 21506) [0xffffff8002d64402]
                                                                           *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 326 (IOPCIFamily + 11040) [0xffffff8002d61b20]
                                                                             *1     AppleVTD::checkFree(vtd_space*, unsigned int) + 187 (IOPCIFamily + 12397) [0xffffff8002d6206d]
                                                                               *1     AppleVTD::space_free(vtd_space*, unsigned int, unsigned int) + 397 (IOPCIFamily + 13689) [0xffffff8002d62579]
                                                                                 *1     ??? (kernel + 594416) [0xffffff80002a11f0] (running)
                                                           *1     dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                             *1     cpx_is_composite_key + 1 (kernel + 3459057) [0xffffff800055c7f1] (running)
                                               *3     obj_read + 704 (apfs + 1065758) [0xffffff800349e31e]
                                                 *2     omap_get + 302 (apfs + 1084803) [0xffffff80034a2d83]
                                                   *2     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                     *2     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                       *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                         *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                           *2     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                                             *2     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                               *2     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                                 *1     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                                   *1     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                                     *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                                       *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                                         *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                           *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                             *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                                 *1     _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                                                   *1     nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                                                     *1     VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                                       *1     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                                         *1     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                                           *1     IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                                             *1     IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                                               *1     vm_map_create_upl + 2406 (kernel + 1348342) [0xffffff80003592f6]
                                                                                 *1     vm_object_iopl_request + 399 (kernel + 1348767) [0xffffff800035949f] (running)
                                                 *1     omap_get + 120 (apfs + 1084621) [0xffffff80034a2ccd]
                                                   *1     IORWLockRead + 769 (kernel + 1746593) [0xffffff80003ba6a1]
                                                     *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                       *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                         *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                             *1     obj_get + 4009 (apfs + 1064276) [0xffffff800349dd54]
                                               *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                 *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                 *1     obj_reference_release_wait + 49 (apfs + 1045678) [0xffffff80034994ae]
                                                   *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                             *1     obj_get + 2762 (apfs + 1063029) [0xffffff800349d875]
                                               *1     cv_wait_rw + 148 (apfs + 661198) [0xffffff800343b6ce]
                                                 *1     lck_rw_sleep + 115 (kernel + 597667) [0xffffff80002a1ea3]
                                                   *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                             *1     obj_get + 713 (apfs + 1060980) [0xffffff800349d074]
                                               *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                       *32    _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                         *32    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *32    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *30    obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *27    obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *27    vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *20    _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *20    buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *20    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *20    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *20    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *20    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *20    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                   *7     _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                                     *7     nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                                       *7     VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                         *7     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                           *7     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                             *7     IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                               *7     IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                                 *7     vm_map_create_upl + 184 (kernel + 1346120) [0xffffff8000358a48]
                                                                   *7     IORWLockRead + 769 (kernel + 1746593) [0xffffff80003ba6a1]
                                                                     *7     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                       *7     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                         *7     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                               *3     obj_read + 704 (apfs + 1065758) [0xffffff800349e31e]
                                                 *3     omap_get + 302 (apfs + 1084803) [0xffffff80034a2d83]
                                                   *3     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                     *3     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                       *3     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                         *3     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                           *2     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                                             *2     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                               *2     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                                 *2     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                                   *2     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                                     *2     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                                       *2     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                                         *2     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                           *2     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                             *2     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                           *1     obj_get + 942 (apfs + 1061209) [0xffffff800349d159] (running)
                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                 *1     obj_reference_release_wait + 49 (apfs + 1045678) [0xffffff80034994ae] (running)
                                             *1     obj_get + 3113 (apfs + 1063380) [0xffffff800349d9d4]
                                               *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                 *1     IORWLockUnlock + 210 (kernel + 1745186) [0xffffff80003ba122] (running)
                                       *3     _bt_lookup_variant + 722 (apfs + 939510) [0xffffff800347f5f6]
                                         *1     obj_release + 718 (apfs + 1049437) [0xffffff800349a35d]
                                           *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                         *1     obj_release + 690 (apfs + 1049409) [0xffffff800349a341]
                                           *1     OSBitAndAtomic + 24 (kernel + 7593704) [0xffffff800094dee8] (running)
                                         *1     obj_release + 500 (apfs + 1049219) [0xffffff800349a283]
                                           *1     OSBitOrAtomic + 24 (kernel + 7593736) [0xffffff800094df08] (running)
                                       *1     _bt_lookup_variant + 1243 (apfs + 940031) [0xffffff800347f7ff]
                                         *1     obj_release + 435 (apfs + 1049154) [0xffffff800349a242]
                                           *1     obj_cache_enqueue_deferred_update + 34 (apfs + 1050114) [0xffffff800349a602]
                                             *1     OSBitOrAtomic + 24 (kernel + 7593736) [0xffffff800094df08] (running)
                                       *1     _bt_lookup_variant + 758 (apfs + 939546) [0xffffff800347f61a]
                                         *1     btree_node_child_val + 108 (apfs + 892907) [0xffffff8003473feb] (running)
                                       *1     _bt_lookup_variant + 714 (apfs + 939502) [0xffffff800347f5ee]
                                         *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                           *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                       *1     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                         *1     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                           *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                             *1     apfs_key_compare + 170 (apfs + 673858) [0xffffff800343e842] (running)
                                   *5     iterate_raw_jobjs_with_hint + 559 (apfs + 666479) [0xffffff800343cb6f]
                                     *5     bt_iterator_next + 78 (apfs + 941456) [0xffffff800347fd90]
                                       *2     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                         *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *1     obj_get + 4009 (apfs + 1064276) [0xffffff800349dd54]
                                               *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                 *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                               *1     obj_get_finish + 198 (apfs + 1066559) [0xffffff800349e63f]
                                                 *1     OSBitAndAtomic + 18 (kernel + 7593698) [0xffffff800094dee2] (running)
                                       *1     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                         *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                           *1     apfs_key_compare + 182 (apfs + 673870) [0xffffff800343e84e] (running)
                                       *1     _bt_lookup_variant + 468 (apfs + 939256) [0xffffff800347f4f8]
                                         *1     obj_release + 1073 (apfs + 1049792) [0xffffff800349a4c0] (running)
                                       *1     memcpy + 9 (kernel + 4185) [0xffffff8000101059] (running)
                                   *3     iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                                     *3     raw_ino_loader + 60 (apfs + 665847) [0xffffff800343c8f7]
                                       *2     key_val_to_jobj + 657 (apfs + 669581) [0xffffff800343d78d]
                                         *1     xf_init_with_blob + 197 (apfs + 1171319) [0xffffff80034b7f77]
                                           *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                             *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                               *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                 *1     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                         *1     xf_init_with_blob + 183 (apfs + 1171305) [0xffffff80034b7f69]
                                           *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                             *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                               *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                 *1     ??? (kernel + 900610) [0xffffff80002ebe02] (running)
                                       *1     key_val_to_jobj + 415 (apfs + 669339) [0xffffff800343d69b]
                                         *1     _apfs_zalloc + 77 (apfs + 657472) [0xffffff800343a840]
                                           *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                   *1     iterate_raw_jobjs_with_hint + 108 (apfs + 666028) [0xffffff800343c9ac]
                                     *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                       *1     ??? (kernel + 900873) [0xffffff80002ebf09] (running)
                                 *2     fs_get_inode_with_hint + 570 (apfs + 665113) [0xffffff800343c619]
                                   *2     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                     *1     lookup_jobj_in_snap + 299 (apfs + 667074) [0xffffff800343cdc2]
                                       *1     __bzero + 6 (kernel + 4342) [0xffffff80001010f6] (running)
                                     *1     lookup_jobj_in_snap + 277 (apfs + 667052) [0xffffff800343cdac]
                                       *1     key_val_to_jobj + 718 (apfs + 669642) [0xffffff800343d7ca]
                                         *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                           *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                             *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                               *1     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                 *1     fs_get_inode_with_hint + 688 (apfs + 665231) [0xffffff800343c68f]
                                   *1     lck_rw_alloc_init + 41 (kernel + 1744441) [0xffffff80003b9e39]
                                     *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                       *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                               *2     _get_inode_with_lookaside_and_hint + 132 (apfs + 664474) [0xffffff800343c39a]
                                 *2     apfs_jhash_try_insert_stream + 111 (apfs + 659088) [0xffffff800343ae90]
                                   *1     object_in_jhash + 87 (apfs + 658422) [0xffffff800343abf6] (running)
                                   *1     object_in_jhash + 84 (apfs + 658419) [0xffffff800343abf3] (running)
                             *6     attrlistbulk_iterator + 877 (apfs + 379227) [0xffffff80033f695b]
                               *5     apfs_pack_vap_common + 895 (apfs + 310114) [0xffffff80033e5b62]
                                 *5     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                   *5     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                     *5     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                       *3     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                         *3     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *3     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *3     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *3     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *3     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *2     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *2     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *2     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *2     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *2     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *2     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *2     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                   *1     _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                                     *1     nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                                       *1     VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                         *1     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                           *1     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                             *1     IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                               *1     IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                                 *1     vm_map_create_upl + 184 (kernel + 1346120) [0xffffff8000358a48]
                                                                   *1     IORWLockRead + 769 (kernel + 1746593) [0xffffff80003ba6a1]
                                                                     *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                       *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                         *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                       *1     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                         *1     obj_release + 445 (apfs + 1049164) [0xffffff800349a24c]
                                           *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                             *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                       *1     _bt_lookup_variant + 435 (apfs + 939223) [0xffffff800347f4d7] (running)
                               *1     apfs_pack_vap_common + 1436 (apfs + 310655) [0xffffff80033e5d7f]
                                 *1     apfs_timestamp_to_timespec + 26 (apfs + 1007765) [0xffffff8003490095]
                                   *1     vfs_context_proc + 31 (kernel + 3413439) [0xffffff80005515bf] (running)
                             *4     attrlistbulk_iterator + 1887 (apfs + 380237) [0xffffff80033f6d4d]
                               *4     vfs_attr_pack_ext + 227 (kernel + 3012883) [0xffffff80004ef913]
                                 *1     ??? (kernel + 3028043) [0xffffff80004f344b]
                                   *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                     *1     ??? (kernel + 906197) [0xffffff80002ed3d5] (running)
                                 *1     ??? (kernel + 3027836) [0xffffff80004f337c]
                                   *1     uiomove64 + 462 (kernel + 6433998) [0xffffff8000832cce]
                                     *1     _bcopy + 14 (kernel + 138734) [0xffffff8000231dee] (running)
                                 *1     ??? (kernel + 3026657) [0xffffff80004f2ee1] (running)
                                 *1     ??? (kernel + 3015462) [0xffffff80004f0326]
                                   *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                     *1     ??? (kernel + 898757) [0xffffff80002eb6c5]
                                       *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                         *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                             *3     attrlistbulk_iterator + 1901 (apfs + 380251) [0xffffff80033f6d5b]
                               *1     jobj_release + 228 (apfs + 665650) [0xffffff800343c832]
                                 *1     ??? (kernel + 906076) [0xffffff80002ed35c] (running)
                               *1     jobj_release + 169 (apfs + 665591) [0xffffff800343c7f7]
                                 *1     lck_mtx_free + 14 (kernel + 1751486) [0xffffff80003bb9be]
                                   *1     lck_mtx_destroy + 201 (kernel + 1751721) [0xffffff80003bbaa9] (running)
                               *1     jobj_release + 134 (apfs + 665556) [0xffffff800343c7d4]
                                 *1     ??? (kernel + 906009) [0xffffff80002ed319] (running)
                             *1     attrlistbulk_iterator + 1969 (apfs + 380319) [0xffffff80033f6d9f]
                               *1     __strlcpy_chk + 56 (kernel + 1522104) [0xffffff80003839b8] (running)
                             *1     attrlistbulk_iterator + 1839 (apfs + 380189) [0xffffff80033f6d1d] (running)
                             *1     attrlistbulk_iterator + 891 (apfs + 379241) [0xffffff80033f6969]
                               *1     pack_uid_and_gid + 116 (apfs + 378235) [0xffffff80033f657b] (running)
                           *24    iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                             *24    bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                               *16    _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                 *16    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *16    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *14    obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                       *14    obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                         *14    vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                           *14    _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                             *14    buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                               *14    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                 *14    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                   *13    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *13    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *12    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                       *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                   *1     thread_block_reason + 202 (kernel + 660090) [0xffffff80002b127a] (running)
                                     *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                       *1     obj_get_finish + 214 (apfs + 1066575) [0xffffff800349e64f] (running)
                                     *1     obj_cache_unlock_by_state + 0 (apfs + 1039740) [0xffffff8003497d7c] (running)
                               *8     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                 *8     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *8     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *7     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                       *7     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                         *7     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                           *6     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                             *6     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                               *6     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                 *6     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                   *6     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *6     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *6     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                           *1     _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                             *1     nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                               *1     VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                 *1     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                   *1     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                     *1     IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                       *1     IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                         *1     vm_map_create_upl + 184 (kernel + 1346120) [0xffffff8000358a48]
                                                           *1     IORWLockRead + 769 (kernel + 1746593) [0xffffff80003ba6a1]
                                                             *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                               *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                 *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                     *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                       *1     lck_rw_unlock_shared + 0 (kernel + 1745616) [0xffffff80003ba2d0] (running)
                           *6     iterate_raw_jobjs_with_hint + 559 (apfs + 666479) [0xffffff800343cb6f]
                             *6     bt_iterator_next + 78 (apfs + 941456) [0xffffff800347fd90]
                               *2     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                 *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *1     obj_lock + 65 (apfs + 1066767) [0xffffff800349e70f] (running)
                                     *1     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                       *1     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                         *1     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                           *1     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                             *1     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                               *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                 *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                   *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                               *1     _bt_lookup_variant + 2033 (apfs + 940821) [0xffffff800347fb15] (running)
                               *1     _bt_lookup_variant + 1726 (apfs + 940514) [0xffffff800347f9e2]
                                 *1     apfs_key_compare + 56 (apfs + 673744) [0xffffff800343e7d0] (running)
                               *1     _bt_lookup_variant + 1360 (apfs + 940148) [0xffffff800347f874]
                                 *1     obj_release + 445 (apfs + 1049164) [0xffffff800349a24c]
                                   *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                     *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                               *1     _bt_lookup_variant + 1040 (apfs + 939828) [0xffffff800347f734]
                                 *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                   *1     apfs_key_compare + 78 (apfs + 673766) [0xffffff800343e7e6]
                                     *1     jobj_validate_key_val + 337 (apfs + 671257) [0xffffff800343de19] (running)
                         *1     apfs_vnop_getattrlistbulk + 732 (apfs + 362492) [0xffffff80033f27fc] (running)
                         *1     apfs_vnop_getattrlistbulk + 368 (apfs + 362128) [0xffffff80033f2690]
                           *1     _apfs_calloc + 63 (apfs + 657283) [0xffffff800343a783]
                             *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                               *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                 *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                   *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                         *1     memset + 15 (kernel + 4287) [0xffffff80001010bf] (running)
                         *1     memset + 12 (kernel + 4284) [0xffffff80001010bc] (running)
                       *1     getattrlistbulk + 866 (kernel + 3045058) [0xffffff80004f76c2]
                         *1     kauth_authorize_action + 80 (kernel + 6112704) [0xffffff80007e45c0]
                           *1     ??? (kernel + 3210408) [0xffffff800051fca8]
                             *1     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                               *1     apfs_vnop_getattr + 101 (apfs + 307113) [0xffffff80033e4fa9] (running)
                156   fts_build + 1045 (libsystem_c.dylib + 22746) [0x7fff2030c8da]
                  156   getattrlistbulk + 10 (libsystem_kernel.dylib + 15646) [0x7fff203ffd1e]
                   *155   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                     *155   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                       *153   getattrlistbulk + 1544 (kernel + 3045736) [0xffffff80004f7968]
                         *153   apfs_vnop_getattrlistbulk + 728 (apfs + 362488) [0xffffff80033f27f8]
                           *127   iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                             *118   attrlistbulk_iterator + 481 (apfs + 378831) [0xffffff80033f67cf]
                               *114   _get_inode_with_lookaside_and_hint + 94 (apfs + 664436) [0xffffff800343c374]
                                 *109   fs_get_inode_with_hint + 217 (apfs + 664760) [0xffffff800343c4b8]
                                   *107   iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                     *107   bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                       *72    _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                         *72    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *72    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *68    obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *67    obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *67    vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *63    _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *63    buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *63    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *63    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *63    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *63    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *63    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                   *4     _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                                     *4     nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                                       *4     VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                         *4     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                           *2     dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                             *1     IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 502 (IOStorageFamily + 28458) [0xffffff8002e68f2a]
                                                               *1     IOBlockStorageDriver::executeRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 297 (IOStorageFamily + 17419) [0xffffff8002e6640b]
                                                                 *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 981 (IONVMeFamily + 108419) [0xffffff8002aba783]
                                                                   *1     IONVMeController::ProcessNVMeRequest(AppleNVMeRequest*, bool) + 406 (IONVMeFamily + 48172) [0xffffff8002aabc2c]
                                                                     *1     IONVMeController::SetPendingRequest(unsigned int, AppleNVMeRequest*) + 41 (IONVMeFamily + 55165) [0xffffff8002aad77d]
                                                                       *1     OSIncrementAtomic + 13 (kernel + 7593661) [0xffffff800094debd] (running)
                                                             *1     IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 152 (IOStorageFamily + 28108) [0xffffff8002e68dcc] (running)
                                                           *2     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                             *1     IOGeneralMemoryDescriptor::prepare(unsigned int) + 259 (kernel + 8334275) [0xffffff8000a02bc3]
                                                               *1     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 620 (kernel + 8347612) [0xffffff8000a05fdc]
                                                                 *1     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 479 (kernel + 8333407) [0xffffff8000a0285f]
                                                                   *1     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1137 (kernel + 8331761) [0xffffff8000a021f1]
                                                                     *1     IOGeneralMemoryDescriptor::dmaMap(IOMapper*, IOMemoryDescriptor*, IODMACommand*, IODMAMapSpecification const*, unsigned long long, unsigned long long, unsigned long long*, unsigned long long*) + 527 (kernel + 8349375) [0xffffff8000a066bf]
                                                                       *1     AppleVTD::iovmMapMemory(IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 67 (IOPCIFamily + 22917) [0xffffff8002d64985]
                                                                         *1     AppleVTD::spaceMapMemory(vtd_space*, IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 538 (IOPCIFamily + 21506) [0xffffff8002d64402]
                                                                           *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 761 (IOPCIFamily + 11475) [0xffffff8002d61cd3] (running)
                                                             *1     IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                               *1     IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                                 *1     vm_map_create_upl + 2406 (kernel + 1348342) [0xffffff80003592f6]
                                                                   *1     vm_object_iopl_request + 3268 (kernel + 1351636) [0xffffff8000359fd4] (running)
                                               *1     obj_read + 704 (apfs + 1065758) [0xffffff800349e31e]
                                                 *1     omap_get + 302 (apfs + 1084803) [0xffffff80034a2d83]
                                                   *1     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                     *1     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                                       *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                         *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                             *3     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                               *2     obj_get_finish + 214 (apfs + 1066575) [0xffffff800349e64f] (running)
                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                 *1     obj_reference_release_wait + 49 (apfs + 1045678) [0xffffff80034994ae]
                                                   *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                             *1     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                       *25    _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                         *25    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *24    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *19    obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *19    obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *19    vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *16    _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *16    buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *16    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *16    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *16    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *16    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *16    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                   *3     _vnode_dev_read + 533 (apfs + 18272) [0xffffff800339e760]
                                                     *3     nx_bio_doread + 436 (apfs + 19268) [0xffffff800339eb44]
                                                       *3     VNOP_STRATEGY + 66 (kernel + 3440690) [0xffffff8000558032]
                                                         *3     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                           *3     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                             *3     IOGeneralMemoryDescriptor::prepare(unsigned int) + 177 (kernel + 8334193) [0xffffff8000a02b71]
                                                               *3     IOGeneralMemoryDescriptor::wireVirtual(unsigned int) + 1709 (kernel + 8345949) [0xffffff8000a0595d]
                                                                 *2     vm_map_create_upl + 202 (kernel + 1346138) [0xffffff8000358a5a]
                                                                   *2     vm_map_store_lookup_entry + 32 (kernel + 1266064) [0xffffff8000345190] (running)
                                                                 *1     vm_map_create_upl + 184 (kernel + 1346120) [0xffffff8000358a48]
                                                                   *1     IORWLockRead + 769 (kernel + 1746593) [0xffffff80003ba6a1]
                                                                     *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                       *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                         *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                             *2     obj_get + 733 (apfs + 1061000) [0xffffff800349d088]
                                               *2     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                             *1     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                               *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                 *1     obj_reference_release_wait + 342 (apfs + 1045971) [0xffffff80034995d3]
                                                   *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                             *1     obj_get + 518 (apfs + 1060785) [0xffffff800349cfb1]
                                               *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                           *1     btree_node_get_internal + 443 (apfs + 896400) [0xffffff8003474d90] (running)
                                       *2     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                         *2     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                           *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                             *1     jobj_validate_key_val + 38 (apfs + 670958) [0xffffff800343dcee] (running)
                                           *1     apfs_key_compare + 20 (apfs + 673708) [0xffffff800343e7ac] (running)
                                       *2     _bt_lookup_variant + 468 (apfs + 939256) [0xffffff800347f4f8]
                                         *1     obj_release + 435 (apfs + 1049154) [0xffffff800349a242]
                                           *1     obj_cache_enqueue_deferred_update + 34 (apfs + 1050114) [0xffffff800349a602]
                                             *1     OSBitOrAtomic + 24 (kernel + 7593736) [0xffffff800094df08] (running)
                                         *1     obj_release + 69 (apfs + 1048788) [0xffffff800349a0d4]
                                           *1     OSAddAtomic64 + 4 (kernel + 7593620) [0xffffff800094de94] (running)
                                       *1     _bt_lookup_variant + 1886 (apfs + 940674) [0xffffff800347fa82]
                                         *1     btree_node_val_ptr + 111 (apfs + 893108) [0xffffff80034740b4] (running)
                                       *1     _bt_lookup_variant + 1360 (apfs + 940148) [0xffffff800347f874]
                                         *1     obj_release + 421 (apfs + 1049140) [0xffffff800349a234]
                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                       *1     _bt_lookup_variant + 1352 (apfs + 940140) [0xffffff800347f86c]
                                         *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                           *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                       *1     _bt_lookup_variant + 1040 (apfs + 939828) [0xffffff800347f734]
                                         *1     bt_search_node_insert + 143 (apfs + 902509) [0xffffff800347656d]
                                           *1     btree_node_key_ptr + 78 (apfs + 896667) [0xffffff8003474e9b] (running)
                                       *1     _bt_lookup_variant + 969 (apfs + 939757) [0xffffff800347f6ed]
                                         *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                           *1     IORWLockUnlock + 284 (kernel + 1745260) [0xffffff80003ba16c] (running)
                                       *1     _bt_lookup_variant + 722 (apfs + 939510) [0xffffff800347f5f6]
                                         *1     obj_release + 421 (apfs + 1049140) [0xffffff800349a234]
                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                   *2     iterate_raw_jobjs_with_hint + 559 (apfs + 666479) [0xffffff800343cb6f]
                                     *2     bt_iterator_next + 78 (apfs + 941456) [0xffffff800347fd90]
                                       *2     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                         *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *2     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *2     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *2     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *2     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *2     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *2     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *2     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *2     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *2     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *2     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                 *2     fs_get_inode_with_hint + 688 (apfs + 665231) [0xffffff800343c68f]
                                   *2     lck_rw_alloc_init + 41 (kernel + 1744441) [0xffffff80003b9e39]
                                     *1     ??? (kernel + 902991) [0xffffff80002ec74f] (running)
                                     *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                 *2     fs_get_inode_with_hint + 570 (apfs + 665113) [0xffffff800343c619]
                                   *1     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                     *1     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                       *1     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                         *1     _bt_lookup_variant + 873 (apfs + 939661) [0xffffff800347f68d]
                                           *1     btree_node_child_val + 69 (apfs + 892868) [0xffffff8003473fc4]
                                             *1     btree_node_val_ptr + 85 (apfs + 893082) [0xffffff800347409a]
                                               *1     btree_node_val_len + 62 (apfs + 893245) [0xffffff800347413d] (running)
                                   *1     fs_get_xattr_in_snap + 80 (apfs + 666615) [0xffffff800343cbf7]
                                     *1     memset + 12 (kernel + 4284) [0xffffff80001010bc] (running)
                                 *1     memset + 12 (kernel + 4284) [0xffffff80001010bc] (running)
                               *4     _get_inode_with_lookaside_and_hint + 48 (apfs + 664390) [0xffffff800343c346]
                                 *3     apfs_jhash_getvnode_internal + 120 (apfs + 658025) [0xffffff800343aa69]
                                   *3     object_in_jhash + 87 (apfs + 658422) [0xffffff800343abf6] (running)
                                 *1     apfs_jhash_getvnode_internal + 75 (apfs + 657980) [0xffffff800343aa3c]
                                   *1     IORWLockRead + 48 (kernel + 1745872) [0xffffff80003ba3d0] (running)
                             *5     attrlistbulk_iterator + 877 (apfs + 379227) [0xffffff80033f695b]
                               *4     apfs_pack_vap_common + 895 (apfs + 310114) [0xffffff80033e5b62]
                                 *4     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                   *3     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                     *3     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                       *2     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                         *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                           *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                               *1     obj_get_finish + 235 (apfs + 1066596) [0xffffff800349e664]
                                                 *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                             *1     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                               *1     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                 *1     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                   *1     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                     *1     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                       *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                         *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                           *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                             *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                               *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                       *1     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                         *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                           *1     apfs_key_compare + 148 (apfs + 673836) [0xffffff800343e82c] (running)
                                   *1     lookup_jobj_in_snap + 318 (apfs + 667093) [0xffffff800343cdd5]
                                     *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                               *1     apfs_pack_vap_common + 2651 (apfs + 311870) [0xffffff80033e623e] (running)
                             *3     attrlistbulk_iterator + 1887 (apfs + 380237) [0xffffff80033f6d4d]
                               *3     vfs_attr_pack_ext + 227 (kernel + 3012883) [0xffffff80004ef913]
                                 *2     ??? (kernel + 3015832) [0xffffff80004f0498]
                                   *1     ??? (kernel + 3029885) [0xffffff80004f3b7d] (running)
                                   *1     bcopy + 20 (kernel + 4228) [0xffffff8000101084] (running)
                                 *1     ??? (kernel + 3027836) [0xffffff80004f337c]
                                   *1     uiomove64 + 462 (kernel + 6433998) [0xffffff8000832cce]
                                     *1     ??? (kernel + 1742083) [0xffffff80003b9503] (running)
                             *1     attrlistbulk_iterator + 891 (apfs + 379241) [0xffffff80033f6969]
                               *1     pack_uid_and_gid + 224 (apfs + 378343) [0xffffff80033f65e7] (running)
                           *18    iterate_raw_jobjs_with_hint + 559 (apfs + 666479) [0xffffff800343cb6f]
                             *18    bt_iterator_next + 78 (apfs + 941456) [0xffffff800347fd90]
                               *10    _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                 *10    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *10    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *10    obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                       *10    obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                         *10    vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                           *10    _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                             *10    buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                               *10    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                 *10    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                   *10    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *10    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *9     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                       *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                               *3     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                 *2     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                   *1     apfs_key_compare + 466 (apfs + 674154) [0xffffff800343e96a] (running)
                                   *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                     *1     jobj_validate_key_val + 44 (apfs + 670964) [0xffffff800343dcf4] (running)
                                 *1     bt_search_node_insert + 143 (apfs + 902509) [0xffffff800347656d]
                                   *1     btree_node_key_ptr + 41 (apfs + 896630) [0xffffff8003474e76] (running)
                               *1     _bt_lookup_variant + 1886 (apfs + 940674) [0xffffff800347fa82]
                                 *1     btree_node_val_ptr + 103 (apfs + 893100) [0xffffff80034740ac]
                                   *1     btree_node_val_range_validate + 198 (apfs + 893478) [0xffffff8003474226] (running)
                               *1     _bt_lookup_variant + 1360 (apfs + 940148) [0xffffff800347f874]
                                 *1     obj_release + 378 (apfs + 1049097) [0xffffff800349a209] (running)
                               *1     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                 *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *1     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                       *1     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                         *1     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                           *1     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                             *1     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                               *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                 *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                   *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                               *1     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                 *1     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                   *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                     *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                       *1     jobj_validate_key_val + 17 (apfs + 670937) [0xffffff800343dcd9] (running)
                               *1     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                 *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                       *1     obj_get_finish + 330 (apfs + 1066691) [0xffffff800349e6c3] (running)
                           *8     iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                             *8     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                               *8     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                 *8     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                   *8     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                     *8     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                       *8     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                         *8     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                           *8     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                             *8     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                               *8     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                 *8     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                   *8     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *8     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *8     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                       *1     getattrlistbulk + 866 (kernel + 3045058) [0xffffff80004f76c2]
                         *1     kauth_authorize_action + 225 (kernel + 6112849) [0xffffff80007e4651]
                           *1     VnodeScopeListener + 630 (AppleFileUtil + 54464) [0xffffff7f9801a4c0]
                             *1     HydrationContext_Get + 36 (AppleFileUtil + 35029) [0xffffff7f980158d5]
                               *1     _HydrationContext_IsHydrationNeededForKauthAction + 558 (AppleFileUtil + 35688) [0xffffff7f98015b68] (running)
                       *1     getattrlistbulk + 522 (kernel + 3044714) [0xffffff80004f756a]
                         *1     _bcopy + 14 (kernel + 138734) [0xffffff8000231dee] (running)
                   *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                49    fts_build + 173 (libsystem_c.dylib + 21874) [0x7fff2030c572]
                  49    __open_nocancel + 10 (libsystem_kernel.dylib + 7510) [0x7fff203fdd56]
                   *47    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                     *43    unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                       *41    open_nocancel + 313 (kernel + 3267561) [0xffffff800052dbe9]
                         *39    ??? (kernel + 3264568) [0xffffff800052d038]
                           *21    vn_open_auth + 2648 (kernel + 3371864) [0xffffff8000547358]
                             *20    vn_authorize_open_existing + 191 (kernel + 3216671) [0xffffff800052151f]
                               *20    mac_vnode_check_open + 154 (kernel + 8874122) [0xffffff8000a8688a]
                                 *20    hook_vnode_check_open + 184 (Sandbox + 51217) [0xffffff8003348811]
                                   *20    sb_evaluate_internal + 201 (Sandbox + 74643) [0xffffff800334e393]
                                     *15    eval + 4873 (Sandbox + 85506) [0xffffff8003350e02]
                                       *13    derive_vnode_storage_class + 938 (Sandbox + 97949) [0xffffff8003353e9d]
                                         *7     eval + 1294 (Sandbox + 81927) [0xffffff8003350007]
                                           *6     derive_vnode_path + 296 (Sandbox + 73358) [0xffffff800334de8e]
                                             *2     sandbox_normalize_string_ext + 111 (Sandbox + 128796) [0xffffff800335b71c]
                                               *2     smalloc + 36 (Sandbox + 71484) [0xffffff800334d73c]
                                                 *2     IOMalloc + 34 (kernel + 7992706) [0xffffff80009af582]
                                                   *2     ??? (kernel + 579084) [0xffffff800029d60c]
                                                     *2     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                       *1     memcmp_zero_ptr_aligned + 64 (kernel + 1740032) [0xffffff80003b8d00] (running)
                                                       *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                             *2     sandbox_normalize_string_ext + 395 (Sandbox + 129080) [0xffffff800335b838]
                                               *1     utf8_encodestr + 857 (kernel + 3349945) [0xffffff8000541db9] (running)
                                               *1     utf8_encodestr + 226 (kernel + 3349314) [0xffffff8000541b42] (running)
                                             *2     sandbox_normalize_string_ext + 334 (Sandbox + 129019) [0xffffff800335b7fb]
                                               *1     utf8_encodelen + 229 (kernel + 3348341) [0xffffff8000541775] (running)
                                               *1     utf8_encodelen + 207 (kernel + 3348319) [0xffffff800054175f] (running)
                                           *1     derive_vnode_path + 202 (Sandbox + 73264) [0xffffff800334de30]
                                             *1     getpath_with_mount + 224 (Sandbox + 24377) [0xffffff8003341f39]
                                               *1     strlen + 16 (kernel + 1740128) [0xffffff80003b8d60] (running)
                                         *1     eval + 9383 (Sandbox + 90016) [0xffffff8003351fa0]
                                           *1     match_device_set + 52 (Sandbox + 26068) [0xffffff80033425d4]
                                             *1     derive_vnode_rdev + 90 (Sandbox + 95431) [0xffffff80033534c7]
                                               *1     vfs_context_current + 40 (kernel + 3408840) [0xffffff80005503c8] (running)
                                         *1     eval + 7375 (Sandbox + 88008) [0xffffff80033517c8] (running)
                                         *1     eval + 7238 (Sandbox + 87871) [0xffffff800335173f]
                                           *1     match_pattern + 201 (Sandbox + 95330) [0xffffff8003353462]
                                             *1     sb_fsa_evaluate + 375 (Sandbox + 22599) [0xffffff8003341847]
                                               *1     pattern_variable_resolver + 92 (Sandbox + 102053) [0xffffff8003354ea5] (running)
                                         *1     eval + 7185 (Sandbox + 87818) [0xffffff800335170a]
                                           *1     _readaddr + 4 (Sandbox + 80525) [0xffffff800334fa8d] (running)
                                         *1     eval + 5480 (Sandbox + 86113) [0xffffff8003351061] (running)
                                         *1     eval + 1265 (Sandbox + 81898) [0xffffff800334ffea] (running)
                                       *1     derive_vnode_storage_class + 517 (Sandbox + 97528) [0xffffff8003353cf8] (running)
                                       *1     derive_vnode_storage_class + 470 (Sandbox + 97481) [0xffffff8003353cc9]
                                         *1     derive_vnode_has_multiple_names + 128 (Sandbox + 101092) [0xffffff8003354ae4]
                                           *1     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                             *1     apfs_vnop_getattr + 6 (apfs + 307018) [0xffffff80033e4f4a] (running)
                                     *1     eval + 7391 (Sandbox + 88024) [0xffffff80033517d8] (running)
                                     *1     eval + 7238 (Sandbox + 87871) [0xffffff800335173f]
                                       *1     match_pattern + 201 (Sandbox + 95330) [0xffffff8003353462]
                                         *1     sb_fsa_evaluate + 292 (Sandbox + 22516) [0xffffff80033417f4]
                                           *1     _match_sequence + 84 (Sandbox + 23628) [0xffffff8003341c4c]
                                             *1     memcmp + 4 (kernel + 1739924) [0xffffff80003b8c94] (running)
                                     *1     eval + 4847 (Sandbox + 85480) [0xffffff8003350de8] (running)
                                     *1     eval + 2293 (Sandbox + 82926) [0xffffff80033503ee]
                                       *1     derive_vnode_type + 86 (Sandbox + 95639) [0xffffff8003353597]
                                         *1     vfs_context_current + 13 (kernel + 3408813) [0xffffff80005503ad] (running)
                                     *1     AppleMobileFileIntegrity::copyEntitlement(ucred*, char const*) + 1 (AppleMobileFileIntegrity + 29819) [0xffffff80018bf47b] (running)
                             *1     vn_authorize_open_existing + 316 (kernel + 3216796) [0xffffff800052159c]
                               *1     kauth_authorize_action + 225 (kernel + 6112849) [0xffffff80007e4651]
                                 *1     VnodeScopeListener + 630 (AppleFileUtil + 54464) [0xffffff7f9801a4c0]
                                   *1     HydrationContext_Get + 130 (AppleFileUtil + 35123) [0xffffff7f98015933] (running)
                           *14    vn_open_auth + 312 (kernel + 3369528) [0xffffff8000546a38]
                             *12    namei + 4388 (kernel + 3146836) [0xffffff8000510454]
                               *7     lookup + 878 (kernel + 3150190) [0xffffff800051116e]
                                 *6     apfs_vnop_lookup + 1004 (apfs + 314221) [0xffffff80033e6b6d]
                                   *6     apfs_internal_lookup + 236 (apfs + 395627) [0xffffff80033fa96b]
                                     *6     apfs_lookup_name_with_alt_name + 67 (apfs + 389473) [0xffffff80033f9161]
                                       *6     fs_lookup_name_and_hash + 63 (apfs + 747043) [0xffffff8003450623]
                                         *4     fs_lookup_name_with_parent_id + 593 (apfs + 681229) [0xffffff800344050d]
                                           *2     iterate_raw_jobjs_with_hint + 108 (apfs + 666028) [0xffffff800343c9ac]
                                             *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                               *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                 *1     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                                             *1     memset + 12 (kernel + 4284) [0xffffff80001010bc] (running)
                                           *1     iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                                             *1     raw_lookup_name_iterator + 208 (apfs + 684212) [0xffffff80034410b4]
                                               *1     key_val_to_jobj + 388 (apfs + 669312) [0xffffff800343d680] (running)
                                           *1     iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                             *1     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                               *1     _bt_lookup_variant + 1886 (apfs + 940674) [0xffffff800347fa82]
                                                 *1     btree_node_val_ptr + 77 (apfs + 893074) [0xffffff8003474092] (running)
                                         *1     fs_lookup_name_with_parent_id + 239 (apfs + 680875) [0xffffff80034403ab]
                                           *1     utf8_normalizeOptCaseFoldAndHash + 428 (kernel + 3354668) [0xffffff800054302c]
                                             *1     ??? (kernel + 3354966) [0xffffff8000543156] (running)
                                         *1     utf8_normalizeOptCaseFoldAndHash + 0 (kernel + 3354240) [0xffffff8000542e80] (running)
                                 *1     apfs_vnop_lookup + 132 (apfs + 313349) [0xffffff80033e6805] (running)
                               *2     lookup + 1463 (kernel + 3150775) [0xffffff80005113b7]
                                 *2     ??? (kernel + 3149222) [0xffffff8000510da6]
                                   *1     audit_arg_vnpath + 348 (kernel + 5939740) [0xffffff80007ba21c]
                                     *1     build_path_with_parent + 630 (kernel + 3083814) [0xffffff8000500e26] (running)
                                   *1     audit_arg_vnpath + 215 (kernel + 5939607) [0xffffff80007ba197]
                                     *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                       *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                         *1     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                               *2     lookup + 379 (kernel + 3149691) [0xffffff8000510f7b]
                                 *1     cache_lookup_path + 1124 (kernel + 3090100) [0xffffff80005026b4] (running)
                                 *1     cache_lookup_path + 1050 (kernel + 3090026) [0xffffff800050266a] (running)
                               *1     lookup + 179 (kernel + 3149491) [0xffffff8000510eb3]
                                 *1     cache_lookup_path + 63 (kernel + 3089039) [0xffffff800050228f]
                                   *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                             *2     namei + 4372 (kernel + 3146820) [0xffffff8000510444]
                               *1     mac_vnode_check_lookup_preflight + 158 (kernel + 8872846) [0xffffff8000a8638e]
                                 *1     EndpointSecurityEventManager::es_vnode_check_lookup_preflight(ucred*, vnode*, label*, char const*, unsigned long) + 30 (EndpointSecurity + 103662) [0xffffff8001c5f4ee] (running)
                               *1     mac_vnode_check_lookup_preflight + 130 (kernel + 8872818) [0xffffff8000a86372] (running)
                           *3     vn_open_auth + 3064 (kernel + 3372280) [0xffffff80005474f8]
                             *2     kauth_authorize_fileop + 204 (kernel + 6113388) [0xffffff80007e486c]
                               *1     build_path_with_parent + 693 (kernel + 3083877) [0xffffff8000500e65] (running)
                               *1     build_path_with_parent + 92 (kernel + 3083276) [0xffffff8000500c0c] (running)
                             *1     kauth_authorize_fileop + 106 (kernel + 6113290) [0xffffff80007e480a]
                               *1     ??? (kernel + 900899) [0xffffff80002ebf23] (running)
                           *1     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                         *2     ??? (kernel + 3264502) [0xffffff800052cff6]
                           *1     falloc_withalloc + 88 (kernel + 6188168) [0xffffff80007f6c88]
                             *1     fdalloc + 206 (kernel + 6158030) [0xffffff80007ef6ce] (running)
                           *1     IOLockLock + 33 (kernel + 1757361) [0xffffff80003bd0b1] (running)
                       *1     open_nocancel + 336 (kernel + 3267584) [0xffffff800052dc00]
                         *1     ??? (kernel + 580011) [0xffffff800029d9ab] (running)
                       *1     open_nocancel + 127 (kernel + 3267375) [0xffffff800052db2f]
                         *1     ??? (kernel + 579084) [0xffffff800029d60c]
                           *1     ??? (kernel + 900863) [0xffffff80002ebeff] (running)
                     *3     unix_syscall64 + 694 (kernel + 7540118) [0xffffff8000940d96]
                       *2     audit_syscall_enter + 290 (kernel + 5934674) [0xffffff80007b8e52]
                         *1     audit_new + 393 (kernel + 5932569) [0xffffff80007b8619]
                           *1     audit_mac_new + 109 (kernel + 5992429) [0xffffff80007c6fed]
                             *1     mac_externalize + 714 (kernel + 8819306) [0xffffff8000a7926a] (running)
                         *1     audit_new + 207 (kernel + 5932383) [0xffffff80007b855f]
                           *1     IOLockUnlock + 45 (kernel + 1758061) [0xffffff80003bd36d] (running)
                       *1     audit_syscall_enter + 370 (kernel + 5934754) [0xffffff80007b8ea2]
                         *1     audit_identity_info_construct + 70 (kernel + 5941478) [0xffffff80007ba8e6]
                           *1     ubc_cs_blob_get + 57 (kernel + 6646441) [0xffffff8000866aa9] (running)
                     *1     unix_syscall64 + 746 (kernel + 7540170) [0xffffff8000940dca]
                       *1     audit_syscall_exit + 84 (kernel + 5934916) [0xffffff80007b8f44]
                         *1     audit_free + 74 (kernel + 5932762) [0xffffff80007b86da]
                           *1     ??? (kernel + 580266) [0xffffff800029daaa]
                             *1     ??? (kernel + 905652) [0xffffff80002ed1b4] (running)
                   *2     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                16    fts_build + 2289 (libsystem_c.dylib + 23990) [0x7fff2030cdb6]
                  16    fstatat$INODE64 + 10 (libsystem_kernel.dylib + 16242) [0x7fff203fff72]
                   *16    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                     *16    unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                       *16    fstatat64 + 108 (kernel + 3288316) [0xffffff8000532cfc]
                         *12    ??? (kernel + 3285278) [0xffffff800053211e]
                           *12    ??? (kernel + 3260571) [0xffffff800052c09b]
                             *12    namei + 4388 (kernel + 3146836) [0xffffff8000510454]
                               *12    lookup + 878 (kernel + 3150190) [0xffffff800051116e]
                                 *8     apfs_vnop_lookup + 1004 (apfs + 314221) [0xffffff80033e6b6d]
                                   *8     apfs_internal_lookup + 236 (apfs + 395627) [0xffffff80033fa96b]
                                     *8     apfs_lookup_name_with_alt_name + 67 (apfs + 389473) [0xffffff80033f9161]
                                       *8     fs_lookup_name_and_hash + 63 (apfs + 747043) [0xffffff8003450623]
                                         *7     fs_lookup_name_with_parent_id + 593 (apfs + 681229) [0xffffff800344050d]
                                           *6     iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                             *6     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                               *2     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                 *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                   *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                     *1     obj_get + 3113 (apfs + 1063380) [0xffffff800349d9d4]
                                                       *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                         *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                     *1     obj_get + 518 (apfs + 1060785) [0xffffff800349cfb1]
                                                       *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                               *2     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                                 *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                   *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                     *1     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                                       *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                     *1     obj_get + 3923 (apfs + 1064190) [0xffffff800349dcfe] (running)
                                               *1     _bt_lookup_variant + 1040 (apfs + 939828) [0xffffff800347f734]
                                                 *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                   *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                     *1     jobj_validate_key_val + 17 (apfs + 670937) [0xffffff800343dcd9] (running)
                                               *1     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                                 *1     obj_release + 1047 (apfs + 1049766) [0xffffff800349a4a6]
                                                   *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                     *1     IORWLockUnlock + 210 (kernel + 1745186) [0xffffff80003ba122] (running)
                                           *1     iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                                             *1     raw_lookup_name_iterator + 155 (apfs + 684159) [0xffffff800344107f]
                                               *1     utf8_normalizeOptCaseFoldAndCompare + 503 (kernel + 3358103) [0xffffff8000543d97] (running)
                                         *1     fs_lookup_name_with_parent_id + 239 (apfs + 680875) [0xffffff80034403ab]
                                           *1     utf8_normalizeOptCaseFoldAndHash + 670 (kernel + 3354910) [0xffffff800054311e] (running)
                                 *4     apfs_vnop_lookup + 1232 (apfs + 314449) [0xffffff80033e6c51]
                                   *4     apfs_load_inode_internal + 607 (apfs + 268479) [0xffffff80033db8bf]
                                     *3     fs_get_inode_with_hint + 217 (apfs + 664760) [0xffffff800343c4b8]
                                       *2     iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                         *2     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                           *1     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                             *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                               *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                 *1     obj_get + 4009 (apfs + 1064276) [0xffffff800349dd54]
                                                   *1     IORWLockUnlock + 0 (kernel + 1744976) [0xffffff80003ba050] (running)
                                           *1     _bt_lookup_variant + 525 (apfs + 939313) [0xffffff800347f531]
                                             *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                       *1     iterate_raw_jobjs_with_hint + 559 (apfs + 666479) [0xffffff800343cb6f]
                                         *1     bt_iterator_next + 78 (apfs + 941456) [0xffffff800347fd90]
                                           *1     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                             *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                               *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                 *1     jobj_validate_key_val + 119 (apfs + 671039) [0xffffff800343dd3f] (running)
                                     *1     fs_get_inode_with_hint + 688 (apfs + 665231) [0xffffff800343c68f]
                                       *1     lck_rw_alloc_init + 41 (kernel + 1744441) [0xffffff80003b9e39]
                                         *1     ??? (kernel + 898370) [0xffffff80002eb542] (running)
                         *4     ??? (kernel + 3285637) [0xffffff8000532285]
                           *2     vn_stat + 175 (kernel + 3375119) [0xffffff800054800f]
                             *2     vn_stat_noauth + 223 (kernel + 3373711) [0xffffff8000547a8f]
                               *1     vnode_getattr + 848 (kernel + 3418464) [0xffffff8000552960]
                                 *1     vnode_attr_handle_mnt_ignore_ownership + 51 (kernel + 3417331) [0xffffff80005524f3] (running)
                               *1     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                 *1     apfs_vnop_getattr + 810 (apfs + 307822) [0xffffff80033e526e]
                                   *1     get_nlink_for_dir + 0 (apfs + 309129) [0xffffff80033e5789] (running)
                           *2     vn_stat + 113 (kernel + 3375057) [0xffffff8000547fd1]
                             *1     kauth_authorize_action + 225 (kernel + 6112849) [0xffffff80007e4651]
                               *1     VnodeScopeListener + 2360 (AppleFileUtil + 56194) [0xffffff7f9801ab82] (running)
                             *1     kauth_authorize_action + 80 (kernel + 6112704) [0xffffff80007e45c0]
                               *1     ??? (kernel + 3210569) [0xffffff800051fd49]
                                 *1     ??? (kernel + 3213206) [0xffffff8000520796] (running)
                2     fts_build + 2412 (libsystem_c.dylib + 24113) [0x7fff2030ce31]
                  2     __close_nocancel + 10 (libsystem_kernel.dylib + 9994) [0x7fff203fe70a]
                   *2     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                     *2     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                       *1     ??? (kernel + 6162158) [0xffffff80007f06ee]
                         *1     ??? (kernel + 6154968) [0xffffff80007eead8]
                           *1     mac_file_label_destroy + 240 (kernel + 8945760) [0xffffff8000a98060]
                             *1     mac_labelzone_free + 39 (kernel + 8827895) [0xffffff8000a7b3f7] (running)
                       *1     ??? (kernel + 6161068) [0xffffff80007f02ac]
                         *1     kauth_authorize_fileop + 464 (kernel + 6113648) [0xffffff80007e4970]
                           *1     FileopScopeListener + 54 (AppleFileUtil + 28854) [0xffffff7f980140b6]
                             *1     OSIncrementAtomic + 13 (kernel + 7593661) [0xffffff800094debd] (running)
                2     fts_build + 975 (libsystem_c.dylib + 22676) [0x7fff2030c894]
                  2     fts_alloc + 58 (libsystem_c.dylib + 25485) [0x7fff2030d38d]
                    2     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                      2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                        1     tiny_malloc_should_clear + 1004 (libsystem_malloc.dylib + 15280) [0x7fff2025bbb0]
                          1     _platform_bzero$VARIANT$Haswell + 99 (libsystem_platform.dylib + 5379) [0x7fff20475503]
                           *1     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                             *1     user_trap + 432 (kernel + 1791216) [0xffffff80003c54f0]
                               *1     ??? (kernel + 1141435) [0xffffff8000326abb]
                                 *1     ??? (kernel + 1129947) [0xffffff8000323ddb]
                                   *1     pmap_enter_options + 2646 (kernel + 1647990) [0xffffff80003a2576] (running)
                        1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                          1     tiny_malloc_from_free_list + 1632 (libsystem_malloc.dylib + 17551) [0x7fff2025c48f]
                            1     tiny_free_list_add_ptr + 474 (libsystem_malloc.dylib + 28292) [0x7fff2025ee84] (running)
                1     fts_build + 2120 (libsystem_c.dylib + 23821) [0x7fff2030cd0d] (running)
                1     fts_build + 573 (libsystem_c.dylib + 22274) [0x7fff2030c702] (running)
                1     fts_build + 194 (libsystem_c.dylib + 21895) [0x7fff2030c587]
                  1     default_zone_malloc + 26 (libsystem_malloc.dylib + 5429) [0x7fff20259535] (running)
              1     fts_read$INODE64 + 400 (libsystem_c.dylib + 20569) [0x7fff2030c059]
                1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                  1     tiny_free_no_lock + 187 (libsystem_malloc.dylib + 25622) [0x7fff2025e416] (running)
            356   Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1365 (Security + 1879683) [0x7fff22483e83]
              278   Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 166 (Security + 1881638) [0x7fff22484626]
                277   Security::CodeSigning::ResourceBuilder::Rule::match(char const*) const + 16 (Security + 1882230) [0x7fff22484876]
                  271   regnexec + 65 (libsystem_c.dylib + 446717) [0x7fff203740fd]
                    271   tre_match + 269 (libsystem_c.dylib + 446999) [0x7fff20374217]
                      16    tre_tnfa_run_parallel + 231 (libsystem_c.dylib + 474859) [0x7fff2037aeeb]
                        16    _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                          10    szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                            7     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                              1     set_tiny_meta_header_in_use + 248 (libsystem_malloc.dylib + 17998) [0x7fff2025c64e] (running)
                              1     set_tiny_meta_header_in_use + 54 (libsystem_malloc.dylib + 17804) [0x7fff2025c58c] (running)
                              1     tiny_malloc_from_free_list + 1632 (libsystem_malloc.dylib + 17551) [0x7fff2025c48f]
                                1     tiny_free_list_add_ptr + 196 (libsystem_malloc.dylib + 28014) [0x7fff2025ed6e] (running)
                              1     tiny_malloc_from_free_list + 910 (libsystem_malloc.dylib + 16829) [0x7fff2025c1bd] (running)
                              1     tiny_malloc_from_free_list + 640 (libsystem_malloc.dylib + 16559) [0x7fff2025c0af] (running)
                              1     tiny_malloc_from_free_list + 44 (libsystem_malloc.dylib + 15963) [0x7fff2025be5b] (running)
                              1     tiny_malloc_from_free_list + 8 (libsystem_malloc.dylib + 15927) [0x7fff2025be37]
                               *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                            1     tiny_malloc_should_clear + 62 (libsystem_malloc.dylib + 14338) [0x7fff2025b802] (running)
                            1     tiny_malloc_should_clear + 55 (libsystem_malloc.dylib + 14331) [0x7fff2025b7fb] (running)
                            1     tiny_malloc_should_clear + 44 (libsystem_malloc.dylib + 14320) [0x7fff2025b7f0] (running)
                          5     szone_malloc_should_clear + 109 (libsystem_malloc.dylib + 10210) [0x7fff2025a7e2]
                            2     small_malloc_should_clear + 259 (libsystem_malloc.dylib + 10695) [0x7fff2025a9c7]
                              1     small_malloc_from_free_list + 531 (libsystem_malloc.dylib + 12872) [0x7fff2025b248] (running)
                              1     small_malloc_from_free_list + 337 (libsystem_malloc.dylib + 12678) [0x7fff2025b186] (running)
                            1     small_malloc_should_clear + 156 (libsystem_malloc.dylib + 10592) [0x7fff2025a960] (running)
                            1     small_malloc_should_clear + 70 (libsystem_malloc.dylib + 10506) [0x7fff2025a90a] (running)
                            1     small_malloc_should_clear + 10 (libsystem_malloc.dylib + 10446) [0x7fff2025a8ce] (running)
                          1     szone_malloc_should_clear + 80 (libsystem_malloc.dylib + 10181) [0x7fff2025a7c5] (running)
                      12    tre_tnfa_run_parallel + 8827 (libsystem_c.dylib + 483455) [0x7fff2037d07f]
                        3     free + 120 (libsystem_malloc.dylib + 8477) [0x7fff2025a11d]
                          2     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f]
                            1     tiny_size + 293 (libsystem_malloc.dylib + 19215) [0x7fff2025cb0f] (running)
                            1     tiny_size + 6 (libsystem_malloc.dylib + 18928) [0x7fff2025c9f0] (running)
                          1     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f] (running)
                        3     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                          1     tiny_free_no_lock + 599 (libsystem_malloc.dylib + 26034) [0x7fff2025e5b2] (running)
                          1     tiny_free_no_lock + 262 (libsystem_malloc.dylib + 25697) [0x7fff2025e461] (running)
                          1     tiny_free_no_lock + 97 (libsystem_malloc.dylib + 25532) [0x7fff2025e3bc] (running)
                        1     free_tiny + 472 (libsystem_malloc.dylib + 25143) [0x7fff2025e237] (running)
                        1     free_tiny + 462 (libsystem_malloc.dylib + 25133) [0x7fff2025e22d] (running)
                        1     free_tiny + 8 (libsystem_malloc.dylib + 24679) [0x7fff2025e067] (running)
                        1     free_small + 668 (libsystem_malloc.dylib + 20555) [0x7fff2025d04b] (running)
                        1     free + 110 (libsystem_malloc.dylib + 8467) [0x7fff2025a113] (running)
                        1     free + 12 (libsystem_malloc.dylib + 8369) [0x7fff2025a0b1] (running)
                      11    tre_tnfa_run_parallel + 8555 (libsystem_c.dylib + 483183) [0x7fff2037cf6f] (running)
                      9     tre_tnfa_run_parallel + 1570 (libsystem_c.dylib + 476198) [0x7fff2037b426] (running)
                      9     tre_tnfa_run_parallel + 1064 (libsystem_c.dylib + 475692) [0x7fff2037b22c]
                        4     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                          1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                            1     tiny_free_list_add_ptr + 929 (libsystem_malloc.dylib + 28747) [0x7fff2025f04b] (running)
                          1     tiny_free_no_lock + 1014 (libsystem_malloc.dylib + 26449) [0x7fff2025e751]
                            1     tiny_free_list_remove_ptr + 251 (libsystem_malloc.dylib + 29306) [0x7fff2025f27a] (running)
                          1     tiny_free_no_lock + 566 (libsystem_malloc.dylib + 26001) [0x7fff2025e591] (running)
                          1     tiny_free_no_lock + 13 (libsystem_malloc.dylib + 25448) [0x7fff2025e368] (running)
                        1     small_free_list_add_ptr + 1 (libsystem_malloc.dylib + 29803) [0x7fff2025f46b] (running)
                        1     free_tiny + 96 (libsystem_malloc.dylib + 24767) [0x7fff2025e0bf] (running)
                        1     free_tiny + 36 (libsystem_malloc.dylib + 24707) [0x7fff2025e083] (running)
                        1     free + 226 (libsystem_malloc.dylib + 8583) [0x7fff2025a187] (running)
                        1     free + 120 (libsystem_malloc.dylib + 8477) [0x7fff2025a11d]
                          1     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f]
                            1     tiny_size + 78 (libsystem_malloc.dylib + 19000) [0x7fff2025ca38] (running)
                      8     tre_tnfa_run_parallel + 7982 (libsystem_c.dylib + 482610) [0x7fff2037cd32] (running)
                      8     tre_tnfa_run_parallel + 3690 (libsystem_c.dylib + 478318) [0x7fff2037bc6e] (running)
                      7     tre_tnfa_run_parallel + 3576 (libsystem_c.dylib + 478204) [0x7fff2037bbfc] (running)
                      6     tre_tnfa_run_parallel + 8548 (libsystem_c.dylib + 483176) [0x7fff2037cf68] (running)
                      6     tre_tnfa_run_parallel + 3546 (libsystem_c.dylib + 478174) [0x7fff2037bbde] (running)
                      6     tre_tnfa_run_parallel + 1590 (libsystem_c.dylib + 476218) [0x7fff2037b43a] (running)
                      5     tre_tnfa_run_parallel + 8021 (libsystem_c.dylib + 482649) [0x7fff2037cd59] (running)
                      5     tre_tnfa_run_parallel + 7677 (libsystem_c.dylib + 482305) [0x7fff2037cc01]
                        2     _platform_memmove$VARIANT$Haswell + 185 (libsystem_platform.dylib + 4281) [0x7fff204750b9] (running)
                        1     _platform_memmove$VARIANT$Haswell + 163 (libsystem_platform.dylib + 4259) [0x7fff204750a3] (running)
                        1     _platform_memmove$VARIANT$Haswell + 71 (libsystem_platform.dylib + 4167) [0x7fff20475047] (running)
                        1     _platform_memmove$VARIANT$Haswell + 7 (libsystem_platform.dylib + 4103) [0x7fff20475007] (running)
                      4     tre_tnfa_run_parallel + 3962 (libsystem_c.dylib + 478590) [0x7fff2037bd7e] (running)
                      4     tre_tnfa_run_parallel + 3657 (libsystem_c.dylib + 478285) [0x7fff2037bc4d] (running)
                      4     tre_tnfa_run_parallel + 3649 (libsystem_c.dylib + 478277) [0x7fff2037bc45] (running)
                      4     tre_tnfa_run_parallel + 3626 (libsystem_c.dylib + 478254) [0x7fff2037bc2e] (running)
                      4     tre_tnfa_run_parallel + 1592 (libsystem_c.dylib + 476220) [0x7fff2037b43c] (running)
                      4     tre_tnfa_run_parallel + 1556 (libsystem_c.dylib + 476184) [0x7fff2037b418] (running)
                      4     tre_tnfa_run_parallel + 1461 (libsystem_c.dylib + 476089) [0x7fff2037b3b9] (running)
                      4     tre_tnfa_run_parallel + 264 (libsystem_c.dylib + 474892) [0x7fff2037af0c]
                        1     _platform_bzero$VARIANT$Haswell + 89 (libsystem_platform.dylib + 5369) [0x7fff204754f9] (running)
                        1     _platform_bzero$VARIANT$Haswell + 84 (libsystem_platform.dylib + 5364) [0x7fff204754f4] (running)
                        1     _platform_bzero$VARIANT$Haswell + 61 (libsystem_platform.dylib + 5341) [0x7fff204754dd] (running)
                        1     _platform_bzero$VARIANT$Haswell + 53 (libsystem_platform.dylib + 5333) [0x7fff204754d5] (running)
                      3     tre_tnfa_run_parallel + 8502 (libsystem_c.dylib + 483130) [0x7fff2037cf3a] (running)
                      3     tre_tnfa_run_parallel + 7841 (libsystem_c.dylib + 482469) [0x7fff2037cca5] (running)
                      3     tre_tnfa_run_parallel + 7813 (libsystem_c.dylib + 482441) [0x7fff2037cc89] (running)
                      3     tre_tnfa_run_parallel + 7802 (libsystem_c.dylib + 482430) [0x7fff2037cc7e] (running)
                      3     tre_tnfa_run_parallel + 3947 (libsystem_c.dylib + 478575) [0x7fff2037bd6f] (running)
                      3     tre_tnfa_run_parallel + 1547 (libsystem_c.dylib + 476175) [0x7fff2037b40f] (running)
                      3     tre_tnfa_run_parallel + 1524 (libsystem_c.dylib + 476152) [0x7fff2037b3f8] (running)
                      3     tre_tnfa_run_parallel + 1456 (libsystem_c.dylib + 476084) [0x7fff2037b3b4] (running)
                      3     tre_tnfa_run_parallel + 854 (libsystem_c.dylib + 475482) [0x7fff2037b15a]
                        1     _platform_strchr$VARIANT$Haswell + 102 (libsystem_platform.dylib + 6758) [0x7fff20475a66] (running)
                        1     _platform_strchr$VARIANT$Haswell + 80 (libsystem_platform.dylib + 6736) [0x7fff20475a50] (running)
                        1     _platform_strchr$VARIANT$Haswell + 28 (libsystem_platform.dylib + 6684) [0x7fff20475a1c] (running)
                      2     DYLD-STUB$$_platform_memmove + 0 (libsystem_platform.dylib + 30438) [0x7fff2047b6e6] (running)
                      2     tre_tnfa_run_parallel + 8579 (libsystem_c.dylib + 483207) [0x7fff2037cf87] (running)
                      2     tre_tnfa_run_parallel + 8531 (libsystem_c.dylib + 483159) [0x7fff2037cf57] (running)
                      2     tre_tnfa_run_parallel + 8506 (libsystem_c.dylib + 483134) [0x7fff2037cf3e] (running)
                      2     tre_tnfa_run_parallel + 8350 (libsystem_c.dylib + 482978) [0x7fff2037cea2] (running)
                      2     tre_tnfa_run_parallel + 7986 (libsystem_c.dylib + 482614) [0x7fff2037cd36] (running)
                      2     tre_tnfa_run_parallel + 7972 (libsystem_c.dylib + 482600) [0x7fff2037cd28] (running)
                      2     tre_tnfa_run_parallel + 7848 (libsystem_c.dylib + 482476) [0x7fff2037ccac] (running)
                      2     tre_tnfa_run_parallel + 7834 (libsystem_c.dylib + 482462) [0x7fff2037cc9e] (running)
                      2     tre_tnfa_run_parallel + 3973 (libsystem_c.dylib + 478601) [0x7fff2037bd89] (running)
                      2     tre_tnfa_run_parallel + 3941 (libsystem_c.dylib + 478569) [0x7fff2037bd69] (running)
                      2     tre_tnfa_run_parallel + 3935 (libsystem_c.dylib + 478563) [0x7fff2037bd63] (running)
                      2     tre_tnfa_run_parallel + 3865 (libsystem_c.dylib + 478493) [0x7fff2037bd1d] (running)
                      2     tre_tnfa_run_parallel + 3700 (libsystem_c.dylib + 478328) [0x7fff2037bc78] (running)
                      2     tre_tnfa_run_parallel + 3693 (libsystem_c.dylib + 478321) [0x7fff2037bc71] (running)
                      2     tre_tnfa_run_parallel + 3667 (libsystem_c.dylib + 478295) [0x7fff2037bc57] (running)
                      2     tre_tnfa_run_parallel + 3569 (libsystem_c.dylib + 478197) [0x7fff2037bbf5] (running)
                      2     tre_tnfa_run_parallel + 3551 (libsystem_c.dylib + 478179) [0x7fff2037bbe3] (running)
                      2     tre_tnfa_run_parallel + 3141 (libsystem_c.dylib + 477769) [0x7fff2037ba49] (running)
                      2     tre_tnfa_run_parallel + 3123 (libsystem_c.dylib + 477751) [0x7fff2037ba37] (running)
                      2     tre_tnfa_run_parallel + 1595 (libsystem_c.dylib + 476223) [0x7fff2037b43f] (running)
                      2     tre_tnfa_run_parallel + 1506 (libsystem_c.dylib + 476134) [0x7fff2037b3e6] (running)
                      2     tre_tnfa_run_parallel + 1494 (libsystem_c.dylib + 476122) [0x7fff2037b3da] (running)
                      2     tre_tnfa_run_parallel + 1452 (libsystem_c.dylib + 476080) [0x7fff2037b3b0] (running)
                      2     tre_tnfa_run_parallel + 1416 (libsystem_c.dylib + 476044) [0x7fff2037b38c] (running)
                      2     tre_tnfa_run_parallel + 527 (libsystem_c.dylib + 475155) [0x7fff2037b013] (running)
                      1     _platform_memmove$VARIANT$Haswell + 0 (libsystem_platform.dylib + 4096) [0x7fff20475000] (running)
                      1     tre_tnfa_run_parallel + 8558 (libsystem_c.dylib + 483186) [0x7fff2037cf72] (running)
                      1     tre_tnfa_run_parallel + 8541 (libsystem_c.dylib + 483169) [0x7fff2037cf61] (running)
                      1     tre_tnfa_run_parallel + 8517 (libsystem_c.dylib + 483145) [0x7fff2037cf49] (running)
                      1     tre_tnfa_run_parallel + 8346 (libsystem_c.dylib + 482974) [0x7fff2037ce9e] (running)
                      1     tre_tnfa_run_parallel + 8013 (libsystem_c.dylib + 482641) [0x7fff2037cd51] (running)
                      1     tre_tnfa_run_parallel + 8005 (libsystem_c.dylib + 482633) [0x7fff2037cd49] (running)
                      1     tre_tnfa_run_parallel + 8001 (libsystem_c.dylib + 482629) [0x7fff2037cd45] (running)
                      1     tre_tnfa_run_parallel + 7827 (libsystem_c.dylib + 482455) [0x7fff2037cc97] (running)
                      1     tre_tnfa_run_parallel + 7794 (libsystem_c.dylib + 482422) [0x7fff2037cc76] (running)
                      1     tre_tnfa_run_parallel + 7662 (libsystem_c.dylib + 482290) [0x7fff2037cbf2] (running)
                      1     tre_tnfa_run_parallel + 7658 (libsystem_c.dylib + 482286) [0x7fff2037cbee] (running)
                      1     tre_tnfa_run_parallel + 7651 (libsystem_c.dylib + 482279) [0x7fff2037cbe7] (running)
                      1     tre_tnfa_run_parallel + 6159 (libsystem_c.dylib + 480787) [0x7fff2037c613] (running)
                      1     tre_tnfa_run_parallel + 6091 (libsystem_c.dylib + 480719) [0x7fff2037c5cf] (running)
                      1     tre_tnfa_run_parallel + 4105 (libsystem_c.dylib + 478733) [0x7fff2037be0d] (running)
                      1     tre_tnfa_run_parallel + 3992 (libsystem_c.dylib + 478620) [0x7fff2037bd9c] (running)
                      1     tre_tnfa_run_parallel + 3986 (libsystem_c.dylib + 478614) [0x7fff2037bd96] (running)
                      1     tre_tnfa_run_parallel + 3978 (libsystem_c.dylib + 478606) [0x7fff2037bd8e] (running)
                      1     tre_tnfa_run_parallel + 3962 (libsystem_c.dylib + 478590) [0x7fff2037bd7e]
                       *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                      1     tre_tnfa_run_parallel + 3914 (libsystem_c.dylib + 478542) [0x7fff2037bd4e] (running)
                      1     tre_tnfa_run_parallel + 3882 (libsystem_c.dylib + 478510) [0x7fff2037bd2e] (running)
                      1     tre_tnfa_run_parallel + 3879 (libsystem_c.dylib + 478507) [0x7fff2037bd2b] (running)
                      1     tre_tnfa_run_parallel + 3853 (libsystem_c.dylib + 478481) [0x7fff2037bd11] (running)
                      1     tre_tnfa_run_parallel + 3844 (libsystem_c.dylib + 478472) [0x7fff2037bd08] (running)
                      1     tre_tnfa_run_parallel + 3828 (libsystem_c.dylib + 478456) [0x7fff2037bcf8] (running)
                      1     tre_tnfa_run_parallel + 3687 (libsystem_c.dylib + 478315) [0x7fff2037bc6b] (running)
                      1     tre_tnfa_run_parallel + 3670 (libsystem_c.dylib + 478298) [0x7fff2037bc5a] (running)
                      1     tre_tnfa_run_parallel + 3604 (libsystem_c.dylib + 478232) [0x7fff2037bc18] (running)
                      1     tre_tnfa_run_parallel + 3597 (libsystem_c.dylib + 478225) [0x7fff2037bc11] (running)
                      1     tre_tnfa_run_parallel + 3562 (libsystem_c.dylib + 478190) [0x7fff2037bbee] (running)
                      1     tre_tnfa_run_parallel + 3258 (libsystem_c.dylib + 477886) [0x7fff2037babe] (running)
                      1     tre_tnfa_run_parallel + 3153 (libsystem_c.dylib + 477781) [0x7fff2037ba55] (running)
                      1     tre_tnfa_run_parallel + 3144 (libsystem_c.dylib + 477772) [0x7fff2037ba4c] (running)
                      1     tre_tnfa_run_parallel + 3127 (libsystem_c.dylib + 477755) [0x7fff2037ba3b] (running)
                      1     tre_tnfa_run_parallel + 1604 (libsystem_c.dylib + 476232) [0x7fff2037b448] (running)
                      1     tre_tnfa_run_parallel + 1590 (libsystem_c.dylib + 476218) [0x7fff2037b43a]
                       *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                      1     tre_tnfa_run_parallel + 1577 (libsystem_c.dylib + 476205) [0x7fff2037b42d] (running)
                      1     tre_tnfa_run_parallel + 1560 (libsystem_c.dylib + 476188) [0x7fff2037b41c] (running)
                      1     tre_tnfa_run_parallel + 1544 (libsystem_c.dylib + 476172) [0x7fff2037b40c] (running)
                      1     tre_tnfa_run_parallel + 1512 (libsystem_c.dylib + 476140) [0x7fff2037b3ec] (running)
                      1     tre_tnfa_run_parallel + 1498 (libsystem_c.dylib + 476126) [0x7fff2037b3de] (running)
                      1     tre_tnfa_run_parallel + 1487 (libsystem_c.dylib + 476115) [0x7fff2037b3d3] (running)
                      1     tre_tnfa_run_parallel + 1477 (libsystem_c.dylib + 476105) [0x7fff2037b3c9]
                       *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                         *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                      1     tre_tnfa_run_parallel + 1467 (libsystem_c.dylib + 476095) [0x7fff2037b3bf] (running)
                      1     tre_tnfa_run_parallel + 1402 (libsystem_c.dylib + 476030) [0x7fff2037b37e] (running)
                      1     tre_tnfa_run_parallel + 543 (libsystem_c.dylib + 475171) [0x7fff2037b023] (running)
                      1     tre_tnfa_run_parallel + 535 (libsystem_c.dylib + 475163) [0x7fff2037b01b] (running)
                      1     tre_tnfa_run_parallel + 519 (libsystem_c.dylib + 475147) [0x7fff2037b00b] (running)
                      1     tre_tnfa_run_parallel + 449 (libsystem_c.dylib + 475077) [0x7fff2037afc5] (running)
                      1     tre_tnfa_run_parallel + 411 (libsystem_c.dylib + 475039) [0x7fff2037af9f] (running)
                      1     free + 0 (libsystem_malloc.dylib + 8357) [0x7fff2025a0a5] (running)
                  2     regnexec + 30 (libsystem_c.dylib + 446682) [0x7fff203740da] (running)
                  2     regnexec + 14 (libsystem_c.dylib + 446666) [0x7fff203740ca] (running)
                  1     regnexec + 37 (libsystem_c.dylib + 446689) [0x7fff203740e1] (running)
                  1     regnexec + 14 (libsystem_c.dylib + 446666) [0x7fff203740ca]
                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                1     Security::CodeSigning::ResourceBuilder::Rule::match(char const*) const + 6 (Security + 1882220) [0x7fff2248486c] (running)
              63    Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 121 (Security + 1881593) [0x7fff224845f9]
                48    secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                  37    secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                    36    CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                      15    CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                        8     CFEqual + 487 (CoreFoundation + 40799) [0x7fff204b3f5f]
                          3     -[NSTaggedPointerString isEqual:] + 36 (CoreFoundation + 94166) [0x7fff204c0fd6]
                            2     _NSIsNSString + 48 (CoreFoundation + 94247) [0x7fff204c1027]
                              1     object_getMethodImplementation + 75 (libobjc.A.dylib + 50797) [0x7fff202d666d] (running)
                              1     cache_getImp + 23 (libobjc.A.dylib + 26503) [0x7fff202d0787] (running)
                            1     _NSIsNSString + 63 (CoreFoundation + 94262) [0x7fff204c1036] (running)
                          1     _CFStringGetLength2 + 16 (CoreFoundation + 1168824) [0x7fff205c75b8] (running)
                          1     isEqualToString + 283 (CoreFoundation + 94618) [0x7fff204c119a] (running)
                          1     isEqualToString + 57 (CoreFoundation + 94392) [0x7fff204c10b8] (running)
                          1     objc_msgSend + 41 (libobjc.A.dylib + 26665) [0x7fff202d0829] (running)
                          1     objc_msgSend + 26 (libobjc.A.dylib + 26650) [0x7fff202d081a] (running)
                        1     -[NSTaggedPointerString isEqual:] + 0 (CoreFoundation + 94130) [0x7fff204c0fb2] (running)
                        1     CFEqual + 302 (CoreFoundation + 40614) [0x7fff204b3ea6] (running)
                        1     CFEqual + 289 (CoreFoundation + 40601) [0x7fff204b3e99] (running)
                        1     CFEqual + 53 (CoreFoundation + 40365) [0x7fff204b3dad] (running)
                        1     CFEqual + 7 (CoreFoundation + 40319) [0x7fff204b3d7f] (running)
                        1     CFEqual + 4 (CoreFoundation + 40316) [0x7fff204b3d7c] (running)
                        1     objc_msgSend + 0 (libobjc.A.dylib + 26624) [0x7fff202d0800] (running)
                      2     CFBasicHashFindBucket + 411 (CoreFoundation + 32551) [0x7fff204b1f27] (running)
                      2     CFBasicHashFindBucket + 363 (CoreFoundation + 32503) [0x7fff204b1ef7] (running)
                      2     CFBasicHashFindBucket + 205 (CoreFoundation + 32345) [0x7fff204b1e59] (running)
                      1     CFEqual + 494 (CoreFoundation + 40806) [0x7fff204b3f66] (running)
                      1     CFBasicHashFindBucket + 2860 (CoreFoundation + 35000) [0x7fff204b28b8] (running)
                      1     CFBasicHashFindBucket + 462 (CoreFoundation + 32602) [0x7fff204b1f5a] (running)
                      1     CFBasicHashFindBucket + 454 (CoreFoundation + 32594) [0x7fff204b1f52]
                       *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                      1     CFBasicHashFindBucket + 447 (CoreFoundation + 32587) [0x7fff204b1f4b] (running)
                      1     CFBasicHashFindBucket + 416 (CoreFoundation + 32556) [0x7fff204b1f2c] (running)
                      1     CFBasicHashFindBucket + 407 (CoreFoundation + 32547) [0x7fff204b1f23] (running)
                      1     CFBasicHashFindBucket + 391 (CoreFoundation + 32531) [0x7fff204b1f13] (running)
                      1     CFBasicHashFindBucket + 387 (CoreFoundation + 32527) [0x7fff204b1f0f]
                       *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                         *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                      1     CFBasicHashFindBucket + 314 (CoreFoundation + 32454) [0x7fff204b1ec6] (running)
                      1     CFBasicHashFindBucket + 304 (CoreFoundation + 32444) [0x7fff204b1ebc] (running)
                      1     CFBasicHashFindBucket + 182 (CoreFoundation + 32322) [0x7fff204b1e42]
                        1     CFStringHashISOLatin1CString + 55 (CoreFoundation + 139232) [0x7fff204cbfe0] (running)
                      1     CFBasicHashFindBucket + 42 (CoreFoundation + 32182) [0x7fff204b1db6] (running)
                      1     objc_msgSend + 46 (libobjc.A.dylib + 26670) [0x7fff202d082e] (running)
                      1     objc_msgSend + 33 (libobjc.A.dylib + 26657) [0x7fff202d0821] (running)
                    1     CFBasicHashFindBucket + 532 (CoreFoundation + 32672) [0x7fff204b1fa0]
                     *1     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                       *1     user_trap + 201 (kernel + 1790985) [0xffffff80003c5409] (running)
                  4     secLogObjForCFScope + 42 (Security + 2860691) [0x7fff22573693]
                    3     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e]
                     *2     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                       *2     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                         *2     ulock_wait + 68 (kernel + 6583012) [0xffffff80008572e4]
                           *1     ulock_wait2 + 1256 (kernel + 6584280) [0xffffff80008577d8] (running)
                           *1     ulock_wait2 + 1070 (kernel + 6584094) [0xffffff800085771e] (running)
                     *1     call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
                       *1     ??? (kernel + 6586351) [0xffffff8000857fef]
                         *1     unix_syscall_return + 534 (kernel + 7541094) [0xffffff8000941166] (running)
                    1     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e] (running)
                  2     secLogObjForCFScope + 233 (Security + 2860882) [0x7fff22573752]
                    2     __ulock_wake + 10 (libsystem_kernel.dylib + 10974) [0x7fff203feade]
                     *1     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                       *1     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                         *1     ulock_wake + 548 (kernel + 6587508) [0xffffff8000858474]
                           *1     waitq_wakeup64_identify + 291 (kernel + 882307) [0xffffff80002e7683] (running)
                     *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                  2     os_unfair_lock_lock_with_options + 14 (libsystem_platform.dylib + 3758) [0x7fff20474eae] (running)
                  1     secLogObjForCFScope + 42 (Security + 2860691) [0x7fff22573693] (running)
                  1     os_unfair_lock_unlock + 12 (libsystem_platform.dylib + 3777) [0x7fff20474ec1]
                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                  1     os_unfair_lock_unlock + 12 (libsystem_platform.dylib + 3777) [0x7fff20474ec1] (running)
                8     secLogObjForScope + 83 (Security + 2861155) [0x7fff22573863]
                  6     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                    1     _CFGetTSDCreateIfNeeded + 0 (CoreFoundation + 20014) [0x7fff204aee2e] (running)
                    1     __CFStringCreateImmutableFunnel3 + 2430 (CoreFoundation + 14078) [0x7fff204ad6fe] (running)
                    1     __CFStringCreateImmutableFunnel3 + 1253 (CoreFoundation + 12901) [0x7fff204ad265] (running)
                    1     __CFStringCreateImmutableFunnel3 + 1250 (CoreFoundation + 12898) [0x7fff204ad262]
                      1     _platform_memmove$VARIANT$Haswell + 185 (libsystem_platform.dylib + 4281) [0x7fff204750b9] (running)
                    1     __CFStringCreateImmutableFunnel3 + 399 (CoreFoundation + 12047) [0x7fff204acf0f] (running)
                    1     __CFStringCreateImmutableFunnel3 + 94 (CoreFoundation + 11742) [0x7fff204acdde]
                      1     _CFGetTSDCreateIfNeeded + 28 (CoreFoundation + 20042) [0x7fff204aee4a]
                        1     __CFTSDGetTable + 89 (CoreFoundation + 20202) [0x7fff204aeeea] (running)
                  1     DYLD-STUB$$strlen + 0 (CoreFoundation + 1829444) [0x7fff20668a44] (running)
                  1     CFStringCreateWithCString + 27 (CoreFoundation + 11588) [0x7fff204acd44]
                    1     _platform_strlen + 37 (libsystem_platform.dylib + 5477) [0x7fff20475565] (running)
                4     secLogObjForScope + 28 (Security + 2861100) [0x7fff2257382c]
                  3     pthread_mutex_lock + 105 (libsystem_pthread.dylib + 7759) [0x7fff2042de4f] (running)
                  1     _pthread_mutex_firstfit_lock_slow + 168 (libsystem_pthread.dylib + 8658) [0x7fff2042e1d2] (running)
                1     secLogObjForScope + 42 (Security + 2861114) [0x7fff2257383a]
                  1     pthread_mutex_unlock + 90 (libsystem_pthread.dylib + 8840) [0x7fff2042e288] (running)
                1     CFRelease + 77 (CoreFoundation + 45640) [0x7fff204b5248] (running)
                1     pthread_mutex_lock + 0 (libsystem_pthread.dylib + 7654) [0x7fff2042dde6] (running)
              4     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 182 (Security + 1881654) [0x7fff22484636]
                2     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                  2     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                    2     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                      1     CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                        1     CFEqual + 487 (CoreFoundation + 40799) [0x7fff204b3f5f]
                          1     -[NSTaggedPointerString isEqual:] + 36 (CoreFoundation + 94166) [0x7fff204c0fd6]
                            1     _NSIsNSString + 48 (CoreFoundation + 94247) [0x7fff204c1027]
                              1     cache_getImp + 27 (libobjc.A.dylib + 26507) [0x7fff202d078b] (running)
                      1     CFBasicHashFindBucket + 416 (CoreFoundation + 32556) [0x7fff204b1f2c] (running)
                2     secLogObjForScope + 83 (Security + 2861155) [0x7fff22573863]
                  1     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                    1     __CFStringCreateImmutableFunnel3 + 1181 (CoreFoundation + 12829) [0x7fff204ad21d] (running)
                  1     CFStringCreateWithCString + 22 (CoreFoundation + 11583) [0x7fff204acd3f] (running)
              3     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 137 (Security + 1881609) [0x7fff22484609]
                1     voucher_get_activity_id + 37 (libdispatch.dylib + 150142) [0x7fff202a9a7e] (running)
                1     voucher_get_activity_id + 15 (libdispatch.dylib + 150120) [0x7fff202a9a68] (running)
                1     os_log_type_enabled + 220 (libsystem_trace.dylib + 19711) [0x7fff201a6cff] (running)
              2     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 391 (Security + 1881863) [0x7fff22484707]
                2     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                  2     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                    2     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                      2     CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                        1     CFEqual + 487 (CoreFoundation + 40799) [0x7fff204b3f5f]
                          1     isEqualToString + 31 (CoreFoundation + 94366) [0x7fff204c109e] (running)
                        1     CFEqual + 4 (CoreFoundation + 40316) [0x7fff204b3d7c] (running)
              2     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 50 (Security + 1881522) [0x7fff224845b2]
                2     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                  1     secLogObjForCFScope + 241 (Security + 2860890) [0x7fff2257375a] (running)
                  1     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                    1     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                      1     CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                        1     CFEqual + 108 (CoreFoundation + 40420) [0x7fff204b3de4] (running)
              1     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 495 (Security + 1881967) [0x7fff2248476f] (running)
              1     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 238 (Security + 1881710) [0x7fff2248466e] (running)
              1     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 109 (Security + 1881581) [0x7fff224845ed] (running)
              1     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 31 (Security + 1881503) [0x7fff2248459f] (running)
            131   Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1926 (Security + 1880244) [0x7fff224840b4]
              77    invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 249 (Security + 1703106) [0x7fff22458cc2]
                43    Security::CodeSigning::LimitedAsync::perform(Security::Dispatch::Group&, void () block_pointer) + 218 (Security + 1772208) [0x7fff22469ab0]
                  43    invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 612 (Security + 1704213) [0x7fff22459115]
                    41    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4319 (Security + 1708977) [0x7fff2245a3b1]
                      40    Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 626 (Security + 1762824) [0x7fff22467608]
                        31    Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 190 (Security + 1762015) [0x7fff224672df]
                          31    invocation function for block in Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 49 (Security + 1763116) [0x7fff2246772c]
                            31    CCDigestUpdate + 47 (libcommonCrypto.dylib + 9362) [0x7fff2a59d492]
                              31    ccdigest_update + 292 (libcorecrypto.dylib + 14469) [0x7fff201bd885]
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 5283 (libcorecrypto.dylib + 29101) [0x7fff201c11ad] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 3950 (libcorecrypto.dylib + 27768) [0x7fff201c0c78] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 3790 (libcorecrypto.dylib + 27608) [0x7fff201c0bd8] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 3566 (libcorecrypto.dylib + 27384) [0x7fff201c0af8] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 3191 (libcorecrypto.dylib + 27009) [0x7fff201c0981] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 3182 (libcorecrypto.dylib + 27000) [0x7fff201c0978] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 2711 (libcorecrypto.dylib + 26529) [0x7fff201c07a1] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 2147 (libcorecrypto.dylib + 25965) [0x7fff201c056d] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 2000 (libcorecrypto.dylib + 25818) [0x7fff201c04da] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1945 (libcorecrypto.dylib + 25763) [0x7fff201c04a3] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1919 (libcorecrypto.dylib + 25737) [0x7fff201c0489] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1716 (libcorecrypto.dylib + 25534) [0x7fff201c03be] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1622 (libcorecrypto.dylib + 25440) [0x7fff201c0360] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1487 (libcorecrypto.dylib + 25305) [0x7fff201c02d9] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1444 (libcorecrypto.dylib + 25262) [0x7fff201c02ae] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1437 (libcorecrypto.dylib + 25255) [0x7fff201c02a7] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1413 (libcorecrypto.dylib + 25231) [0x7fff201c028f] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1229 (libcorecrypto.dylib + 25047) [0x7fff201c01d7] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1212 (libcorecrypto.dylib + 25030) [0x7fff201c01c6] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1209 (libcorecrypto.dylib + 25027) [0x7fff201c01c3] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1200 (libcorecrypto.dylib + 25018) [0x7fff201c01ba] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1192 (libcorecrypto.dylib + 25010) [0x7fff201c01b2] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1139 (libcorecrypto.dylib + 24957) [0x7fff201c017d] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 1021 (libcorecrypto.dylib + 24839) [0x7fff201c0107] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 972 (libcorecrypto.dylib + 24790) [0x7fff201c00d6] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 944 (libcorecrypto.dylib + 24762) [0x7fff201c00ba] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 867 (libcorecrypto.dylib + 24685) [0x7fff201c006d] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 781 (libcorecrypto.dylib + 24599) [0x7fff201c0017] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 612 (libcorecrypto.dylib + 24430) [0x7fff201bff6e] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 384 (libcorecrypto.dylib + 24202) [0x7fff201bfe8a] (running)
                                1     AccelerateCrypto_SHA256_compress_AVX2 + 256 (libcorecrypto.dylib + 24074) [0x7fff201bfe0a] (running)
                        9     Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 160 (Security + 1761985) [0x7fff224672c1]
                          9     read + 10 (libsystem_kernel.dylib + 7486) [0x7fff203fdd3e]
                           *8     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                             *8     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                               *8     read_nocancel + 181 (kernel + 6549973) [0xffffff800084f1d5]
                                 *8     ??? (kernel + 6550600) [0xffffff800084f448]
                                   *8     ??? (kernel + 3363756) [0xffffff80005453ac]
                                     *4     apfs_vnop_read + 1064 (apfs + 332450) [0xffffff80033eb2a2]
                                       *4     cluster_read_ext + 394 (kernel + 3120074) [0xffffff8000509bca]
                                         *2     ??? (kernel + 3121913) [0xffffff800050a2f9]
                                           *2     ??? (kernel + 3117848) [0xffffff8000509318]
                                             *2     memory_object_control_uiomove + 594 (kernel + 1050914) [0xffffff8000310922]
                                               *2     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                 *2     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                         *1     ??? (kernel + 3124530) [0xffffff800050ad32]
                                           *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                             *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                               *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                 *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                   *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                         *1     ??? (kernel + 3121599) [0xffffff800050a1bf]
                                           *1     ??? (kernel + 3134229) [0xffffff800050d315]
                                             *1     advisory_read_ext + 800 (kernel + 3133536) [0xffffff800050d060]
                                               *1     ??? (kernel + 3099816) [0xffffff8000504ca8]
                                                 *1     apfs_vnop_strategy + 840 (apfs + 263520) [0xffffff80033da560]
                                                   *1     buf_strategy + 378 (kernel + 3061162) [0xffffff80004fb5aa]
                                                     *1     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                       *1     dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                         *1     IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 502 (IOStorageFamily + 28458) [0xffffff8002e68f2a]
                                                           *1     IOBlockStorageDriver::breakUpRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 131 (IOStorageFamily + 27333) [0xffffff8002e68ac5]
                                                             *1     IOBreaker::getBreakSize(unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, IOMemoryDescriptor*, unsigned long long) + 355 (IOStorageFamily + 26095) [0xffffff8002e685ef] (running)
                                     *4     apfs_vnop_read + 729 (apfs + 332115) [0xffffff80033eb153]
                                       *2     decmpfs_read_compressed + 297 (kernel + 3521033) [0xffffff800056ba09]
                                         *2     ??? (kernel + 3117848) [0xffffff8000509318]
                                           *2     memory_object_control_uiomove + 292 (kernel + 1050612) [0xffffff80003107f4]
                                             *2     lck_rw_sleep + 115 (kernel + 597667) [0xffffff80002a1ea3]
                                               *2     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                 *2     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                   *2     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                       *1     decmpfs_read_compressed + 2779 (kernel + 3523515) [0xffffff800056c3bb]
                                         *1     vm_map_remove_upl + 597 (kernel + 1360325) [0xffffff800035c1c5]
                                           *1     vm_map_remove + 115 (kernel + 1190547) [0xffffff8000332a93]
                                             *1     ??? (kernel + 1193080) [0xffffff8000333478]
                                               *1     ??? (kernel + 1747609) [0xffffff80003baa99]
                                                 *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                   *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                     *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                       *1     decmpfs_read_compressed + 1655 (kernel + 3522391) [0xffffff800056bf57]
                                         *1     compression_decode_buffer + 2210 (AppleFSCompressionTypeZlib + 28385) [0xffffff800172cee1]
                                           *1     compression_decode_buffer + 3944 (AppleFSCompressionTypeZlib + 30119) [0xffffff800172d5a7]
                                             *1     compression_decode_buffer + 3082 (AppleFSCompressionTypeZlib + 29257) [0xffffff800172d249]
                                               *1     VNOP_GETXATTR + 90 (kernel + 3439114) [0xffffff8000557a0a]
                                                 *1     apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                                   *1     apfs_inode_getxattr + 457 (apfs + 295048) [0xffffff80033e2088]
                                                     *1     apfs_nstream_read + 446 (apfs + 291055) [0xffffff80033e10ef]
                                                       *1     cluster_read_ext + 394 (kernel + 3120074) [0xffffff8000509bca]
                                                         *1     ??? (kernel + 3124530) [0xffffff800050ad32]
                                                           *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                             *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                               *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                 *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                   *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                           *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                      1     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 653 (Security + 1762851) [0x7fff22467623]
                        1     Security::makeCFMutableDictionary() + 27 (Security + 2796254) [0x7fff22563ade]
                          1     CFDictionaryCreateMutable + 31 (CoreFoundation + 20249) [0x7fff204aef19]
                            1     __NSDictionaryM_new + 112 (CoreFoundation + 22592) [0x7fff204af840]
                              1     __CFAllocateObject + 15 (CoreFoundation + 17077) [0x7fff204ae2b5]
                                1     class_createInstance + 65 (libobjc.A.dylib + 26106) [0x7fff202d05fa]
                                  1     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                    1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                      1     tiny_malloc_should_clear + 1004 (libsystem_malloc.dylib + 15280) [0x7fff2025bbb0]
                                        1     _platform_bzero$VARIANT$Haswell + 119 (libsystem_platform.dylib + 5399) [0x7fff20475517] (running)
                    2     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4121 (Security + 1708779) [0x7fff2245a2eb]
                      2     Security::UnixPlusPlus::FileDesc::open(char const*, int, unsigned short) + 64 (Security + 2806352) [0x7fff22566250]
                        2     __open + 10 (libsystem_kernel.dylib + 7106) [0x7fff203fdbc2]
                         *2     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                           *2     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                             *2     open_nocancel + 313 (kernel + 3267561) [0xffffff800052dbe9]
                               *2     ??? (kernel + 3264568) [0xffffff800052d038]
                                 *1     vn_open_auth + 2648 (kernel + 3371864) [0xffffff8000547358]
                                   *1     vn_authorize_open_existing + 191 (kernel + 3216671) [0xffffff800052151f]
                                     *1     mac_vnode_check_open + 154 (kernel + 8874122) [0xffffff8000a8688a]
                                       *1     hook_vnode_check_open + 184 (Sandbox + 51217) [0xffffff8003348811]
                                         *1     sb_evaluate_internal + 201 (Sandbox + 74643) [0xffffff800334e393]
                                           *1     eval + 4873 (Sandbox + 85506) [0xffffff8003350e02]
                                             *1     derive_vnode_storage_class + 938 (Sandbox + 97949) [0xffffff8003353e9d]
                                               *1     eval + 1294 (Sandbox + 81927) [0xffffff8003350007]
                                                 *1     derive_vnode_path + 369 (Sandbox + 73431) [0xffffff800334ded7] (running)
                                 *1     vn_open_auth + 2128 (kernel + 3371344) [0xffffff8000547150]
                                   *1     apfs_vnop_open + 219 (apfs + 244021) [0xffffff80033d5935]
                                     *1     decmpfs_validate_compressed_file + 194 (kernel + 3511986) [0xffffff80005696b2]
                                       *1     compression_decode_buffer + 1477 (AppleFSCompressionTypeZlib + 27652) [0xffffff800172cc04]
                                         *1     compression_decode_buffer + 3082 (AppleFSCompressionTypeZlib + 29257) [0xffffff800172d249]
                                           *1     VNOP_GETXATTR + 90 (kernel + 3439114) [0xffffff8000557a0a]
                                             *1     apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                               *1     apfs_inode_getxattr + 341 (apfs + 294932) [0xffffff80033e2014]
                                                 *1     apfs_get_namedstream_vnode + 1297 (apfs + 297614) [0xffffff80033e2a8e]
                                                   *1     ??? (kernel + 3187749) [0xffffff800051a425]
                                                     *1     ??? (kernel + 6636113) [0xffffff8000864251]
                                                       *1     memory_object_create_named + 45 (kernel + 1302477) [0xffffff800034dfcd]
                                                         *1     vm_object_memory_object_associate + 163 (kernel + 1300547) [0xffffff800034d843]
                                                           *1     memory_object_change_attributes + 1 (kernel + 1107233) [0xffffff800031e521] (running)
                34    Security::CodeSigning::LimitedAsync::perform(Security::Dispatch::Group&, void () block_pointer) + 208 (Security + 1772198) [0x7fff22469aa6]
                  34    Security::Dispatch::Group::enqueue(dispatch_queue_s*, void () block_pointer) + 82 (Security + 2802944) [0x7fff22565500]
                    24    _dispatch_root_queue_poke_slow + 169 (libdispatch.dylib + 59087) [0x7fff202936cf]
                      23    __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
                       *21    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                         *19    unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                           *18    workq_kernreturn + 1578 (kernel + 6046506) [0xffffff80007d432a]
                             *6     ??? (kernel + 6023691) [0xffffff80007cea0b]
                               *6     waitq_wakeup64_thread + 142 (kernel + 881806) [0xffffff80002e748e] (running)
                             *6     ??? (kernel + 6023516) [0xffffff80007ce95c]
                               *3     thread_set_workq_pri + 242 (kernel + 824098) [0xffffff80002d9322]
                                 *3     ??? (kernel + 824462) [0xffffff80002d948e] (running)
                               *2     thread_set_workq_pri + 66 (kernel + 823922) [0xffffff80002d9272] (running)
                               *1     thread_set_workq_pri + 196 (kernel + 824052) [0xffffff80002d92f4] (running)
                             *4     ??? (kernel + 6023569) [0xffffff80007ce991]
                               *2     turnstile_update_inheritor + 262 (kernel + 854534) [0xffffff80002e0a06] (running)
                               *2     turnstile_update_inheritor + 126 (kernel + 854398) [0xffffff80002e097e] (running)
                             *1     ??? (kernel + 6022873) [0xffffff80007ce6d9]
                               *1     _rtc_nanotime_read + 16 (kernel + 139456) [0xffffff80002320c0] (running)
                             *1     ??? (kernel + 6022684) [0xffffff80007ce61c] (running)
                           *1     workq_kernreturn + 966 (kernel + 6045894) [0xffffff80007d40c6]
                             *1     ??? (kernel + 900899) [0xffffff80002ebf23] (running)
                         *1     unix_syscall64 + 108 (kernel + 7539532) [0xffffff8000940b4c]
                           *1     ??? (kernel + 912400) [0xffffff80002eec10] (running)
                         *1     memcpy + 9 (kernel + 4185) [0xffffff8000101059] (running)
                       *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                       *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                         *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                      1     __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce] (running)
                    8     dispatch_group_async + 59 (libdispatch.dylib + 18517) [0x7fff20289855]
                      8     _dispatch_Block_copy + 22 (libdispatch.dylib + 9695) [0x7fff202875df]
                        5     _Block_copy + 196 (libsystem_blocks.dylib + 5152) [0x7fff2016b420]
                          5     _Block_object_assign + 90 (libsystem_blocks.dylib + 5254) [0x7fff2016b486]
                            4     _Block_copy + 196 (libsystem_blocks.dylib + 5152) [0x7fff2016b420]
                              4     __copy_helper_block_e8_32b40rc + 37 (Security + 1772519) [0x7fff22469be7]
                                4     _Block_object_assign + 90 (libsystem_blocks.dylib + 5254) [0x7fff2016b486]
                                  2     _Block_copy + 196 (libsystem_blocks.dylib + 5152) [0x7fff2016b420]
                                    2     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init_copy_ctor_external(char const*, unsigned long) + 59 (libc++.1.dylib + 241823) [0x7fff203cb09f]
                                      2     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                                        2     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                          2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                            1     tiny_malloc_should_clear + 971 (libsystem_malloc.dylib + 15247) [0x7fff2025bb8f] (running)
                                            1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                              1     tiny_malloc_from_free_list + 1632 (libsystem_malloc.dylib + 17551) [0x7fff2025c48f]
                                                1     tiny_free_list_add_ptr + 312 (libsystem_malloc.dylib + 28130) [0x7fff2025ede2] (running)
                                  1     __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE + 1 (Security + 1704618) [0x7fff224592aa] (running)
                                  1     _Block_copy + 95 (libsystem_blocks.dylib + 5051) [0x7fff2016b3bb]
                                    1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                      1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                        1     tiny_malloc_should_clear + 971 (libsystem_malloc.dylib + 15247) [0x7fff2025bb8f] (running)
                            1     _Block_copy + 95 (libsystem_blocks.dylib + 5051) [0x7fff2016b3bb]
                              1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                  1     tiny_malloc_should_clear + 91 (libsystem_malloc.dylib + 14367) [0x7fff2025b81f] (running)
                        1     _Block_copy + 125 (libsystem_blocks.dylib + 5081) [0x7fff2016b3d9] (running)
                        1     _Block_copy + 95 (libsystem_blocks.dylib + 5051) [0x7fff2016b3bb]
                          1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                            1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                              1     tiny_malloc_should_clear + 106 (libsystem_malloc.dylib + 14382) [0x7fff2025b82e] (running)
                        1     _Block_copy + 51 (libsystem_blocks.dylib + 5007) [0x7fff2016b38f] (running)
                    1     dispatch_group_async + 244 (libdispatch.dylib + 18702) [0x7fff2028990e]
                      1     _dispatch_alloc_continuation_alloc + 74 (libdispatch.dylib + 194322) [0x7fff202b4712] (running)
                    1     dispatch_group_enter + 27 (libdispatch.dylib + 17495) [0x7fff20289457] (running)
              44    invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 88 (Security + 1702945) [0x7fff22458c21]
                36    mdict_removeObjectForKey + 467 (CoreFoundation + 438532) [0x7fff20515104]
                  15    objc_msgSend + 26 (libobjc.A.dylib + 26650) [0x7fff202d081a] (running)
                  3     __CFStringHash + 149 (CoreFoundation + 38978) [0x7fff204b3842] (running)
                  2     mdict_rehashd + 206 (CoreFoundation + 138478) [0x7fff204cbcee] (running)
                  2     __CFStringHash + 587 (CoreFoundation + 39416) [0x7fff204b39f8] (running)
                  2     __CFStringHash + 495 (CoreFoundation + 39324) [0x7fff204b399c] (running)
                  2     __CFStringHash + 476 (CoreFoundation + 39305) [0x7fff204b3989] (running)
                  2     __CFStringHash + 453 (CoreFoundation + 39282) [0x7fff204b3972] (running)
                  1     mdict_rehashd + 260 (CoreFoundation + 138532) [0x7fff204cbd24] (running)
                  1     mdict_rehashd + 198 (CoreFoundation + 138470) [0x7fff204cbce6] (running)
                  1     mdict_rehashd + 66 (CoreFoundation + 138338) [0x7fff204cbc62]
                    1     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                      1     szone_malloc_should_clear + 256 (libsystem_malloc.dylib + 10357) [0x7fff2025a875]
                        1     large_malloc + 1287 (libsystem_malloc.dylib + 51539) [0x7fff20264953]
                          1     _platform_bzero$VARIANT$Haswell + 41 (libsystem_platform.dylib + 5321) [0x7fff204754c9] (running)
                  1     __CFStringHash + 611 (CoreFoundation + 39440) [0x7fff204b3a10] (running)
                  1     __CFStringHash + 598 (CoreFoundation + 39427) [0x7fff204b3a03] (running)
                  1     __CFStringHash + 482 (CoreFoundation + 39311) [0x7fff204b398f] (running)
                  1     __CFStringHash + 367 (CoreFoundation + 39196) [0x7fff204b391c]
                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                  1     objc_msgSend + 33 (libobjc.A.dylib + 26657) [0x7fff202d0821]
                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                3     mdict_removeObjectForKey + 172 (CoreFoundation + 438237) [0x7fff20514fdd]
                  2     -[__NSCFString isEqual:] + 66 (CoreFoundation + 37682) [0x7fff204b3332]
                    1     __CFStringEqual + 248 (CoreFoundation + 1173751) [0x7fff205c88f7]
                      1     _platform_memcmp + 7 (libsystem_platform.dylib + 6823) [0x7fff20475aa7] (running)
                    1     _platform_memcmp + 1 (libsystem_platform.dylib + 6817) [0x7fff20475aa1] (running)
                  1     __CFStringEqual + 0 (CoreFoundation + 1173503) [0x7fff205c87ff] (running)
                2     objc_msgSend + 26 (libobjc.A.dylib + 26650) [0x7fff202d081a] (running)
                1     mdict_removeObjectForKey + 334 (CoreFoundation + 438399) [0x7fff2051507f] (running)
                1     mdict_removeObjectForKey + 144 (CoreFoundation + 438209) [0x7fff20514fc1] (running)
                1     CFDictionaryRemoveValue + 187 (CoreFoundation + 383888) [0x7fff20507b90] (running)
              4     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 76 (Security + 1702933) [0x7fff22458c15]
                4     Security::CFTempString::CFTempString<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) + 47 (Security + 1703561) [0x7fff22458e89]
                  4     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                    4     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                      2     _CFRuntimeCreateInstance + 544 (CoreFoundation + 16092) [0x7fff204adedc]
                        1     objc_object::changeIsa(objc_class*) + 13 (libobjc.A.dylib + 87705) [0x7fff202df699] (running)
                        1     object_setClass + 45 (libobjc.A.dylib + 38325) [0x7fff202d35b5] (running)
                      1     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                        1     malloc_default_zone + 0 (libsystem_malloc.dylib + 14016) [0x7fff2025b6c0] (running)
                      1     _CFRuntimeCreateInstance + 6 (CoreFoundation + 15554) [0x7fff204adcc2] (running)
              3     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 188 (Security + 1703045) [0x7fff22458c85]
                2     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init_copy_ctor_external(char const*, unsigned long) + 59 (libc++.1.dylib + 241823) [0x7fff203cb09f]
                  2     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                    2     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                      2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                        1     tiny_malloc_should_clear + 189 (libsystem_malloc.dylib + 14465) [0x7fff2025b881] (running)
                        1     tiny_malloc_should_clear + 62 (libsystem_malloc.dylib + 14338) [0x7fff2025b802] (running)
                1     _platform_memmove$VARIANT$Haswell + 418 (libsystem_platform.dylib + 4514) [0x7fff204751a2] (running)
              1     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 264 (Security + 1703121) [0x7fff22458cd1]
                1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                  1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                    1     tiny_free_list_add_ptr + 33 (libsystem_malloc.dylib + 27851) [0x7fff2025eccb] (running)
              1     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 97 (Security + 1702954) [0x7fff22458c2a]
                1     Security::CFRef<__CFString const*>::~CFRef() + 17 (Security + 1621211) [0x7fff22444cdb]
                  1     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                    1     malloc_default_zone + 0 (libsystem_malloc.dylib + 14016) [0x7fff2025b6c0] (running)
              1     Security::CFRef<__CFString const*>::~CFRef() + 1 (Security + 1621195) [0x7fff22444ccb] (running)
            57    Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 823 (Security + 1879141) [0x7fff22483c65]
              46    Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 166 (Security + 1881638) [0x7fff22484626]
                46    Security::CodeSigning::ResourceBuilder::Rule::match(char const*) const + 16 (Security + 1882230) [0x7fff22484876]
                  46    regnexec + 65 (libsystem_c.dylib + 446717) [0x7fff203740fd]
                    46    tre_match + 269 (libsystem_c.dylib + 446999) [0x7fff20374217]
                      3     tre_tnfa_run_parallel + 7677 (libsystem_c.dylib + 482305) [0x7fff2037cc01]
                        1     _platform_memmove$VARIANT$Haswell + 228 (libsystem_platform.dylib + 4324) [0x7fff204750e4] (running)
                        1     _platform_memmove$VARIANT$Haswell + 71 (libsystem_platform.dylib + 4167) [0x7fff20475047] (running)
                        1     _platform_memmove$VARIANT$Haswell + 7 (libsystem_platform.dylib + 4103) [0x7fff20475007] (running)
                      2     _platform_memmove$VARIANT$Haswell + 0 (libsystem_platform.dylib + 4096) [0x7fff20475000] (running)
                      2     tre_tnfa_run_parallel + 3141 (libsystem_c.dylib + 477769) [0x7fff2037ba49] (running)
                      2     tre_tnfa_run_parallel + 1506 (libsystem_c.dylib + 476134) [0x7fff2037b3e6] (running)
                      2     tre_tnfa_run_parallel + 8827 (libsystem_c.dylib + 483455) [0x7fff2037d07f]
                        1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                          1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                            1     tiny_free_list_add_ptr + 474 (libsystem_malloc.dylib + 28292) [0x7fff2025ee84] (running)
                        1     free + 120 (libsystem_malloc.dylib + 8477) [0x7fff2025a11d]
                          1     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f]
                            1     tiny_size + 78 (libsystem_malloc.dylib + 19000) [0x7fff2025ca38] (running)
                      1     tre_tnfa_run_parallel + 8558 (libsystem_c.dylib + 483186) [0x7fff2037cf72] (running)
                      1     tre_tnfa_run_parallel + 8534 (libsystem_c.dylib + 483162) [0x7fff2037cf5a] (running)
                      1     tre_tnfa_run_parallel + 8531 (libsystem_c.dylib + 483159) [0x7fff2037cf57] (running)
                      1     tre_tnfa_run_parallel + 8517 (libsystem_c.dylib + 483145) [0x7fff2037cf49] (running)
                      1     tre_tnfa_run_parallel + 8506 (libsystem_c.dylib + 483134) [0x7fff2037cf3e] (running)
                      1     tre_tnfa_run_parallel + 8021 (libsystem_c.dylib + 482649) [0x7fff2037cd59] (running)
                      1     tre_tnfa_run_parallel + 8001 (libsystem_c.dylib + 482629) [0x7fff2037cd45] (running)
                      1     tre_tnfa_run_parallel + 7982 (libsystem_c.dylib + 482610) [0x7fff2037cd32] (running)
                      1     tre_tnfa_run_parallel + 7820 (libsystem_c.dylib + 482448) [0x7fff2037cc90] (running)
                      1     tre_tnfa_run_parallel + 7794 (libsystem_c.dylib + 482422) [0x7fff2037cc76] (running)
                      1     tre_tnfa_run_parallel + 7662 (libsystem_c.dylib + 482290) [0x7fff2037cbf2] (running)
                      1     tre_tnfa_run_parallel + 3978 (libsystem_c.dylib + 478606) [0x7fff2037bd8e] (running)
                      1     tre_tnfa_run_parallel + 3947 (libsystem_c.dylib + 478575) [0x7fff2037bd6f] (running)
                      1     tre_tnfa_run_parallel + 3914 (libsystem_c.dylib + 478542) [0x7fff2037bd4e] (running)
                      1     tre_tnfa_run_parallel + 3853 (libsystem_c.dylib + 478481) [0x7fff2037bd11] (running)
                      1     tre_tnfa_run_parallel + 3690 (libsystem_c.dylib + 478318) [0x7fff2037bc6e] (running)
                      1     tre_tnfa_run_parallel + 3643 (libsystem_c.dylib + 478271) [0x7fff2037bc3f] (running)
                      1     tre_tnfa_run_parallel + 3632 (libsystem_c.dylib + 478260) [0x7fff2037bc34] (running)
                      1     tre_tnfa_run_parallel + 3626 (libsystem_c.dylib + 478254) [0x7fff2037bc2e] (running)
                      1     tre_tnfa_run_parallel + 3583 (libsystem_c.dylib + 478211) [0x7fff2037bc03] (running)
                      1     tre_tnfa_run_parallel + 3546 (libsystem_c.dylib + 478174) [0x7fff2037bbde] (running)
                      1     tre_tnfa_run_parallel + 3147 (libsystem_c.dylib + 477775) [0x7fff2037ba4f] (running)
                      1     tre_tnfa_run_parallel + 3144 (libsystem_c.dylib + 477772) [0x7fff2037ba4c] (running)
                      1     tre_tnfa_run_parallel + 1604 (libsystem_c.dylib + 476232) [0x7fff2037b448] (running)
                      1     tre_tnfa_run_parallel + 1598 (libsystem_c.dylib + 476226) [0x7fff2037b442] (running)
                      1     tre_tnfa_run_parallel + 1592 (libsystem_c.dylib + 476220) [0x7fff2037b43c] (running)
                      1     tre_tnfa_run_parallel + 1570 (libsystem_c.dylib + 476198) [0x7fff2037b426] (running)
                      1     tre_tnfa_run_parallel + 1560 (libsystem_c.dylib + 476188) [0x7fff2037b41c] (running)
                      1     tre_tnfa_run_parallel + 1551 (libsystem_c.dylib + 476179) [0x7fff2037b413] (running)
                      1     tre_tnfa_run_parallel + 1544 (libsystem_c.dylib + 476172) [0x7fff2037b40c] (running)
                      1     tre_tnfa_run_parallel + 1504 (libsystem_c.dylib + 476132) [0x7fff2037b3e4] (running)
                      1     tre_tnfa_run_parallel + 1467 (libsystem_c.dylib + 476095) [0x7fff2037b3bf] (running)
                      1     tre_tnfa_run_parallel + 1423 (libsystem_c.dylib + 476051) [0x7fff2037b393] (running)
                      1     tre_tnfa_run_parallel + 597 (libsystem_c.dylib + 475225) [0x7fff2037b059] (running)
                      1     tre_tnfa_run_parallel + 231 (libsystem_c.dylib + 474859) [0x7fff2037aeeb]
                        1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                          1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                            1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                              1     tiny_malloc_from_free_list + 523 (libsystem_malloc.dylib + 16442) [0x7fff2025c03a] (running)
              11    Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 121 (Security + 1881593) [0x7fff224845f9]
                10    secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                  9     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                    9     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                      3     CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                        1     CFEqual + 591 (CoreFoundation + 40903) [0x7fff204b3fc7] (running)
                        1     CFEqual + 487 (CoreFoundation + 40799) [0x7fff204b3f5f]
                          1     -[NSTaggedPointerString isEqual:] + 36 (CoreFoundation + 94166) [0x7fff204c0fd6]
                            1     _NSIsNSString + 48 (CoreFoundation + 94247) [0x7fff204c1027]
                              1     cache_getImp + 27 (libobjc.A.dylib + 26507) [0x7fff202d078b] (running)
                        1     objc_msgSend + 46 (libobjc.A.dylib + 26670) [0x7fff202d082e] (running)
                      1     CFEqual + 0 (CoreFoundation + 40312) [0x7fff204b3d78] (running)
                      1     CFHash + 0 (CoreFoundation + 38448) [0x7fff204b3630] (running)
                      1     CFBasicHashFindBucket + 416 (CoreFoundation + 32556) [0x7fff204b1f2c] (running)
                      1     CFBasicHashFindBucket + 372 (CoreFoundation + 32512) [0x7fff204b1f00] (running)
                      1     CFBasicHashFindBucket + 309 (CoreFoundation + 32449) [0x7fff204b1ec1] (running)
                      1     CFBasicHashFindBucket + 205 (CoreFoundation + 32345) [0x7fff204b1e59] (running)
                  1     os_unfair_lock_lock_with_options + 14 (libsystem_platform.dylib + 3758) [0x7fff20474eae] (running)
                1     secLogObjForScope + 83 (Security + 2861155) [0x7fff22573863]
                  1     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                    1     __CFStringCreateImmutableFunnel3 + 2447 (CoreFoundation + 14095) [0x7fff204ad70f] (running)
            25    Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1553 (Security + 1879871) [0x7fff22483f3f]
              22    Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 166 (Security + 1881638) [0x7fff22484626]
                22    Security::CodeSigning::ResourceBuilder::Rule::match(char const*) const + 16 (Security + 1882230) [0x7fff22484876]
                  22    regnexec + 65 (libsystem_c.dylib + 446717) [0x7fff203740fd]
                    22    tre_match + 269 (libsystem_c.dylib + 446999) [0x7fff20374217]
                      2     DYLD-STUB$$_platform_memmove + 0 (libsystem_platform.dylib + 30438) [0x7fff2047b6e6] (running)
                      2     tre_tnfa_run_parallel + 8827 (libsystem_c.dylib + 483455) [0x7fff2037d07f]
                        2     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                          1     tiny_free_no_lock + 1149 (libsystem_malloc.dylib + 26584) [0x7fff2025e7d8] (running)
                          1     tiny_free_no_lock + 181 (libsystem_malloc.dylib + 25616) [0x7fff2025e410] (running)
                      2     tre_tnfa_run_parallel + 3546 (libsystem_c.dylib + 478174) [0x7fff2037bbde] (running)
                      1     tre_tnfa_run_parallel + 7972 (libsystem_c.dylib + 482600) [0x7fff2037cd28] (running)
                      1     tre_tnfa_run_parallel + 7841 (libsystem_c.dylib + 482469) [0x7fff2037cca5] (running)
                      1     tre_tnfa_run_parallel + 7780 (libsystem_c.dylib + 482408) [0x7fff2037cc68] (running)
                      1     tre_tnfa_run_parallel + 7677 (libsystem_c.dylib + 482305) [0x7fff2037cc01]
                        1     _platform_memmove$VARIANT$Haswell + 71 (libsystem_platform.dylib + 4167) [0x7fff20475047] (running)
                      1     tre_tnfa_run_parallel + 7662 (libsystem_c.dylib + 482290) [0x7fff2037cbf2] (running)
                      1     tre_tnfa_run_parallel + 3973 (libsystem_c.dylib + 478601) [0x7fff2037bd89] (running)
                      1     tre_tnfa_run_parallel + 3962 (libsystem_c.dylib + 478590) [0x7fff2037bd7e] (running)
                      1     tre_tnfa_run_parallel + 3941 (libsystem_c.dylib + 478569) [0x7fff2037bd69]
                       *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                      1     tre_tnfa_run_parallel + 3914 (libsystem_c.dylib + 478542) [0x7fff2037bd4e] (running)
                      1     tre_tnfa_run_parallel + 3693 (libsystem_c.dylib + 478321) [0x7fff2037bc71] (running)
                      1     tre_tnfa_run_parallel + 3643 (libsystem_c.dylib + 478271) [0x7fff2037bc3f] (running)
                      1     tre_tnfa_run_parallel + 1570 (libsystem_c.dylib + 476198) [0x7fff2037b426] (running)
                      1     tre_tnfa_run_parallel + 1556 (libsystem_c.dylib + 476184) [0x7fff2037b418] (running)
                      1     tre_tnfa_run_parallel + 1494 (libsystem_c.dylib + 476122) [0x7fff2037b3da] (running)
                      1     tre_tnfa_run_parallel + 264 (libsystem_c.dylib + 474892) [0x7fff2037af0c]
                        1     _platform_bzero$VARIANT$Haswell + 110 (libsystem_platform.dylib + 5390) [0x7fff2047550e] (running)
                      1     tre_tnfa_run_parallel + 231 (libsystem_c.dylib + 474859) [0x7fff2037aeeb]
                        1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                          1     szone_malloc_should_clear + 109 (libsystem_malloc.dylib + 10210) [0x7fff2025a7e2]
                            1     small_malloc_should_clear + 259 (libsystem_malloc.dylib + 10695) [0x7fff2025a9c7]
                              1     small_malloc_from_free_list + 359 (libsystem_malloc.dylib + 12700) [0x7fff2025b19c]
                                1     small_free_list_remove_ptr + 126 (libsystem_malloc.dylib + 31602) [0x7fff2025fb72] (running)
              3     Security::CodeSigning::ResourceBuilder::findRule(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) const + 121 (Security + 1881593) [0x7fff224845f9]
                3     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                  3     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                    3     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                      1     CFHash + 0 (CoreFoundation + 38448) [0x7fff204b3630] (running)
                      1     CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                        1     objc_msgSend + 46 (libobjc.A.dylib + 26670) [0x7fff202d082e] (running)
                      1     CFBasicHashFindBucket + 182 (CoreFoundation + 32322) [0x7fff204b1e42]
                        1     -[NSTaggedPointerString hash] + 53 (CoreFoundation + 139052) [0x7fff204cbf2c] (running)
            5     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 2019 (Security + 1880337) [0x7fff22484111]
              4     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                  1     tiny_free_list_add_ptr + 1132 (libsystem_malloc.dylib + 28950) [0x7fff2025f116] (running)
                1     tiny_free_no_lock + 1014 (libsystem_malloc.dylib + 26449) [0x7fff2025e751]
                  1     tiny_free_list_remove_ptr + 619 (libsystem_malloc.dylib + 29674) [0x7fff2025f3ea] (running)
                1     tiny_free_no_lock + 997 (libsystem_malloc.dylib + 26432) [0x7fff2025e740] (running)
                1     tiny_free_no_lock + 187 (libsystem_malloc.dylib + 25622) [0x7fff2025e416] (running)
              1     free_tiny + 462 (libsystem_malloc.dylib + 25133) [0x7fff2025e22d] (running)
            2     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1994 (Security + 1880312) [0x7fff224840f8]
              1     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 264 (Security + 1703121) [0x7fff22458cd1]
                1     free + 110 (libsystem_malloc.dylib + 8467) [0x7fff2025a113] (running)
              1     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 249 (Security + 1703106) [0x7fff22458cc2]
                1     Security::CodeSigning::LimitedAsync::perform(Security::Dispatch::Group&, void () block_pointer) + 208 (Security + 1772198) [0x7fff22469aa6]
                  1     Security::Dispatch::Group::enqueue(dispatch_queue_s*, void () block_pointer) + 82 (Security + 2802944) [0x7fff22565500]
                    1     _dispatch_root_queue_push_override + 170 (libdispatch.dylib + 59697) [0x7fff20293931] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1899 (Security + 1880217) [0x7fff22484099]
              1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<std::nullptr_t>(char const*) + 25 (Security + 1548681) [0x7fff22433189]
                1     _platform_strlen + 14 (libsystem_platform.dylib + 5454) [0x7fff2047554e]
                 *1     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                   *1     user_trap + 201 (kernel + 1790985) [0xffffff80003c5409] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1577 (Security + 1879895) [0x7fff22483f57]
              1     free_tiny + 104 (libsystem_malloc.dylib + 24775) [0x7fff2025e0c7] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1368 (Security + 1879686) [0x7fff22483e86] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1251 (Security + 1879569) [0x7fff22483e11]
              1     os_log_type_enabled + 24 (libsystem_trace.dylib + 19515) [0x7fff201a6c3b] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1235 (Security + 1879553) [0x7fff22483e01]
              1     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                1     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                  1     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                    1     CFBasicHashFindBucket + 431 (CoreFoundation + 32571) [0x7fff204b1f3b]
                      1     CFEqual + 391 (CoreFoundation + 40703) [0x7fff204b3eff] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 1093 (Security + 1879411) [0x7fff22483d73]
              1     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                1     secLogObjForCFScope + 221 (Security + 2860870) [0x7fff22573746] (running)
            1     Security::CodeSigning::ResourceBuilder::scan(void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer, void (_ftsent*, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, Security::CodeSigning::ResourceBuilder::Rule*) block_pointer) + 847 (Security + 1879165) [0x7fff22483c7d]
              1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                1     tiny_free_no_lock + 1126 (libsystem_malloc.dylib + 26561) [0x7fff2025e7c1] (running)
            1     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 0 (Security + 1702857) [0x7fff22458bc9] (running)

  Thread 0x849d7e,0x849dfe,0x849e39,0x849eef,0x849ef7,0x849ef9,0x84a00d,0x84a00e,0x84a1b0,0x84a1b2,0x84a1b3,0x84a1b1,0x849ffc,0x84a1be,0x84a1b4,0x84a1af    DispatchQueue "com.apple.root.default-qos"(10)    3062 samples (1-1001)    priority 31-46 (base 31)    cpu time 19.152s (45.1G cycles, 49.4G instructions, 0.91c/i)
  3062  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    3062  _pthread_wqthread + 244 (libsystem_pthread.dylib + 13434) [0x7fff2042f47a]
      3062  _dispatch_worker_thread2 + 92 (libdispatch.dylib + 77648) [0x7fff20297f50]
        3062  _dispatch_root_queue_drain + 326 (libdispatch.dylib + 75768) [0x7fff202977f8]
          3056  _dispatch_queue_override_invoke + 1035 (libdispatch.dylib + 24347) [0x7fff2028af1b]
            3054  _dispatch_client_callout + 8 (libdispatch.dylib + 14310) [0x7fff202887e6]
              3039  _dispatch_call_block_and_release + 12 (libdispatch.dylib + 9731) [0x7fff20287603]
                3035  invocation function for block in Security::Dispatch::ExceptionAwareEnqueuing::enqueueWithDispatcher(void (void () block_pointer) block_pointer, void () block_pointer) + 30 (Security + 2802612) [0x7fff225653b4]
                  3032  invocation function for block in Security::CodeSigning::LimitedAsync::perform(Security::Dispatch::Group&, void () block_pointer) + 36 (Security + 1772422) [0x7fff22469b86]
                    3002  invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 612 (Security + 1704213) [0x7fff22459115]
                      2223  Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4319 (Security + 1708977) [0x7fff2245a3b1]
                        2175  Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 626 (Security + 1762824) [0x7fff22467608]
                          1448  Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 160 (Security + 1761985) [0x7fff224672c1]
                            1433  read + 10 (libsystem_kernel.dylib + 7486) [0x7fff203fdd3e]
                             *1415  hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                               *1412  unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                                 *1405  read_nocancel + 181 (kernel + 6549973) [0xffffff800084f1d5]
                                   *1405  ??? (kernel + 6550600) [0xffffff800084f448]
                                     *1402  ??? (kernel + 3363756) [0xffffff80005453ac]
                                       *914   apfs_vnop_read + 729 (apfs + 332115) [0xffffff80033eb153]
                                         *411   decmpfs_read_compressed + 1449 (kernel + 3522185) [0xffffff800056be89]
                                           *387   vm_map_enter_upl + 936 (kernel + 1357400) [0xffffff800035b658]
                                             *172   vm_map_enter + 2425 (kernel + 1175865) [0xffffff800032f139] (running)
                                             *164   vm_map_enter + 1643 (kernel + 1175083) [0xffffff800032ee2b]
                                               *160   ??? (kernel + 1747609) [0xffffff80003baa99]
                                                 *151   thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                   *151   ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                     *129   machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                     *22    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                 *9     thread_block_reason + 202 (kernel + 660090) [0xffffff80002b127a] (running)
                                               *1     ??? (kernel + 1747410) [0xffffff80003ba9d2] (running)
                                               *1     _rtc_nanotime_read + 32 (kernel + 139472) [0xffffff80002320d0] (running)
                                               *1     _rtc_nanotime_read + 16 (kernel + 139456) [0xffffff80002320c0] (running)
                                               *1     _rtc_nanotime_read + 3 (kernel + 139443) [0xffffff80002320b3] (running)
                                             *11    vm_map_enter + 6262 (kernel + 1179702) [0xffffff8000330036]
                                               *11    IORWLockUnlock + 272 (kernel + 1745248) [0xffffff80003ba160]
                                                 *11    waitq_wakeup64_all + 150 (kernel + 881558) [0xffffff80002e7396] (running)
                                             *7     vm_map_enter + 2454 (kernel + 1175894) [0xffffff800032f156] (running)
                                             *6     vm_map_enter + 2450 (kernel + 1175890) [0xffffff800032f152] (running)
                                             *4     vm_map_enter + 2444 (kernel + 1175884) [0xffffff800032f14c] (running)
                                             *4     vm_map_enter + 4736 (kernel + 1178176) [0xffffff800032fa40]
                                               *3     vm_map_entry_insert + 600 (kernel + 1199144) [0xffffff8000334c28]
                                                 *2     vm_map_store_entry_link + 99 (kernel + 1266611) [0xffffff80003453b3]
                                                   *1     vm_map_store_entry_link_rb + 58 (kernel + 1272218) [0xffffff800034699a] (running)
                                                   *1     vm_map_store_entry_link_rb + 12 (kernel + 1272172) [0xffffff800034696c] (running)
                                                 *1     vm_map_store_entry_link + 156 (kernel + 1266668) [0xffffff80003453ec] (running)
                                               *1     vm_map_entry_insert + 50 (kernel + 1198594) [0xffffff8000334a02]
                                                 *1     ??? (kernel + 1185678) [0xffffff800033178e]
                                                   *1     ??? (kernel + 898372) [0xffffff80002eb544] (running)
                                             *3     vm_map_enter + 2467 (kernel + 1175907) [0xffffff800032f163] (running)
                                             *3     vm_map_enter + 2464 (kernel + 1175904) [0xffffff800032f160] (running)
                                             *3     vm_map_enter + 2461 (kernel + 1175901) [0xffffff800032f15d] (running)
                                             *2     vm_map_enter + 2487 (kernel + 1175927) [0xffffff800032f177] (running)
                                             *2     vm_map_enter + 2447 (kernel + 1175887) [0xffffff800032f14f] (running)
                                             *1     vm_map_enter + 3157 (kernel + 1176597) [0xffffff800032f415] (running)
                                             *1     vm_map_enter + 2524 (kernel + 1175964) [0xffffff800032f19c] (running)
                                             *1     vm_map_enter + 2508 (kernel + 1175948) [0xffffff800032f18c] (running)
                                             *1     vm_map_enter + 2504 (kernel + 1175944) [0xffffff800032f188] (running)
                                             *1     vm_map_enter + 2499 (kernel + 1175939) [0xffffff800032f183] (running)
                                             *1     vm_map_enter + 2490 (kernel + 1175930) [0xffffff800032f17a] (running)
                                           *9     vm_map_enter_upl + 1170 (kernel + 1357634) [0xffffff800035b742]
                                             *2     pmap_enter_options + 2700 (kernel + 1648044) [0xffffff80003a25ac] (running)
                                             *2     pmap_enter_options + 2646 (kernel + 1647990) [0xffffff80003a2576] (running)
                                             *2     pmap_enter_options + 409 (kernel + 1645753) [0xffffff80003a1cb9]
                                               *1     IORWLockRead + 63 (kernel + 1745887) [0xffffff80003ba3df] (running)
                                               *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                             *1     pmap_enter_options + 6016 (kernel + 1651360) [0xffffff80003a32a0] (running)
                                             *1     pmap_enter_options + 938 (kernel + 1646282) [0xffffff80003a1eca] (running)
                                             *1     pmap_enter_options + 429 (kernel + 1645773) [0xffffff80003a1ccd]
                                               *1     ??? (kernel + 1644130) [0xffffff80003a1662] (running)
                                           *4     vm_map_enter_upl + 1575 (kernel + 1358039) [0xffffff800035b8d7]
                                             *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                               *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                             *1     ??? (kernel + 902438) [0xffffff80002ec526] (running)
                                             *1     ??? (kernel + 900610) [0xffffff80002ebe02] (running)
                                             *1     ??? (kernel + 898251) [0xffffff80002eb4cb] (running)
                                           *2     vm_map_enter_upl + 507 (kernel + 1356971) [0xffffff800035b4ab]
                                             *2     ??? (kernel + 1274211) [0xffffff8000347163]
                                               *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                 *1     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                                               *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                           *1     IOLockUnlock + 45 (kernel + 1758061) [0xffffff80003bd36d] (running)
                                           *1     IORWLockRead + 0 (kernel + 1745824) [0xffffff80003ba3a0] (running)
                                           *1     vm_map_enter_upl + 1881 (kernel + 1358345) [0xffffff800035ba09]
                                             *1     vm_page_insert_internal + 257 (kernel + 1391393) [0xffffff8000363b21]
                                               *1     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                                 *1     ??? (kernel + 593936) [0xffffff80002a1010] (running)
                                           *1     vm_map_enter_upl + 1822 (kernel + 1358286) [0xffffff800035b9ce]
                                             *1     vm_page_wire + 724 (kernel + 1415348) [0xffffff80003698b4]
                                               *1     vm_pressure_response + 277 (kernel + 1329269) [0xffffff8000354875] (running)
                                           *1     vm_map_enter_upl + 1792 (kernel + 1358256) [0xffffff800035b9b0]
                                             *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                           *1     vm_map_enter_upl + 1731 (kernel + 1358195) [0xffffff800035b973]
                                             *1     IORWLockWrite + 22 (kernel + 1748582) [0xffffff80003bae66] (running)
                                           *1     vm_map_enter_upl + 1287 (kernel + 1357751) [0xffffff800035b7b7] (running)
                                           *1     vm_map_enter_upl + 1217 (kernel + 1357681) [0xffffff800035b771]
                                             *1     vm_page_lookup + 6 (kernel + 1402566) [0xffffff80003666c6] (running)
                                           *1     vm_map_enter_upl + 940 (kernel + 1357404) [0xffffff800035b65c] (running)
                                         *301   decmpfs_read_compressed + 2779 (kernel + 3523515) [0xffffff800056c3bb]
                                           *301   vm_map_remove_upl + 597 (kernel + 1360325) [0xffffff800035c1c5]
                                             *237   vm_map_remove + 31 (kernel + 1190463) [0xffffff8000332a3f]
                                               *231   ??? (kernel + 1747609) [0xffffff80003baa99]
                                                 *224   thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                   *224   ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                     *195   machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                     *29    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                 *7     thread_block_reason + 202 (kernel + 660090) [0xffffff80002b127a] (running)
                                               *6     ??? (kernel + 1747256) [0xffffff80003ba938] (running)
                                             *64    vm_map_remove + 115 (kernel + 1190547) [0xffffff8000332a93]
                                               *60    ??? (kernel + 1193080) [0xffffff8000333478]
                                                 *57    ??? (kernel + 1747609) [0xffffff80003baa99]
                                                   *56    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                     *56    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                       *45    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                       *11    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                   *1     thread_block_reason + 202 (kernel + 660090) [0xffffff80002b127a] (running)
                                                 *2     ??? (kernel + 1747256) [0xffffff80003ba938] (running)
                                                 *1     _rtc_nanotime_read + 16 (kernel + 139456) [0xffffff80002320c0] (running)
                                               *2     ??? (kernel + 1192261) [0xffffff8000333145]
                                                 *2     pmap_remove_options + 502 (kernel + 1658550) [0xffffff80003a4eb6]
                                                   *2     ??? (kernel + 1654988) [0xffffff80003a40cc]
                                                     *1     pmap_flush_tlbs + 1364 (kernel + 1629700) [0xffffff800039de04]
                                                       *1     pmap_tlbi_range + 48 (kernel + 1670544) [0xffffff80003a7d90] (running)
                                                     *1     pmap_flush_tlbs + 945 (kernel + 1629281) [0xffffff800039dc61] (running)
                                               *1     ??? (kernel + 1193133) [0xffffff80003334ad]
                                                 *1     vm_map_store_lookup_entry + 55 (kernel + 1266087) [0xffffff80003451a7] (running)
                                               *1     ??? (kernel + 1190849) [0xffffff8000332bc1]
                                                 *1     vm_map_store_lookup_entry + 55 (kernel + 1266087) [0xffffff80003451a7] (running)
                                         *135   decmpfs_read_compressed + 1655 (kernel + 3522391) [0xffffff800056bf57]
                                           *127   compression_decode_buffer + 2210 (AppleFSCompressionTypeZlib + 28385) [0xffffff800172cee1]
                                             *67    compression_decode_buffer + 4579 (AppleFSCompressionTypeZlib + 30754) [0xffffff800172d822]
                                               *6     lzvn_decode_buffer + 196 (AppleFSCompressionTypeZlib + 7876) [0xffffff8001727ec4] (running)
                                               *6     lzvn_decode_buffer + 96 (AppleFSCompressionTypeZlib + 7776) [0xffffff8001727e60] (running)
                                               *5     lzvn_decode_buffer + 188 (AppleFSCompressionTypeZlib + 7868) [0xffffff8001727ebc] (running)
                                               *5     lzvn_decode_buffer + 163 (AppleFSCompressionTypeZlib + 7843) [0xffffff8001727ea3] (running)
                                               *4     lzvn_decode_buffer + 373 (AppleFSCompressionTypeZlib + 8053) [0xffffff8001727f75] (running)
                                               *4     lzvn_decode_buffer + 369 (AppleFSCompressionTypeZlib + 8049) [0xffffff8001727f71] (running)
                                               *4     lzvn_decode_buffer + 159 (AppleFSCompressionTypeZlib + 7839) [0xffffff8001727e9f] (running)
                                               *3     lzvn_decode_buffer + 649 (AppleFSCompressionTypeZlib + 8329) [0xffffff8001728089] (running)
                                               *3     lzvn_decode_buffer + 506 (AppleFSCompressionTypeZlib + 8186) [0xffffff8001727ffa] (running)
                                               *3     lzvn_decode_buffer + 213 (AppleFSCompressionTypeZlib + 7893) [0xffffff8001727ed5] (running)
                                               *2     lzvn_decode_buffer + 589 (AppleFSCompressionTypeZlib + 8269) [0xffffff800172804d] (running)
                                               *2     lzvn_decode_buffer + 502 (AppleFSCompressionTypeZlib + 8182) [0xffffff8001727ff6] (running)
                                               *2     lzvn_decode_buffer + 286 (AppleFSCompressionTypeZlib + 7966) [0xffffff8001727f1e] (running)
                                               *2     lzvn_decode_buffer + 184 (AppleFSCompressionTypeZlib + 7864) [0xffffff8001727eb8] (running)
                                               *2     lzvn_decode_buffer + 154 (AppleFSCompressionTypeZlib + 7834) [0xffffff8001727e9a] (running)
                                               *1     lzvn_decode_buffer + 681 (AppleFSCompressionTypeZlib + 8361) [0xffffff80017280a9] (running)
                                               *1     lzvn_decode_buffer + 593 (AppleFSCompressionTypeZlib + 8273) [0xffffff8001728051] (running)
                                               *1     lzvn_decode_buffer + 555 (AppleFSCompressionTypeZlib + 8235) [0xffffff800172802b] (running)
                                               *1     lzvn_decode_buffer + 378 (AppleFSCompressionTypeZlib + 8058) [0xffffff8001727f7a] (running)
                                               *1     lzvn_decode_buffer + 342 (AppleFSCompressionTypeZlib + 8022) [0xffffff8001727f56] (running)
                                               *1     lzvn_decode_buffer + 328 (AppleFSCompressionTypeZlib + 8008) [0xffffff8001727f48] (running)
                                               *1     lzvn_decode_buffer + 216 (AppleFSCompressionTypeZlib + 7896) [0xffffff8001727ed8] (running)
                                               *1     lzvn_decode_buffer + 147 (AppleFSCompressionTypeZlib + 7827) [0xffffff8001727e93] (running)
                                               *1     lzvn_decode_buffer + 143 (AppleFSCompressionTypeZlib + 7823) [0xffffff8001727e8f] (running)
                                               *1     lzvn_decode_buffer + 127 (AppleFSCompressionTypeZlib + 7807) [0xffffff8001727e7f] (running)
                                               *1     lzvn_decode_buffer + 120 (AppleFSCompressionTypeZlib + 7800) [0xffffff8001727e78] (running)
                                               *1     lzvn_decode_buffer + 114 (AppleFSCompressionTypeZlib + 7794) [0xffffff8001727e72] (running)
                                               *1     lzvn_decode_buffer + 105 (AppleFSCompressionTypeZlib + 7785) [0xffffff8001727e69] (running)
                                               *1     lzvn_decode_buffer + 100 (AppleFSCompressionTypeZlib + 7780) [0xffffff8001727e64] (running)
                                             *46    compression_decode_buffer + 3944 (AppleFSCompressionTypeZlib + 30119) [0xffffff800172d5a7]
                                               *44    compression_decode_buffer + 3082 (AppleFSCompressionTypeZlib + 29257) [0xffffff800172d249]
                                                 *44    VNOP_GETXATTR + 90 (kernel + 3439114) [0xffffff8000557a0a]
                                                   *44    apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                                     *44    apfs_inode_getxattr + 457 (apfs + 295048) [0xffffff80033e2088]
                                                       *44    apfs_nstream_read + 446 (apfs + 291055) [0xffffff80033e10ef]
                                                         *44    cluster_read_ext + 394 (kernel + 3120074) [0xffffff8000509bca]
                                                           *25    ??? (kernel + 3124530) [0xffffff800050ad32]
                                                             *25    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                               *25    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                                 *25    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                   *25    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                     *24    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                                     *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                           *14    ??? (kernel + 3123727) [0xffffff800050aa0f]
                                                             *9     ??? (kernel + 3099816) [0xffffff8000504ca8]
                                                               *4     apfs_vnop_strategy + 840 (apfs + 263520) [0xffffff80033da560]
                                                                 *4     buf_strategy + 378 (kernel + 3061162) [0xffffff80004fb5aa]
                                                                   *4     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                                     *2     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                                       *2     IOGeneralMemoryDescriptor::prepare(unsigned int) + 259 (kernel + 8334275) [0xffffff8000a02bc3]
                                                                         *2     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 620 (kernel + 8347612) [0xffffff8000a05fdc]
                                                                           *1     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 479 (kernel + 8333407) [0xffffff8000a0285f]
                                                                             *1     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1137 (kernel + 8331761) [0xffffff8000a021f1]
                                                                               *1     IOGeneralMemoryDescriptor::dmaMap(IOMapper*, IOMemoryDescriptor*, IODMACommand*, IODMAMapSpecification const*, unsigned long long, unsigned long long, unsigned long long*, unsigned long long*) + 527 (kernel + 8349375) [0xffffff8000a066bf]
                                                                                 *1     AppleVTD::iovmMapMemory(IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 67 (IOPCIFamily + 22917) [0xffffff8002d64985]
                                                                                   *1     AppleVTD::spaceMapMemory(vtd_space*, IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 538 (IOPCIFamily + 21506) [0xffffff8002d64402]
                                                                                     *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 1025 (IOPCIFamily + 11739) [0xffffff8002d61ddb]
                                                                                       *1     vtd_space_set(vtd_space*, unsigned int, unsigned int, unsigned int, upl_page_info const*) + 203 (IOPCIFamily + 13276) [0xffffff8002d623dc] (running)
                                                                           *1     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 357 (kernel + 8333285) [0xffffff8000a027e5] (running)
                                                                     *1     dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                                       *1     IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 502 (IOStorageFamily + 28458) [0xffffff8002e68f2a]
                                                                         *1     IOBlockStorageDriver::executeRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 297 (IOStorageFamily + 17419) [0xffffff8002e6640b]
                                                                           *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 381 (IONVMeFamily + 107819) [0xffffff8002aba52b]
                                                                             *1     IONVMeController::GetRequest(unsigned int) + 67 (IONVMeFamily + 61163) [0xffffff8002aaeeeb]
                                                                               *1     IOService::activityTickle(unsigned long, unsigned long) + 67 (kernel + 8196803) [0xffffff80009e12c3] (running)
                                                                     *1     dkreadwrite(void*, dkrtype_t) + 396 (IOStorageFamily + 53584) [0xffffff8002e6f150]
                                                                       *1     IOMedia::getProvider() const + 0 (IOStorageFamily + 39184) [0xffffff8002e6b910] (running)
                                                               *4     apfs_vnop_strategy + 184 (apfs + 262864) [0xffffff80033da2d0]
                                                                 *3     apfs_io_common + 872 (apfs + 271561) [0xffffff80033dc4c9]
                                                                   *3     lookup_file_extent + 204 (apfs + 689455) [0xffffff800344252f]
                                                                     *3     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                                       *2     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                                         *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                           *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                                                 *1     obj_reference_release_wait + 281 (apfs + 1045910) [0xffffff8003499596]
                                                                                   *1     cv_wait_rw + 130 (apfs + 661180) [0xffffff800343b6bc]
                                                                                     *1     lck_rw_sleep_deadline + 118 (kernel + 598134) [0xffffff80002a2076]
                                                                                       *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                                         *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                                           *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                                             *1     obj_get + 3113 (apfs + 1063380) [0xffffff800349d9d4]
                                                                               *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                                                 *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                                       *1     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                                                         *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                           *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                             *1     obj_get + 1271 (apfs + 1061538) [0xffffff800349d2a2] (running)
                                                                 *1     apfs_io_common + 1843 (apfs + 272532) [0xffffff80033dc894]
                                                                   *1     _apfs_calloc + 139 (apfs + 657359) [0xffffff800343a7cf]
                                                                     *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                               *1     vnode_mount + 1 (kernel + 3414881) [0xffffff8000551b61] (running)
                                                             *4     ??? (kernel + 3097747) [0xffffff8000504493]
                                                               *4     VNOP_BLOCKMAP + 199 (kernel + 3440487) [0xffffff8000557f67]
                                                                 *4     apfs_vnop_blockmap + 2342 (apfs + 259191) [0xffffff80033d9477]
                                                                   *3     lookup_file_extent + 204 (apfs + 689455) [0xffffff800344252f]
                                                                     *3     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                                       *2     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                                                         *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                                           *1     apfs_key_compare + 156 (apfs + 673844) [0xffffff800343e834] (running)
                                                                         *1     apfs_key_compare + 0 (apfs + 673688) [0xffffff800343e798] (running)
                                                                       *1     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                                                         *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                           *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                             *1     obj_get + 507 (apfs + 1060774) [0xffffff800349cfa6] (running)
                                                                   *1     lookup_file_extent + 49 (apfs + 689300) [0xffffff8003442494] (running)
                                                             *1     VNOP_BLOCKMAP + 0 (kernel + 3440288) [0xffffff8000557ea0] (running)
                                                           *2     ??? (kernel + 3124664) [0xffffff800050adb8]
                                                             *2     cluster_copy_upl_data + 363 (kernel + 3118251) [0xffffff80005094ab]
                                                               *2     uiomove64 + 846 (kernel + 6434382) [0xffffff8000832e4e]
                                                                 *2     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                                           *1     ??? (kernel + 3124811) [0xffffff800050ae4b]
                                                             *1     ubc_upl_commit_range + 119 (kernel + 6640279) [0xffffff8000865297]
                                                               *1     upl_commit_range + 4118 (kernel + 1365078) [0xffffff800035d456]
                                                                 *1     phys_attribute_clear + 83 (kernel + 1661411) [0xffffff80003a59e3] (running)
                                                           *1     ??? (kernel + 3121599) [0xffffff800050a1bf]
                                                             *1     ??? (kernel + 3134229) [0xffffff800050d315]
                                                               *1     advisory_read_ext + 515 (kernel + 3133251) [0xffffff800050cf43]
                                                                 *1     ubc_create_upl_kernel + 272 (kernel + 6637648) [0xffffff8000864850]
                                                                   *1     ??? (kernel + 1341978) [0xffffff8000357a1a]
                                                                     *1     vm_page_lookup + 654 (kernel + 1403214) [0xffffff800036694e] (running)
                                                           *1     ??? (kernel + 3120789) [0xffffff8000509e95]
                                                             *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                               *1     memcmp_zero_ptr_aligned + 43 (kernel + 1740011) [0xffffff80003b8ceb] (running)
                                               *1     compression_decode_buffer + 3029 (AppleFSCompressionTypeZlib + 29204) [0xffffff800172d214]
                                                 *1     uio_create + 70 (kernel + 6435750) [0xffffff80008333a6]
                                                   *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                     *1     ??? (kernel + 900873) [0xffffff80002ebf09] (running)
                                               *1     uio_free + 0 (kernel + 6436096) [0xffffff8000833500] (running)
                                             *10    compression_decode_buffer + 3878 (AppleFSCompressionTypeZlib + 30053) [0xffffff800172d565]
                                               *8     compression_decode_buffer + 3082 (AppleFSCompressionTypeZlib + 29257) [0xffffff800172d249]
                                                 *8     VNOP_GETXATTR + 90 (kernel + 3439114) [0xffffff8000557a0a]
                                                   *8     apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                                     *5     apfs_inode_getxattr + 457 (apfs + 295048) [0xffffff80033e2088]
                                                       *3     apfs_nstream_read + 446 (apfs + 291055) [0xffffff80033e10ef]
                                                         *3     cluster_read_ext + 394 (kernel + 3120074) [0xffffff8000509bca]
                                                           *3     ??? (kernel + 3121913) [0xffffff800050a2f9]
                                                             *3     ??? (kernel + 3117848) [0xffffff8000509318]
                                                               *1     memory_object_control_uiomove + 1127 (kernel + 1051447) [0xffffff8000310b37] (running)
                                                               *1     memory_object_control_uiomove + 594 (kernel + 1050914) [0xffffff8000310922]
                                                                 *1     uiomove64 + 846 (kernel + 6434382) [0xffffff8000832e4e]
                                                                   *1     _bcopy + 14 (kernel + 138734) [0xffffff8000231dee] (running)
                                                               *1     memory_object_control_uiomove + 94 (kernel + 1050414) [0xffffff800031072e]
                                                                 *1     IORWLockWrite + 34 (kernel + 1748594) [0xffffff80003bae72] (running)
                                                       *1     apfs_nstream_read + 425 (apfs + 291034) [0xffffff80033e10da]
                                                         *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                           *1     IORWLockUnlock + 50 (kernel + 1745026) [0xffffff80003ba082] (running)
                                                       *1     apfs_nstream_read + 110 (apfs + 290719) [0xffffff80033e0f9f] (running)
                                                     *1     apfs_inode_getxattr + 585 (apfs + 295176) [0xffffff80033e2108]
                                                       *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                                     *1     apfs_inode_getxattr + 341 (apfs + 294932) [0xffffff80033e2014]
                                                       *1     apfs_get_namedstream_vnode + 474 (apfs + 296791) [0xffffff80033e2757]
                                                         *1     apfs_jhash_getvnode_internal + 120 (apfs + 658025) [0xffffff800343aa69]
                                                           *1     object_in_jhash + 34 (apfs + 658369) [0xffffff800343abc1] (running)
                                                     *1     apfs_inode_getxattr + 144 (apfs + 294735) [0xffffff80033e1f4f] (running)
                                               *1     compression_decode_buffer + 3029 (AppleFSCompressionTypeZlib + 29204) [0xffffff800172d214]
                                                 *1     uio_create + 70 (kernel + 6435750) [0xffffff80008333a6]
                                                   *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                     *1     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                               *1     uio_free + 1 (kernel + 6436097) [0xffffff8000833501] (running)
                                             *4     compression_decode_buffer + 3912 (AppleFSCompressionTypeZlib + 30087) [0xffffff800172d587]
                                               *4     compression_decode_buffer + 6119 (AppleFSCompressionTypeZlib + 32294) [0xffffff800172de26]
                                                 *4     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                   *2     ??? (kernel + 579084) [0xffffff800029d60c]
                                                     *2     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                       *1     memcmp_zero_ptr_aligned + 79 (kernel + 1740047) [0xffffff80003b8d0f] (running)
                                                       *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                   *2     ??? (kernel + 579181) [0xffffff800029d66d]
                                                     *1     ??? (kernel + 579427) [0xffffff800029d763]
                                                       *1     kernel_memory_allocate + 1581 (kernel + 1158397) [0xffffff800032acfd]
                                                         *1     pmap_enter_options + 6828 (kernel + 1652172) [0xffffff80003a35cc]
                                                           *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                     *1     ??? (kernel + 579392) [0xffffff800029d740]
                                                       *1     vm_tag_alloc + 26 (kernel + 1392554) [0xffffff8000363faa] (running)
                                           *8     compression_decode_buffer + 2250 (AppleFSCompressionTypeZlib + 28425) [0xffffff800172cf09]
                                             *7     OSFree + 64 (kernel + 582960) [0xffffff800029e530]
                                               *6     ??? (kernel + 580097) [0xffffff800029da01]
                                                 *6     ??? (kernel + 580520) [0xffffff800029dba8]
                                                   *6     kmem_free + 113 (kernel + 1163617) [0xffffff800032c161]
                                                     *6     vm_map_remove + 115 (kernel + 1190547) [0xffffff8000332a93]
                                                       *4     ??? (kernel + 1192261) [0xffffff8000333145]
                                                         *4     pmap_remove_options + 502 (kernel + 1658550) [0xffffff80003a4eb6]
                                                           *4     ??? (kernel + 1654988) [0xffffff80003a40cc]
                                                             *2     pmap_flush_tlbs + 343 (kernel + 1628679) [0xffffff800039da07] (running)
                                                             *1     pmap_flush_tlbs + 637 (kernel + 1628973) [0xffffff800039db2d] (running)
                                                             *1     pmap_flush_tlbs + 558 (kernel + 1628894) [0xffffff800039dade] (running)
                                                       *2     ??? (kernel + 1193730) [0xffffff8000333702]
                                                         *1     vm_fault_unwire + 993 (kernel + 1149393) [0xffffff80003289d1]
                                                           *1     pmap_change_wiring + 33 (kernel + 1662897) [0xffffff80003a5fb1]
                                                             *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                         *1     vm_fault_unwire + 752 (kernel + 1149152) [0xffffff80003288e0]
                                                           *1     vm_fault_page + 576 (kernel + 1113056) [0xffffff800031fbe0]
                                                             *1     vm_page_lookup + 200 (kernel + 1402760) [0xffffff8000366788] (running)
                                               *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                                 *1     __bzero + 6 (kernel + 4342) [0xffffff80001010f6] (running)
                                             *1     OSFree + 23 (kernel + 582919) [0xffffff800029e507] (running)
                                         *39    decmpfs_read_compressed + 297 (kernel + 3521033) [0xffffff800056ba09]
                                           *39    ??? (kernel + 3117848) [0xffffff8000509318]
                                             *34    memory_object_control_uiomove + 292 (kernel + 1050612) [0xffffff80003107f4]
                                               *34    lck_rw_sleep + 115 (kernel + 597667) [0xffffff80002a1ea3]
                                                 *34    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                   *34    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                     *34    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                             *2     memory_object_control_uiomove + 594 (kernel + 1050914) [0xffffff8000310922]
                                               *2     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                 *2     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                             *2     memory_object_control_uiomove + 241 (kernel + 1050561) [0xffffff80003107c1]
                                               *1     vm_page_lookup + 657 (kernel + 1403217) [0xffffff8000366951] (running)
                                               *1     vm_page_lookup + 124 (kernel + 1402684) [0xffffff800036673c] (running)
                                             *1     memory_object_control_uiomove + 94 (kernel + 1050414) [0xffffff800031072e]
                                               *1     vm_object_lock + 16 (kernel + 1286752) [0xffffff800034a260] (running)
                                         *12    decmpfs_read_compressed + 3667 (kernel + 3524403) [0xffffff800056c733]
                                           *12    ubc_upl_commit_range + 119 (kernel + 6640279) [0xffffff8000865297]
                                             *6     upl_commit_range + 2110 (kernel + 1363070) [0xffffff800035cc7e]
                                               *3     vm_page_free_unlocked + 31 (kernel + 1400015) [0xffffff8000365ccf]
                                                 *3     lck_mtx_lock_spin_slow + 163 (kernel + 1756179) [0xffffff80003bcc13] (running)
                                               *2     vm_page_free_unlocked + 65 (kernel + 1400049) [0xffffff8000365cf1]
                                                 *1     vm_page_remove + 422 (kernel + 1401382) [0xffffff8000366226]
                                                   *1     vm_page_remove_internal + 306 (kernel + 1402354) [0xffffff80003665f2] (running)
                                                 *1     vm_page_remove + 203 (kernel + 1401163) [0xffffff800036614b]
                                                   *1     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                                     *1     ??? (kernel + 593942) [0xffffff80002a1016] (running)
                                               *1     vm_page_free_unlocked + 39 (kernel + 1400023) [0xffffff8000365cd7]
                                                 *1     vm_page_queues_remove + 0 (kernel + 1393408) [0xffffff8000364300] (running)
                                             *2     upl_commit_range + 4453 (kernel + 1365413) [0xffffff800035d5a5]
                                               *2     vm_page_do_delayed_work + 266 (kernel + 1420186) [0xffffff800036ab9a]
                                                 *1     vm_page_deactivate_internal + 237 (kernel + 1392925) [0xffffff800036411d] (running)
                                                 *1     vm_page_deactivate_internal + 207 (kernel + 1392895) [0xffffff80003640ff] (running)
                                             *1     upl_commit_range + 4118 (kernel + 1365078) [0xffffff800035d456]
                                               *1     phys_attribute_clear + 138 (kernel + 1661466) [0xffffff80003a5a1a] (running)
                                             *1     upl_commit_range + 2445 (kernel + 1363405) [0xffffff800035cdcd] (running)
                                             *1     upl_commit_range + 2088 (kernel + 1363048) [0xffffff800035cc68]
                                               *1     vm_page_lookup + 244 (kernel + 1402804) [0xffffff80003667b4] (running)
                                             *1     upl_commit_range + 138 (kernel + 1361098) [0xffffff800035c4ca]
                                               *1     ??? (kernel + 900856) [0xffffff80002ebef8] (running)
                                         *9     decmpfs_read_compressed + 1358 (kernel + 3522094) [0xffffff800056be2e]
                                           *9     ubc_create_upl_kernel + 272 (kernel + 6637648) [0xffffff8000864850]
                                             *4     ??? (kernel + 1342121) [0xffffff8000357aa9]
                                               *1     vm_page_grab_options + 953 (kernel + 1407353) [0xffffff8000367979] (running)
                                               *1     vm_page_grab_options + 733 (kernel + 1407133) [0xffffff800036789d] (running)
                                               *1     vm_page_grab_options + 146 (kernel + 1406546) [0xffffff8000367652] (running)
                                               *1     vm_page_grab_options + 106 (kernel + 1406506) [0xffffff800036762a] (running)
                                             *2     ??? (kernel + 1339831) [0xffffff80003571b7]
                                               *1     ??? (kernel + 901472) [0xffffff80002ec160] (running)
                                               *1     ??? (kernel + 900728) [0xffffff80002ebe78]
                                                 *1     ??? (kernel + 594320) [0xffffff80002a1190] (running)
                                             *1     ??? (kernel + 1344900) [0xffffff8000358584]
                                               *1     vm_page_insert_internal + 770 (kernel + 1391906) [0xffffff8000363d22] (running)
                                             *1     ??? (kernel + 1342038) [0xffffff8000357a56]
                                               *1     lck_rw_sleep + 115 (kernel + 597667) [0xffffff80002a1ea3]
                                                 *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                   *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                     *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                             *1     ??? (kernel + 1341978) [0xffffff8000357a1a]
                                               *1     vm_page_lookup + 654 (kernel + 1403214) [0xffffff800036694e] (running)
                                         *5     decmpfs_read_compressed + 3480 (kernel + 3524216) [0xffffff800056c678]
                                           *5     cluster_copy_upl_data + 363 (kernel + 3118251) [0xffffff80005094ab]
                                             *4     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                               *3     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                               *1     _bcopy + 21 (kernel + 138741) [0xffffff8000231df5] (running)
                                             *1     uiomove64 + 38 (kernel + 6433574) [0xffffff8000832b26] (running)
                                         *1     decmpfs_read_compressed + 169 (kernel + 3520905) [0xffffff800056b989]
                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                         *1     decmpfs_read_compressed + 133 (kernel + 3520869) [0xffffff800056b965] (running)
                                       *473   apfs_vnop_read + 1064 (apfs + 332450) [0xffffff80033eb2a2]
                                         *473   cluster_read_ext + 394 (kernel + 3120074) [0xffffff8000509bca]
                                           *375   ??? (kernel + 3124530) [0xffffff800050ad32]
                                             *374   ??? (kernel + 6437640) [0xffffff8000833b08]
                                               *373   lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                 *359   thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                   *359   ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                     *347   machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                     *12    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                 *14    thread_block_reason + 202 (kernel + 660090) [0xffffff80002b127a] (running)
                                               *1     lck_mtx_sleep + 62 (kernel + 595438) [0xffffff80002a15ee]
                                                 *1     waitq_assert_wait64 + 31 (kernel + 880671) [0xffffff80002e701f] (running)
                                             *1     ??? (kernel + 6437292) [0xffffff80008339ac] (running)
                                           *65    ??? (kernel + 3123727) [0xffffff800050aa0f]
                                             *51    ??? (kernel + 3099816) [0xffffff8000504ca8]
                                               *41    apfs_vnop_strategy + 840 (apfs + 263520) [0xffffff80033da560]
                                                 *41    buf_strategy + 378 (kernel + 3061162) [0xffffff80004fb5aa]
                                                   *40    spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                     *14    dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                       *12    IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 502 (IOStorageFamily + 28458) [0xffffff8002e68f2a]
                                                         *10    IOBlockStorageDriver::executeRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 297 (IOStorageFamily + 17419) [0xffffff8002e6640b]
                                                           *5     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 981 (IONVMeFamily + 108419) [0xffffff8002aba783]
                                                             *4     IONVMeController::ProcessNVMeRequest(AppleNVMeRequest*, bool) + 459 (IONVMeFamily + 48225) [0xffffff8002aabc61]
                                                               *2     IONVMeController::SubmitCommand(AppleNVMeSubmissionQueue*, AppleNVMeRequest*) + 105 (IONVMeFamily + 56107) [0xffffff8002aadb2b]
                                                                 *2     IONVMeController::ReadRegister32(unsigned int) + 16 (IONVMeFamily + 54798) [0xffffff8002aad60e] (running)
                                                               *2     IONVMeController::SubmitCommand(AppleNVMeSubmissionQueue*, AppleNVMeRequest*) + 31 (IONVMeFamily + 56033) [0xffffff8002aadae1]
                                                                 *1     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                                                   *1     ??? (kernel + 593956) [0xffffff80002a1024]
                                                                     *1     ??? (kernel + 593674) [0xffffff80002a0f0a] (running)
                                                                 *1     ??? (kernel + 1743504) [0xffffff80003b9a90] (running)
                                                             *1     IONVMeController::NVMeCoastGuardSetTCB(AppleNVMeRequest*, NVMePersistentMappingsFlags_t) + 0 (IONVMeFamily + 69542) [0xffffff8002ab0fa6] (running)
                                                           *2     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 381 (IONVMeFamily + 107819) [0xffffff8002aba52b]
                                                             *2     IONVMeController::GetRequest(unsigned int) + 154 (IONVMeFamily + 61250) [0xffffff8002aaef42]
                                                               *2     AppleNVMeRequestPool::GetRequest(bool) + 27 (IONVMeFamily + 25585) [0xffffff8002aa63f1]
                                                                 *1     AppleNVMeRequestPool::getCommand(IOCommand**, bool) + 93 (IONVMeFamily + 25699) [0xffffff8002aa6463] (running)
                                                                 *1     AppleNVMeRequestPool::getCommand(IOCommand**, bool) + 25 (IONVMeFamily + 25631) [0xffffff8002aa641f] (running)
                                                           *2     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 873 (IONVMeFamily + 108311) [0xffffff8002aba717]
                                                             *1     AppleNVMeRequest::GenerateIOVMSegments(unsigned long long, unsigned long long) + 239 (IONVMeFamily + 94927) [0xffffff8002ab72cf] (running)
                                                             *1     AppleNVMeRequest::GenerateIOVMSegments(unsigned long long, unsigned long long) + 33 (IONVMeFamily + 94721) [0xffffff8002ab7201]
                                                               *1     AppleNVMeRequest::BuildSegmentsLinearPRP(IODMACommand::Segment64*) + 1 (IONVMeFamily + 93457) [0xffffff8002ab6d11] (running)
                                                           *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 772 (IONVMeFamily + 108210) [0xffffff8002aba6b2]
                                                             *1     AppleNVMeRequest::BuildCommandReadStruct(NVMeRWCommand*) + 49 (IONVMeFamily + 96821) [0xffffff8002ab7a35]
                                                               *1     AppleNVMeRequest::BuildCommandRead(unsigned int, unsigned long long, unsigned long long, unsigned char, unsigned char, unsigned char) + 109 (IONVMeFamily + 96281) [0xffffff8002ab7819] (running)
                                                         *1     IOBlockStorageDriver::breakUpRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 131 (IOStorageFamily + 27333) [0xffffff8002e68ac5]
                                                           *1     IOBreaker::getBreakSize(unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, IOMemoryDescriptor*, unsigned long long) + 204 (IOStorageFamily + 25944) [0xffffff8002e68558]
                                                             *1     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 44 (kernel + 8332972) [0xffffff8000a026ac] (running)
                                                         *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 0 (IONVMeFamily + 107438) [0xffffff8002aba3ae] (running)
                                                       *1     AppleAPFSVolume::read(IOService*, unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 65 (apfs + 114989) [0xffffff80033b612d]
                                                         *1     proc_selfpid + 9 (kernel + 6364841) [0xffffff8000821ea9]
                                                           *1     current_proc + 129 (kernel + 7590353) [0xffffff800094d1d1]
                                                             *1     ??? (kernel + 912400) [0xffffff80002eec10] (running)
                                                       *1     IOPartitionScheme::read(IOService*, unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 41 (IOStorageFamily + 64779) [0xffffff8002e71d0b] (running)
                                                     *11    dkreadwrite(void*, dkrtype_t) + 897 (IOStorageFamily + 54085) [0xffffff8002e6f345]
                                                       *7     IOMemoryDescriptor::withOptions(void*, unsigned int, unsigned int, task*, unsigned int, IOMapper*) + 98 (kernel + 8354258) [0xffffff8000a079d2]
                                                         *6     IOGeneralMemoryDescriptor::initWithOptions(void*, unsigned int, unsigned int, task*, unsigned int, IOMapper*) + 749 (kernel + 8328653) [0xffffff8000a015cd]
                                                           *4     IOGeneralMemoryDescriptor::initMemoryEntries(unsigned long, IOMapper*) + 116 (kernel + 8348660) [0xffffff8000a063f4]
                                                             *3     OSData::initWithCapacity(unsigned int) + 156 (kernel + 7621404) [0xffffff8000954b1c]
                                                               *3     ??? (kernel + 579084) [0xffffff800029d60c]
                                                                 *2     ??? (kernel + 900610) [0xffffff80002ebe02] (running)
                                                                 *1     ??? (kernel + 900899) [0xffffff80002ebf23] (running)
                                                             *1     OSData::initWithCapacity(unsigned int) + 192 (kernel + 7621440) [0xffffff8000954b40] (running)
                                                           *1     IOGeneralMemoryDescriptor::initMemoryEntries(unsigned long, IOMapper*) + 93 (kernel + 8348637) [0xffffff8000a063dd]
                                                             *1     OSData::MetaClass::alloc() const + 33 (kernel + 7624001) [0xffffff8000955541]
                                                               *1     ??? (kernel + 900464) [0xffffff80002ebd70] (running)
                                                           *1     OSData::MetaClass::alloc() const + 0 (kernel + 7623968) [0xffffff8000955520] (running)
                                                         *1     IOLockLock + 33 (kernel + 1757361) [0xffffff80003bd0b1] (running)
                                                       *3     IOMemoryDescriptor::withOptions(void*, unsigned int, unsigned int, task*, unsigned int, IOMapper*) + 57 (kernel + 8354217) [0xffffff8000a079a9]
                                                         *3     IOGeneralMemoryDescriptor::MetaClass::alloc() const + 33 (kernel + 8350001) [0xffffff8000a06931]
                                                           *3     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                                       *1     IOMemoryDescriptor::withOptions(void*, unsigned int, unsigned int, task*, unsigned int, IOMapper*) + 44 (kernel + 8354204) [0xffffff8000a0799c] (running)
                                                     *9     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                       *9     IOGeneralMemoryDescriptor::prepare(unsigned int) + 259 (kernel + 8334275) [0xffffff8000a02bc3]
                                                         *6     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 620 (kernel + 8347612) [0xffffff8000a05fdc]
                                                           *6     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 479 (kernel + 8333407) [0xffffff8000a0285f]
                                                             *5     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1137 (kernel + 8331761) [0xffffff8000a021f1]
                                                               *5     IOGeneralMemoryDescriptor::dmaMap(IOMapper*, IOMemoryDescriptor*, IODMACommand*, IODMAMapSpecification const*, unsigned long long, unsigned long long, unsigned long long*, unsigned long long*) + 527 (kernel + 8349375) [0xffffff8000a066bf]
                                                                 *5     AppleVTD::iovmMapMemory(IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 67 (IOPCIFamily + 22917) [0xffffff8002d64985]
                                                                   *4     AppleVTD::spaceMapMemory(vtd_space*, IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 538 (IOPCIFamily + 21506) [0xffffff8002d64402]
                                                                     *2     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 326 (IOPCIFamily + 11040) [0xffffff8002d61b20]
                                                                       *2     AppleVTD::checkFree(vtd_space*, unsigned int) + 187 (IOPCIFamily + 12397) [0xffffff8002d6206d]
                                                                         *2     AppleVTD::space_free(vtd_space*, unsigned int, unsigned int) + 368 (IOPCIFamily + 13660) [0xffffff8002d6255c]
                                                                           *1     vtd_bchunk_free(vtd_space*, unsigned int, unsigned int) + 61 (IOPCIFamily + 65925) [0xffffff8002d6f185] (running)
                                                                           *1     vtd_bchunk_free(vtd_space*, unsigned int, unsigned int) + 15 (IOPCIFamily + 65879) [0xffffff8002d6f157] (running)
                                                                     *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 852 (IOPCIFamily + 11566) [0xffffff8002d61d2e] (running)
                                                                     *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 55 (IOPCIFamily + 10769) [0xffffff8002d61a11] (running)
                                                                   *1     AppleVTD::spaceMapMemory(vtd_space*, IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 57 (IOPCIFamily + 21025) [0xffffff8002d64221] (running)
                                                             *1     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1359 (kernel + 8331983) [0xffffff8000a022cf] (running)
                                                         *2     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 111 (kernel + 8347103) [0xffffff8000a05ddf]
                                                           *1     IOMallocZero_internal + 24 (kernel + 7993032) [0xffffff80009af6c8]
                                                             *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                               *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                                           *1     IOMallocZero_internal + 7 (kernel + 7993015) [0xffffff80009af6b7] (running)
                                                         *1     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 68 (kernel + 8347060) [0xffffff8000a05db4]
                                                           *1     IOGeneralMemoryDescriptor::getPreparationID() + 130 (kernel + 8333938) [0xffffff8000a02a72] (running)
                                                     *1     AppleAPFSVolume::read(IOService*, unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 0 (apfs + 114924) [0xffffff80033b60ec] (running)
                                                     *1     IOPartitionScheme::read(IOService*, unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 1 (IOStorageFamily + 64739) [0xffffff8002e71ce3] (running)
                                                     *1     IOPartitionScheme::read(IOService*, unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 0 (IOStorageFamily + 64738) [0xffffff8002e71ce2] (running)
                                                     *1     dkreadwrite(void*, dkrtype_t) + 396 (IOStorageFamily + 53584) [0xffffff8002e6f150]
                                                       *1     AppleAPFSVolume::getSize() const + 18 (apfs + 115866) [0xffffff80033b649a]
                                                         *1     IOService::getProvider() const + 18 (kernel + 8055986) [0xffffff80009becb2] (running)
                                                     *1     dkreadwrite(void*, dkrtype_t) + 140 (IOStorageFamily + 53328) [0xffffff8002e6f050] (running)
                                                     *1     IOMedia::read(IOService*, unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 0 (IOStorageFamily + 41990) [0xffffff8002e6c406] (running)
                                                   *1     dkreadwrite(void*, dkrtype_t) + 1 (IOStorageFamily + 53189) [0xffffff8002e6efc5] (running)
                                               *10    apfs_vnop_strategy + 184 (apfs + 262864) [0xffffff80033da2d0]
                                                 *4     apfs_io_common + 872 (apfs + 271561) [0xffffff80033dc4c9]
                                                   *4     lookup_file_extent + 204 (apfs + 689455) [0xffffff800344252f]
                                                     *4     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                       *3     _bt_lookup_variant + 1360 (apfs + 940148) [0xffffff800347f874]
                                                         *1     obj_release + 445 (apfs + 1049164) [0xffffff800349a24c]
                                                           *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                             *1     IORWLockUnlock + 34 (kernel + 1745010) [0xffffff80003ba072] (running)
                                                         *1     obj_release + 421 (apfs + 1049140) [0xffffff800349a234]
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                         *1     obj_release + 47 (apfs + 1048766) [0xffffff800349a0be]
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                       *1     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                                         *1     bt_search_node_insert + 128 (apfs + 902494) [0xffffff800347655e] (running)
                                                 *2     apfs_io_common + 1843 (apfs + 272532) [0xffffff80033dc894]
                                                   *1     _apfs_calloc + 63 (apfs + 657283) [0xffffff800343a783]
                                                     *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                       *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                         *1     ??? (kernel + 900610) [0xffffff80002ebe02] (running)
                                                   *1     _apfs_calloc + 55 (apfs + 657275) [0xffffff800343a77b] (running)
                                                 *1     apfs_io_common + 4036 (apfs + 274725) [0xffffff80033dd125]
                                                   *1     cp_get_fext_ek + 966 (apfs + 703684) [0xffffff8003445cc4]
                                                     *1     crypto_hash_search_with_id + 0 (apfs + 1005103) [0xffffff800348f62f] (running)
                                                 *1     apfs_io_common + 965 (apfs + 271654) [0xffffff80033dc526]
                                                   *1     erso_lock_phys_range_for_io + 72 (apfs + 954492) [0xffffff800348307c] (running)
                                                 *1     apfs_io_common + 238 (apfs + 270927) [0xffffff80033dc24f] (running)
                                                 *1     APFSOSNumberAtomic::addValue(long long) + 0 (apfs + 233790) [0xffffff80033d313e] (running)
                                             *12    ??? (kernel + 3097747) [0xffffff8000504493]
                                               *12    VNOP_BLOCKMAP + 199 (kernel + 3440487) [0xffffff8000557f67]
                                                 *12    apfs_vnop_blockmap + 2342 (apfs + 259191) [0xffffff80033d9477]
                                                   *12    lookup_file_extent + 204 (apfs + 689455) [0xffffff800344252f]
                                                     *11    tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                       *4     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                         *4     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                           *4     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                             *1     obj_get + 4232 (apfs + 1064499) [0xffffff800349de33]
                                                               *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                             *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                               *1     obj_get_finish + 235 (apfs + 1066596) [0xffffff800349e664]
                                                                 *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                             *1     obj_get + 3113 (apfs + 1063380) [0xffffff800349d9d4]
                                                               *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                                 *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                             *1     obj_get + 93 (apfs + 1060360) [0xffffff800349ce08] (running)
                                                       *3     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                                         *3     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                                           *2     bt_search_node_insert + 143 (apfs + 902509) [0xffffff800347656d]
                                                             *1     btree_node_key_ptr + 62 (apfs + 896651) [0xffffff8003474e8b] (running)
                                                             *1     btree_node_key_ptr + 6 (apfs + 896595) [0xffffff8003474e53] (running)
                                                           *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                             *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                               *1     jobj_validate_key_val + 17 (apfs + 670937) [0xffffff800343dcd9] (running)
                                                       *1     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                                         *1     obj_release + 500 (apfs + 1049219) [0xffffff800349a283]
                                                           *1     OSBitOrAtomic + 24 (kernel + 7593736) [0xffffff800094df08] (running)
                                                       *1     _bt_lookup_variant + 969 (apfs + 939757) [0xffffff800347f6ed]
                                                         *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                           *1     IORWLockUnlock + 210 (kernel + 1745186) [0xffffff80003ba122] (running)
                                                       *1     _bt_lookup_variant + 873 (apfs + 939661) [0xffffff800347f68d]
                                                         *1     btree_node_child_val + 108 (apfs + 892907) [0xffffff8003473feb] (running)
                                                       *1     _bt_lookup_variant + 525 (apfs + 939313) [0xffffff800347f531]
                                                         *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                     *1     _bt_lookup_variant + 1 (apfs + 938789) [0xffffff800347f325] (running)
                                             *1     ??? (kernel + 3100674) [0xffffff8000505002] (running)
                                             *1     ??? (kernel + 3099216) [0xffffff8000504a50]
                                               *1     __bzero + 8 (kernel + 4344) [0xffffff80001010f8] (running)
                                           *10    ??? (kernel + 3122505) [0xffffff800050a549]
                                             *9     ubc_create_upl_kernel + 272 (kernel + 6637648) [0xffffff8000864850]
                                               *2     ??? (kernel + 1344900) [0xffffff8000358584]
                                                 *2     vm_page_insert_internal + 257 (kernel + 1391393) [0xffffff8000363b21]
                                                   *2     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                                     *1     ??? (kernel + 593936) [0xffffff80002a1010] (running)
                                                     *1     ??? (kernel + 593924) [0xffffff80002a1004] (running)
                                               *2     ??? (kernel + 1340091) [0xffffff80003572bb]
                                                 *2     ??? (kernel + 1345703) [0xffffff80003588a7]
                                                   *2     ??? (kernel + 579084) [0xffffff800029d60c]
                                                     *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                       *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                     *1     ??? (kernel + 900873) [0xffffff80002ebf09] (running)
                                               *1     ??? (kernel + 1345188) [0xffffff80003586a4]
                                                 *1     ??? (kernel + 905258) [0xffffff80002ed02a] (running)
                                               *1     ??? (kernel + 1345124) [0xffffff8000358664]
                                                 *1     IORWLockUnlock + 6 (kernel + 1744982) [0xffffff80003ba056] (running)
                                               *1     ??? (kernel + 1344874) [0xffffff800035856a] (running)
                                               *1     ??? (kernel + 1344012) [0xffffff800035820c] (running)
                                               *1     ??? (kernel + 1339831) [0xffffff80003571b7]
                                                 *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                   *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                             *1     ??? (kernel + 1339632) [0xffffff80003570f0] (running)
                                           *8     ??? (kernel + 3124811) [0xffffff800050ae4b]
                                             *7     ubc_upl_commit_range + 119 (kernel + 6640279) [0xffffff8000865297]
                                               *3     upl_commit_range + 4453 (kernel + 1365413) [0xffffff800035d5a5]
                                                 *2     vm_page_do_delayed_work + 41 (kernel + 1419961) [0xffffff800036aab9]
                                                   *2     lck_mtx_try_lock_spin_always + 36 (kernel + 1757892) [0xffffff80003bd2c4] (running)
                                                 *1     vm_page_do_delayed_work + 528 (kernel + 1420448) [0xffffff800036aca0] (running)
                                               *3     upl_commit_range + 4118 (kernel + 1365078) [0xffffff800035d456]
                                                 *2     phys_attribute_clear + 90 (kernel + 1661418) [0xffffff80003a59ea] (running)
                                                 *1     phys_attribute_clear + 146 (kernel + 1661474) [0xffffff80003a5a22] (running)
                                               *1     upl_commit_range + 138 (kernel + 1361098) [0xffffff800035c4ca]
                                                 *1     ??? (kernel + 902056) [0xffffff80002ec3a8] (running)
                                             *1     ubc_upl_commit_range + 141 (kernel + 6640301) [0xffffff80008652ad]
                                               *1     ??? (kernel + 1338972) [0xffffff8000356e5c]
                                                 *1     lck_mtx_destroy + 111 (kernel + 1751631) [0xffffff80003bba4f] (running)
                                           *6     ??? (kernel + 3124664) [0xffffff800050adb8]
                                             *2     cluster_copy_upl_data + 363 (kernel + 3118251) [0xffffff80005094ab]
                                               *2     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                 *1     ??? (kernel + 1741895) [0xffffff80003b9447] (running)
                                                 *1     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                             *2     cluster_copy_upl_data + 245 (kernel + 3118133) [0xffffff8000509435]
                                               *2     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                 *2     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                             *1     cluster_copy_upl_data + 495 (kernel + 3118383) [0xffffff800050952f] (running)
                                             *1     cluster_copy_upl_data + 441 (kernel + 3118329) [0xffffff80005094f9] (running)
                                           *3     ??? (kernel + 3121913) [0xffffff800050a2f9]
                                             *3     ??? (kernel + 3117848) [0xffffff8000509318]
                                               *1     memory_object_control_uiomove + 1059 (kernel + 1051379) [0xffffff8000310af3] (running)
                                               *1     memory_object_control_uiomove + 594 (kernel + 1050914) [0xffffff8000310922]
                                                 *1     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                   *1     ??? (kernel + 1741524) [0xffffff80003b92d4] (running)
                                               *1     task_update_logical_writes + 0 (kernel + 755280) [0xffffff80002c8650] (running)
                                           *2     ??? (kernel + 3121599) [0xffffff800050a1bf]
                                             *2     ??? (kernel + 3134229) [0xffffff800050d315]
                                               *2     advisory_read_ext + 800 (kernel + 3133536) [0xffffff800050d060]
                                                 *2     ??? (kernel + 3099816) [0xffffff8000504ca8]
                                                   *2     apfs_vnop_strategy + 840 (apfs + 263520) [0xffffff80033da560]
                                                     *2     buf_strategy + 378 (kernel + 3061162) [0xffffff80004fb5aa]
                                                       *2     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                         *2     dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                           *2     IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 502 (IOStorageFamily + 28458) [0xffffff8002e68f2a]
                                                             *2     IOBlockStorageDriver::executeRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 297 (IOStorageFamily + 17419) [0xffffff8002e6640b]
                                                               *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 873 (IONVMeFamily + 108311) [0xffffff8002aba717]
                                                                 *1     AppleNVMeRequest::GenerateIOVMSegments(unsigned long long, unsigned long long) + 33 (IONVMeFamily + 94721) [0xffffff8002ab7201]
                                                                   *1     AppleNVMeRequest::GenerateIOVMSegmentsInternal() + 64 (IONVMeFamily + 93148) [0xffffff8002ab6bdc]
                                                                     *1     IODMACommand::genIOVMSegments(unsigned int, int (*)(void*, IODMACommand*, IODMACommand::Segment64, void*, unsigned int), void*, unsigned long long*, void*, unsigned int*) + 0 (kernel + 8293776) [0xffffff80009f8d90] (running)
                                                               *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 797 (IONVMeFamily + 108235) [0xffffff8002aba6cb]
                                                                 *1     IODMACommand::setMemoryDescriptor(IOMemoryDescriptor const*, bool) + 142 (kernel + 8288462) [0xffffff80009f78ce]
                                                                   *1     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 136 (kernel + 8330760) [0xffffff8000a01e08] (running)
                                           *1     ubc_create_upl_kernel + 0 (kernel + 6637376) [0xffffff8000864740] (running)
                                           *1     ??? (kernel + 3123730) [0xffffff800050aa12] (running)
                                           *1     ??? (kernel + 3120134) [0xffffff8000509c06] (running)
                                           *1     ??? (kernel + 3096448) [0xffffff8000503f80] (running)
                                       *2     apfs_vnop_read + 1251 (apfs + 332637) [0xffffff80033eb35d]
                                         *2     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                       *2     apfs_vnop_read + 1176 (apfs + 332562) [0xffffff80033eb312]
                                         *2     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                           *2     IORWLockUnlock + 365 (kernel + 1745341) [0xffffff80003ba1bd]
                                             *2     lck_rw_clear_promotion + 98 (kernel + 595906) [0xffffff80002a17c2] (running)
                                       *2     apfs_vnop_read + 1128 (apfs + 332514) [0xffffff80033eb2e2]
                                         *2     update_atime + 145 (apfs + 779536) [0xffffff8003458510] (running)
                                       *2     apfs_vnop_read + 1109 (apfs + 332495) [0xffffff80033eb2cf]
                                         *2     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                       *2     apfs_vnop_read + 1104 (apfs + 332490) [0xffffff80033eb2ca] (running)
                                       *2     apfs_vnop_read + 1006 (apfs + 332392) [0xffffff80033eb268]
                                         *2     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                           *1     IORWLockUnlock + 385 (kernel + 1745361) [0xffffff80003ba1d1] (running)
                                           *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                       *1     APFSOSNumberAtomic::addValue(long long) + 0 (apfs + 233790) [0xffffff80033d313e] (running)
                                       *1     decmpfs_read_compressed + 0 (kernel + 3520736) [0xffffff800056b8e0] (running)
                                       *1     cluster_read + 0 (kernel + 3119664) [0xffffff8000509a30] (running)
                                     *1     ??? (kernel + 3363867) [0xffffff800054541b] (running)
                                     *1     ??? (kernel + 3363096) [0xffffff8000545118]
                                       *1     mac_vnode_check_read + 123 (kernel + 8874731) [0xffffff8000a86aeb] (running)
                                     *1     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                 *5     read_nocancel + 67 (kernel + 6549859) [0xffffff800084f163]
                                   *2     ??? (kernel + 6550102) [0xffffff800084f256]
                                     *1     ??? (kernel + 6156953) [0xffffff80007ef299] (running)
                                     *1     ??? (kernel + 6156928) [0xffffff80007ef280] (running)
                                   *1     ??? (kernel + 6550235) [0xffffff800084f2db] (running)
                                   *1     ??? (kernel + 6550208) [0xffffff800084f2c0]
                                     *1     lck_mtx_unlock_slow + 169 (kernel + 1752185) [0xffffff80003bbc79] (running)
                                   *1     lck_mtx_lock_spin_always + 6 (kernel + 1757702) [0xffffff80003bd206] (running)
                                 *1     ??? (kernel + 6550225) [0xffffff800084f2d1] (running)
                                 *1     ??? (kernel + 6156560) [0xffffff80007ef110] (running)
                               *1     unix_syscall64 + 528 (kernel + 7539952) [0xffffff8000940cf0]
                                 *1     kauth_cred_uthread_update + 129 (kernel + 6136401) [0xffffff80007ea251] (running)
                               *1     unix_syscall64 + 108 (kernel + 7539532) [0xffffff8000940b4c]
                                 *1     ??? (kernel + 912367) [0xffffff80002eebef] (running)
                               *1     read + 1 (kernel + 6549729) [0xffffff800084f0e1] (running)
                             *7     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                             *6     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                             *4     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                               *4     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                             *1     unix_syscall64 + 0 (kernel + 7539424) [0xffffff8000940ae0] (running)
                            8     Security::UnixPlusPlus::FileDesc::read(void*, unsigned long) + 75 (Security + 402997) [0x7fff2231b635]
                              5     secLogObjForScope + 83 (Security + 2861155) [0x7fff22573863]
                                5     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                                  1     __CFStringCreateImmutableFunnel3 + 1170 (CoreFoundation + 12818) [0x7fff204ad212] (running)
                                  1     __CFStringCreateImmutableFunnel3 + 94 (CoreFoundation + 11742) [0x7fff204acdde]
                                    1     _CFGetTSDCreateIfNeeded + 28 (CoreFoundation + 20042) [0x7fff204aee4a]
                                      1     __CFTSDGetTable + 15 (CoreFoundation + 20128) [0x7fff204aeea0] (running)
                                  1     DYLD-STUB$$_platform_memmove + 0 (libsystem_platform.dylib + 30438) [0x7fff2047b6e6] (running)
                                  1     DYLD-STUB$$sigvec__ + 0 (libsystem_c.dylib + 528220) [0x7fff20387f5c] (running)
                                  1     __memmove_chk + 0 (libsystem_c.dylib + 516580) [0x7fff203851e4] (running)
                              2     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                                2     secLogObjForCFScope + 42 (Security + 2860691) [0x7fff22573693]
                                  2     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e]
                                   *1     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                                     *1     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                                       *1     ulock_wait + 68 (kernel + 6583012) [0xffffff80008572e4]
                                         *1     ulock_wait2 + 2180 (kernel + 6585204) [0xffffff8000857b74]
                                           *1     thread_handoff_parameter + 9 (kernel + 714057) [0xffffff80002be549]
                                             *1     ??? (kernel + 714292) [0xffffff80002be634] (running, blocked by turnstile waiting for checkCSInfoObserveCPU [42412] [unique pid 141876] thread 0x849d4f)
                                   *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                              1     secLogObjForScope + 42 (Security + 2861114) [0x7fff2257383a]
                                1     pthread_mutex_unlock + 90 (libsystem_pthread.dylib + 8840) [0x7fff2042e288] (running)
                            3     read + 10 (libsystem_kernel.dylib + 7486) [0x7fff203fdd3e] (running)
                            2     Security::UnixPlusPlus::FileDesc::read(void*, unsigned long) + 195 (Security + 403117) [0x7fff2231b6ad] (running)
                            1     Security::UnixPlusPlus::FileDesc::read(void*, unsigned long) + 38 (Security + 402960) [0x7fff2231b610]
                             *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                            1     Security::UnixPlusPlus::FileDesc::read(void*, unsigned long) + 38 (Security + 402960) [0x7fff2231b610] (running)
                          695   Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 190 (Security + 1762015) [0x7fff224672df]
                            694   invocation function for block in Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 49 (Security + 1763116) [0x7fff2246772c]
                              693   CCDigestUpdate + 47 (libcommonCrypto.dylib + 9362) [0x7fff2a59d492]
                                690   ccdigest_update + 292 (libcorecrypto.dylib + 14469) [0x7fff201bd885]
                                  9     AccelerateCrypto_SHA256_compress_AVX2 + 2290 (libcorecrypto.dylib + 26108) [0x7fff201c05fc] (running)
                                  8     AccelerateCrypto_SHA256_compress_AVX2 + 1219 (libcorecrypto.dylib + 25037) [0x7fff201c01cd] (running)
                                  6     AccelerateCrypto_SHA256_compress_AVX2 + 2303 (libcorecrypto.dylib + 26121) [0x7fff201c0609] (running)
                                  5     AccelerateCrypto_SHA256_compress_AVX2 + 1865 (libcorecrypto.dylib + 25683) [0x7fff201c0453] (running)
                                  5     AccelerateCrypto_SHA256_compress_AVX2 + 1500 (libcorecrypto.dylib + 25318) [0x7fff201c02e6] (running)
                                  5     AccelerateCrypto_SHA256_compress_AVX2 + 43 (libcorecrypto.dylib + 23861) [0x7fff201bfd35]
                                   *5     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                                     *4     user_trap + 201 (kernel + 1790985) [0xffffff80003c5409] (running)
                                     *1     fpnoextflt + 195 (kernel + 1715123) [0xffffff80003b2bb3] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 2095 (libcorecrypto.dylib + 25913) [0x7fff201c0539] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 1976 (libcorecrypto.dylib + 25794) [0x7fff201c04c2] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 1779 (libcorecrypto.dylib + 25597) [0x7fff201c03fd] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 1444 (libcorecrypto.dylib + 25262) [0x7fff201c02ae] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 1377 (libcorecrypto.dylib + 25195) [0x7fff201c026b] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 972 (libcorecrypto.dylib + 24790) [0x7fff201c00d6] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 924 (libcorecrypto.dylib + 24742) [0x7fff201c00a6] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 584 (libcorecrypto.dylib + 24402) [0x7fff201bff52] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 416 (libcorecrypto.dylib + 24234) [0x7fff201bfeaa] (running)
                                  4     AccelerateCrypto_SHA256_compress_AVX2 + 378 (libcorecrypto.dylib + 24196) [0x7fff201bfe84] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 3934 (libcorecrypto.dylib + 27752) [0x7fff201c0c68] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 3923 (libcorecrypto.dylib + 27741) [0x7fff201c0c5d] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 3049 (libcorecrypto.dylib + 26867) [0x7fff201c08f3] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 2918 (libcorecrypto.dylib + 26736) [0x7fff201c0870] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 2778 (libcorecrypto.dylib + 26596) [0x7fff201c07e4] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 2308 (libcorecrypto.dylib + 26126) [0x7fff201c060e] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 2209 (libcorecrypto.dylib + 26027) [0x7fff201c05ab] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 2067 (libcorecrypto.dylib + 25885) [0x7fff201c051d] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1969 (libcorecrypto.dylib + 25787) [0x7fff201c04bb] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1881 (libcorecrypto.dylib + 25699) [0x7fff201c0463] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1841 (libcorecrypto.dylib + 25659) [0x7fff201c043b] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1803 (libcorecrypto.dylib + 25621) [0x7fff201c0415] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1660 (libcorecrypto.dylib + 25478) [0x7fff201c0386] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1579 (libcorecrypto.dylib + 25397) [0x7fff201c0335] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1460 (libcorecrypto.dylib + 25278) [0x7fff201c02be] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1402 (libcorecrypto.dylib + 25220) [0x7fff201c0284] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1364 (libcorecrypto.dylib + 25182) [0x7fff201c025e] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1238 (libcorecrypto.dylib + 25056) [0x7fff201c01e0] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1116 (libcorecrypto.dylib + 24934) [0x7fff201c0166] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 1032 (libcorecrypto.dylib + 24850) [0x7fff201c0112] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 916 (libcorecrypto.dylib + 24734) [0x7fff201c009e] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 781 (libcorecrypto.dylib + 24599) [0x7fff201c0017] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 546 (libcorecrypto.dylib + 24364) [0x7fff201bff2c] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 526 (libcorecrypto.dylib + 24344) [0x7fff201bff18] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 521 (libcorecrypto.dylib + 24339) [0x7fff201bff13] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 406 (libcorecrypto.dylib + 24224) [0x7fff201bfea0] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 318 (libcorecrypto.dylib + 24136) [0x7fff201bfe48] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 296 (libcorecrypto.dylib + 24114) [0x7fff201bfe32] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 280 (libcorecrypto.dylib + 24098) [0x7fff201bfe22] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 267 (libcorecrypto.dylib + 24085) [0x7fff201bfe15] (running)
                                  3     AccelerateCrypto_SHA256_compress_AVX2 + 262 (libcorecrypto.dylib + 24080) [0x7fff201bfe10] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3903 (libcorecrypto.dylib + 27721) [0x7fff201c0c49] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3806 (libcorecrypto.dylib + 27624) [0x7fff201c0be8] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3768 (libcorecrypto.dylib + 27586) [0x7fff201c0bc2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3611 (libcorecrypto.dylib + 27429) [0x7fff201c0b25] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3510 (libcorecrypto.dylib + 27328) [0x7fff201c0ac0] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3499 (libcorecrypto.dylib + 27317) [0x7fff201c0ab5] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3437 (libcorecrypto.dylib + 27255) [0x7fff201c0a77] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3333 (libcorecrypto.dylib + 27151) [0x7fff201c0a0f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3226 (libcorecrypto.dylib + 27044) [0x7fff201c09a4] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 3016 (libcorecrypto.dylib + 26834) [0x7fff201c08d2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2949 (libcorecrypto.dylib + 26767) [0x7fff201c088f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2848 (libcorecrypto.dylib + 26666) [0x7fff201c082a] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2764 (libcorecrypto.dylib + 26582) [0x7fff201c07d6] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2645 (libcorecrypto.dylib + 26463) [0x7fff201c075f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2636 (libcorecrypto.dylib + 26454) [0x7fff201c0756] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2395 (libcorecrypto.dylib + 26213) [0x7fff201c0665] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2348 (libcorecrypto.dylib + 26166) [0x7fff201c0636] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2333 (libcorecrypto.dylib + 26151) [0x7fff201c0627] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2319 (libcorecrypto.dylib + 26137) [0x7fff201c0619] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2260 (libcorecrypto.dylib + 26078) [0x7fff201c05de] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2254 (libcorecrypto.dylib + 26072) [0x7fff201c05d8] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2248 (libcorecrypto.dylib + 26066) [0x7fff201c05d2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2223 (libcorecrypto.dylib + 26041) [0x7fff201c05b9] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2220 (libcorecrypto.dylib + 26038) [0x7fff201c05b6] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2191 (libcorecrypto.dylib + 26009) [0x7fff201c0599] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2174 (libcorecrypto.dylib + 25992) [0x7fff201c0588] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2159 (libcorecrypto.dylib + 25977) [0x7fff201c0579] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2134 (libcorecrypto.dylib + 25952) [0x7fff201c0560] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2131 (libcorecrypto.dylib + 25949) [0x7fff201c055d] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 2090 (libcorecrypto.dylib + 25908) [0x7fff201c0534] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1984 (libcorecrypto.dylib + 25802) [0x7fff201c04ca] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1951 (libcorecrypto.dylib + 25769) [0x7fff201c04a9] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1919 (libcorecrypto.dylib + 25737) [0x7fff201c0489] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1909 (libcorecrypto.dylib + 25727) [0x7fff201c047f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1829 (libcorecrypto.dylib + 25647) [0x7fff201c042f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1776 (libcorecrypto.dylib + 25594) [0x7fff201c03fa] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1764 (libcorecrypto.dylib + 25582) [0x7fff201c03ee] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1710 (libcorecrypto.dylib + 25528) [0x7fff201c03b8] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1668 (libcorecrypto.dylib + 25486) [0x7fff201c038e] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1650 (libcorecrypto.dylib + 25468) [0x7fff201c037c] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1635 (libcorecrypto.dylib + 25453) [0x7fff201c036d] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1596 (libcorecrypto.dylib + 25414) [0x7fff201c0346] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1570 (libcorecrypto.dylib + 25388) [0x7fff201c032c] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1549 (libcorecrypto.dylib + 25367) [0x7fff201c0317] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1518 (libcorecrypto.dylib + 25336) [0x7fff201c02f8] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1510 (libcorecrypto.dylib + 25328) [0x7fff201c02f0] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1495 (libcorecrypto.dylib + 25313) [0x7fff201c02e1] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1476 (libcorecrypto.dylib + 25294) [0x7fff201c02ce] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1428 (libcorecrypto.dylib + 25246) [0x7fff201c029e] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1413 (libcorecrypto.dylib + 25231) [0x7fff201c028f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1397 (libcorecrypto.dylib + 25215) [0x7fff201c027f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1358 (libcorecrypto.dylib + 25176) [0x7fff201c0258] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1356 (libcorecrypto.dylib + 25174) [0x7fff201c0256] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1349 (libcorecrypto.dylib + 25167) [0x7fff201c024f] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1335 (libcorecrypto.dylib + 25153) [0x7fff201c0241] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1320 (libcorecrypto.dylib + 25138) [0x7fff201c0232] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1306 (libcorecrypto.dylib + 25124) [0x7fff201c0224] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1256 (libcorecrypto.dylib + 25074) [0x7fff201c01f2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1215 (libcorecrypto.dylib + 25033) [0x7fff201c01c9] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1206 (libcorecrypto.dylib + 25024) [0x7fff201c01c0] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1187 (libcorecrypto.dylib + 25005) [0x7fff201c01ad] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1178 (libcorecrypto.dylib + 24996) [0x7fff201c01a4] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1153 (libcorecrypto.dylib + 24971) [0x7fff201c018b] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1107 (libcorecrypto.dylib + 24925) [0x7fff201c015d] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1096 (libcorecrypto.dylib + 24914) [0x7fff201c0152] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 1047 (libcorecrypto.dylib + 24865) [0x7fff201c0121] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 986 (libcorecrypto.dylib + 24804) [0x7fff201c00e4] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 975 (libcorecrypto.dylib + 24793) [0x7fff201c00d9] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 963 (libcorecrypto.dylib + 24781) [0x7fff201c00cd] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 954 (libcorecrypto.dylib + 24772) [0x7fff201c00c4] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 936 (libcorecrypto.dylib + 24754) [0x7fff201c00b2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 930 (libcorecrypto.dylib + 24748) [0x7fff201c00ac] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 892 (libcorecrypto.dylib + 24710) [0x7fff201c0086] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 835 (libcorecrypto.dylib + 24653) [0x7fff201c004d] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 797 (libcorecrypto.dylib + 24615) [0x7fff201c0027] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 776 (libcorecrypto.dylib + 24594) [0x7fff201c0012] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 764 (libcorecrypto.dylib + 24582) [0x7fff201c0006] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 728 (libcorecrypto.dylib + 24546) [0x7fff201bffe2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 719 (libcorecrypto.dylib + 24537) [0x7fff201bffd9] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 715 (libcorecrypto.dylib + 24533) [0x7fff201bffd5] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 709 (libcorecrypto.dylib + 24527) [0x7fff201bffcf] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 685 (libcorecrypto.dylib + 24503) [0x7fff201bffb7] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 680 (libcorecrypto.dylib + 24498) [0x7fff201bffb2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 657 (libcorecrypto.dylib + 24475) [0x7fff201bff9b] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 649 (libcorecrypto.dylib + 24467) [0x7fff201bff93] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 641 (libcorecrypto.dylib + 24459) [0x7fff201bff8b] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 609 (libcorecrypto.dylib + 24427) [0x7fff201bff6b] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 587 (libcorecrypto.dylib + 24405) [0x7fff201bff55] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 551 (libcorecrypto.dylib + 24369) [0x7fff201bff31] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 488 (libcorecrypto.dylib + 24306) [0x7fff201bfef2] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 486 (libcorecrypto.dylib + 24304) [0x7fff201bfef0] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 480 (libcorecrypto.dylib + 24298) [0x7fff201bfeea] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 455 (libcorecrypto.dylib + 24273) [0x7fff201bfed1] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 438 (libcorecrypto.dylib + 24256) [0x7fff201bfec0] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 411 (libcorecrypto.dylib + 24229) [0x7fff201bfea5] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 376 (libcorecrypto.dylib + 24194) [0x7fff201bfe82] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 246 (libcorecrypto.dylib + 24064) [0x7fff201bfe00] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 211 (libcorecrypto.dylib + 24029) [0x7fff201bfddd] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 188 (libcorecrypto.dylib + 24006) [0x7fff201bfdc6] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 114 (libcorecrypto.dylib + 23932) [0x7fff201bfd7c] (running)
                                  2     AccelerateCrypto_SHA256_compress_AVX2 + 43 (libcorecrypto.dylib + 23861) [0x7fff201bfd35] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3958 (libcorecrypto.dylib + 27776) [0x7fff201c0c80] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3954 (libcorecrypto.dylib + 27772) [0x7fff201c0c7c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3927 (libcorecrypto.dylib + 27745) [0x7fff201c0c61] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3918 (libcorecrypto.dylib + 27736) [0x7fff201c0c58] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3912 (libcorecrypto.dylib + 27730) [0x7fff201c0c52] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3893 (libcorecrypto.dylib + 27711) [0x7fff201c0c3f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3885 (libcorecrypto.dylib + 27703) [0x7fff201c0c37] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3879 (libcorecrypto.dylib + 27697) [0x7fff201c0c31] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3854 (libcorecrypto.dylib + 27672) [0x7fff201c0c18] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3854 (libcorecrypto.dylib + 27672) [0x7fff201c0c18]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3837 (libcorecrypto.dylib + 27655) [0x7fff201c0c07] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3826 (libcorecrypto.dylib + 27644) [0x7fff201c0bfc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3808 (libcorecrypto.dylib + 27626) [0x7fff201c0bea] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3798 (libcorecrypto.dylib + 27616) [0x7fff201c0be0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3770 (libcorecrypto.dylib + 27588) [0x7fff201c0bc4] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3756 (libcorecrypto.dylib + 27574) [0x7fff201c0bb6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3742 (libcorecrypto.dylib + 27560) [0x7fff201c0ba8]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3722 (libcorecrypto.dylib + 27540) [0x7fff201c0b94] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3713 (libcorecrypto.dylib + 27531) [0x7fff201c0b8b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3695 (libcorecrypto.dylib + 27513) [0x7fff201c0b79] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3689 (libcorecrypto.dylib + 27507) [0x7fff201c0b73] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3689 (libcorecrypto.dylib + 27507) [0x7fff201c0b73]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3681 (libcorecrypto.dylib + 27499) [0x7fff201c0b6b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3675 (libcorecrypto.dylib + 27493) [0x7fff201c0b65] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3670 (libcorecrypto.dylib + 27488) [0x7fff201c0b60] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3661 (libcorecrypto.dylib + 27479) [0x7fff201c0b57] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3627 (libcorecrypto.dylib + 27445) [0x7fff201c0b35] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3621 (libcorecrypto.dylib + 27439) [0x7fff201c0b2f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3600 (libcorecrypto.dylib + 27418) [0x7fff201c0b1a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3594 (libcorecrypto.dylib + 27412) [0x7fff201c0b14] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3586 (libcorecrypto.dylib + 27404) [0x7fff201c0b0c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3569 (libcorecrypto.dylib + 27387) [0x7fff201c0afb] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3552 (libcorecrypto.dylib + 27370) [0x7fff201c0aea] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3523 (libcorecrypto.dylib + 27341) [0x7fff201c0acd] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3494 (libcorecrypto.dylib + 27312) [0x7fff201c0ab0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3469 (libcorecrypto.dylib + 27287) [0x7fff201c0a97] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3457 (libcorecrypto.dylib + 27275) [0x7fff201c0a8b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3429 (libcorecrypto.dylib + 27247) [0x7fff201c0a6f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3423 (libcorecrypto.dylib + 27241) [0x7fff201c0a69] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3415 (libcorecrypto.dylib + 27233) [0x7fff201c0a61] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3412 (libcorecrypto.dylib + 27230) [0x7fff201c0a5e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3401 (libcorecrypto.dylib + 27219) [0x7fff201c0a53] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3381 (libcorecrypto.dylib + 27199) [0x7fff201c0a3f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3353 (libcorecrypto.dylib + 27171) [0x7fff201c0a23]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3327 (libcorecrypto.dylib + 27145) [0x7fff201c0a09] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3306 (libcorecrypto.dylib + 27124) [0x7fff201c09f4] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3300 (libcorecrypto.dylib + 27118) [0x7fff201c09ee] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3292 (libcorecrypto.dylib + 27110) [0x7fff201c09e6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3275 (libcorecrypto.dylib + 27093) [0x7fff201c09d5] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3220 (libcorecrypto.dylib + 27038) [0x7fff201c099e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3218 (libcorecrypto.dylib + 27036) [0x7fff201c099c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3210 (libcorecrypto.dylib + 27028) [0x7fff201c0994] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3207 (libcorecrypto.dylib + 27025) [0x7fff201c0991] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3194 (libcorecrypto.dylib + 27012) [0x7fff201c0984] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3182 (libcorecrypto.dylib + 27000) [0x7fff201c0978] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3154 (libcorecrypto.dylib + 26972) [0x7fff201c095c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3134 (libcorecrypto.dylib + 26952) [0x7fff201c0948] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3083 (libcorecrypto.dylib + 26901) [0x7fff201c0915]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3077 (libcorecrypto.dylib + 26895) [0x7fff201c090f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3049 (libcorecrypto.dylib + 26867) [0x7fff201c08f3]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3044 (libcorecrypto.dylib + 26862) [0x7fff201c08ee] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3032 (libcorecrypto.dylib + 26850) [0x7fff201c08e2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 3020 (libcorecrypto.dylib + 26838) [0x7fff201c08d6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2996 (libcorecrypto.dylib + 26814) [0x7fff201c08be] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2966 (libcorecrypto.dylib + 26784) [0x7fff201c08a0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2928 (libcorecrypto.dylib + 26746) [0x7fff201c087a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2923 (libcorecrypto.dylib + 26741) [0x7fff201c0875] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2921 (libcorecrypto.dylib + 26739) [0x7fff201c0873] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2907 (libcorecrypto.dylib + 26725) [0x7fff201c0865] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2901 (libcorecrypto.dylib + 26719) [0x7fff201c085f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2882 (libcorecrypto.dylib + 26700) [0x7fff201c084c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2873 (libcorecrypto.dylib + 26691) [0x7fff201c0843] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2862 (libcorecrypto.dylib + 26680) [0x7fff201c0838] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2854 (libcorecrypto.dylib + 26672) [0x7fff201c0830] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2836 (libcorecrypto.dylib + 26654) [0x7fff201c081e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2823 (libcorecrypto.dylib + 26641) [0x7fff201c0811] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2820 (libcorecrypto.dylib + 26638) [0x7fff201c080e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2817 (libcorecrypto.dylib + 26635) [0x7fff201c080b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2806 (libcorecrypto.dylib + 26624) [0x7fff201c0800] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2798 (libcorecrypto.dylib + 26616) [0x7fff201c07f8] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2792 (libcorecrypto.dylib + 26610) [0x7fff201c07f2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2781 (libcorecrypto.dylib + 26599) [0x7fff201c07e7] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2759 (libcorecrypto.dylib + 26577) [0x7fff201c07d1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2735 (libcorecrypto.dylib + 26553) [0x7fff201c07b9] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2733 (libcorecrypto.dylib + 26551) [0x7fff201c07b7] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2725 (libcorecrypto.dylib + 26543) [0x7fff201c07af] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2711 (libcorecrypto.dylib + 26529) [0x7fff201c07a1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2683 (libcorecrypto.dylib + 26501) [0x7fff201c0785] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2681 (libcorecrypto.dylib + 26499) [0x7fff201c0783] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2669 (libcorecrypto.dylib + 26487) [0x7fff201c0777] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2664 (libcorecrypto.dylib + 26482) [0x7fff201c0772] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2639 (libcorecrypto.dylib + 26457) [0x7fff201c0759] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2632 (libcorecrypto.dylib + 26450) [0x7fff201c0752] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2630 (libcorecrypto.dylib + 26448) [0x7fff201c0750] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2625 (libcorecrypto.dylib + 26443) [0x7fff201c074b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2608 (libcorecrypto.dylib + 26426) [0x7fff201c073a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2600 (libcorecrypto.dylib + 26418) [0x7fff201c0732] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2566 (libcorecrypto.dylib + 26384) [0x7fff201c0710] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2540 (libcorecrypto.dylib + 26358) [0x7fff201c06f6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2537 (libcorecrypto.dylib + 26355) [0x7fff201c06f3] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2471 (libcorecrypto.dylib + 26289) [0x7fff201c06b1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2460 (libcorecrypto.dylib + 26278) [0x7fff201c06a6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2454 (libcorecrypto.dylib + 26272) [0x7fff201c06a0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2451 (libcorecrypto.dylib + 26269) [0x7fff201c069d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2409 (libcorecrypto.dylib + 26227) [0x7fff201c0673] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2401 (libcorecrypto.dylib + 26219) [0x7fff201c066b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2393 (libcorecrypto.dylib + 26211) [0x7fff201c0663] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2338 (libcorecrypto.dylib + 26156) [0x7fff201c062c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2299 (libcorecrypto.dylib + 26117) [0x7fff201c0605]
                                   *1     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                                     *1     user_trap + 201 (kernel + 1790985) [0xffffff80003c5409] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2286 (libcorecrypto.dylib + 26104) [0x7fff201c05f8] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2257 (libcorecrypto.dylib + 26075) [0x7fff201c05db] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2254 (libcorecrypto.dylib + 26072) [0x7fff201c05d8]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2243 (libcorecrypto.dylib + 26061) [0x7fff201c05cd] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2197 (libcorecrypto.dylib + 26015) [0x7fff201c059f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2194 (libcorecrypto.dylib + 26012) [0x7fff201c059c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2185 (libcorecrypto.dylib + 26003) [0x7fff201c0593] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2183 (libcorecrypto.dylib + 26001) [0x7fff201c0591] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2170 (libcorecrypto.dylib + 25988) [0x7fff201c0584] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2168 (libcorecrypto.dylib + 25986) [0x7fff201c0582] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2155 (libcorecrypto.dylib + 25973) [0x7fff201c0575] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2153 (libcorecrypto.dylib + 25971) [0x7fff201c0573] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2136 (libcorecrypto.dylib + 25954) [0x7fff201c0562] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2131 (libcorecrypto.dylib + 25949) [0x7fff201c055d]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2105 (libcorecrypto.dylib + 25923) [0x7fff201c0543]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2105 (libcorecrypto.dylib + 25923) [0x7fff201c0543] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2099 (libcorecrypto.dylib + 25917) [0x7fff201c053d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2084 (libcorecrypto.dylib + 25902) [0x7fff201c052e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2078 (libcorecrypto.dylib + 25896) [0x7fff201c0528] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2075 (libcorecrypto.dylib + 25893) [0x7fff201c0525] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2070 (libcorecrypto.dylib + 25888) [0x7fff201c0520] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2059 (libcorecrypto.dylib + 25877) [0x7fff201c0515] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2056 (libcorecrypto.dylib + 25874) [0x7fff201c0512] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2049 (libcorecrypto.dylib + 25867) [0x7fff201c050b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2038 (libcorecrypto.dylib + 25856) [0x7fff201c0500] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2008 (libcorecrypto.dylib + 25826) [0x7fff201c04e2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 2000 (libcorecrypto.dylib + 25818) [0x7fff201c04da] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1991 (libcorecrypto.dylib + 25809) [0x7fff201c04d1]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1984 (libcorecrypto.dylib + 25802) [0x7fff201c04ca]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1957 (libcorecrypto.dylib + 25775) [0x7fff201c04af] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1942 (libcorecrypto.dylib + 25760) [0x7fff201c04a0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1937 (libcorecrypto.dylib + 25755) [0x7fff201c049b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1934 (libcorecrypto.dylib + 25752) [0x7fff201c0498] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1924 (libcorecrypto.dylib + 25742) [0x7fff201c048e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1892 (libcorecrypto.dylib + 25710) [0x7fff201c046e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1873 (libcorecrypto.dylib + 25691) [0x7fff201c045b]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1832 (libcorecrypto.dylib + 25650) [0x7fff201c0432] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1796 (libcorecrypto.dylib + 25614) [0x7fff201c040e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1793 (libcorecrypto.dylib + 25611) [0x7fff201c040b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1790 (libcorecrypto.dylib + 25608) [0x7fff201c0408] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1786 (libcorecrypto.dylib + 25604) [0x7fff201c0404] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1786 (libcorecrypto.dylib + 25604) [0x7fff201c0404]
                                   *1     return_from_trap + 203 (kernel + 141819) [0xffffff80002329fb]
                                     *1     ast_taken_user + 860 (kernel + 481164) [0xffffff800028578c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1784 (libcorecrypto.dylib + 25602) [0x7fff201c0402] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1769 (libcorecrypto.dylib + 25587) [0x7fff201c03f3] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1759 (libcorecrypto.dylib + 25577) [0x7fff201c03e9] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1751 (libcorecrypto.dylib + 25569) [0x7fff201c03e1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1733 (libcorecrypto.dylib + 25551) [0x7fff201c03cf] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1725 (libcorecrypto.dylib + 25543) [0x7fff201c03c7] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1719 (libcorecrypto.dylib + 25537) [0x7fff201c03c1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1688 (libcorecrypto.dylib + 25506) [0x7fff201c03a2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1663 (libcorecrypto.dylib + 25481) [0x7fff201c0389] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1656 (libcorecrypto.dylib + 25474) [0x7fff201c0382] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1653 (libcorecrypto.dylib + 25471) [0x7fff201c037f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1645 (libcorecrypto.dylib + 25463) [0x7fff201c0377] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1643 (libcorecrypto.dylib + 25461) [0x7fff201c0375] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1643 (libcorecrypto.dylib + 25461) [0x7fff201c0375]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1641 (libcorecrypto.dylib + 25459) [0x7fff201c0373] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1638 (libcorecrypto.dylib + 25456) [0x7fff201c0370] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1627 (libcorecrypto.dylib + 25445) [0x7fff201c0365] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1625 (libcorecrypto.dylib + 25443) [0x7fff201c0363] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1622 (libcorecrypto.dylib + 25440) [0x7fff201c0360] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1605 (libcorecrypto.dylib + 25423) [0x7fff201c034f]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1599 (libcorecrypto.dylib + 25417) [0x7fff201c0349] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1588 (libcorecrypto.dylib + 25406) [0x7fff201c033e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1585 (libcorecrypto.dylib + 25403) [0x7fff201c033b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1564 (libcorecrypto.dylib + 25382) [0x7fff201c0326] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1560 (libcorecrypto.dylib + 25378) [0x7fff201c0322] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1522 (libcorecrypto.dylib + 25340) [0x7fff201c02fc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1513 (libcorecrypto.dylib + 25331) [0x7fff201c02f3]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1513 (libcorecrypto.dylib + 25331) [0x7fff201c02f3] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1503 (libcorecrypto.dylib + 25321) [0x7fff201c02e9] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1490 (libcorecrypto.dylib + 25308) [0x7fff201c02dc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1487 (libcorecrypto.dylib + 25305) [0x7fff201c02d9] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1476 (libcorecrypto.dylib + 25294) [0x7fff201c02ce]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1471 (libcorecrypto.dylib + 25289) [0x7fff201c02c9] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1462 (libcorecrypto.dylib + 25280) [0x7fff201c02c0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1437 (libcorecrypto.dylib + 25255) [0x7fff201c02a7] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1419 (libcorecrypto.dylib + 25237) [0x7fff201c0295] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1397 (libcorecrypto.dylib + 25215) [0x7fff201c027f]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1386 (libcorecrypto.dylib + 25204) [0x7fff201c0274] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1372 (libcorecrypto.dylib + 25190) [0x7fff201c0266] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1351 (libcorecrypto.dylib + 25169) [0x7fff201c0251] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1346 (libcorecrypto.dylib + 25164) [0x7fff201c024c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1340 (libcorecrypto.dylib + 25158) [0x7fff201c0246] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1333 (libcorecrypto.dylib + 25151) [0x7fff201c023f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1324 (libcorecrypto.dylib + 25142) [0x7fff201c0236] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1312 (libcorecrypto.dylib + 25130) [0x7fff201c022a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1272 (libcorecrypto.dylib + 25090) [0x7fff201c0202] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1261 (libcorecrypto.dylib + 25079) [0x7fff201c01f7] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1250 (libcorecrypto.dylib + 25068) [0x7fff201c01ec] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1244 (libcorecrypto.dylib + 25062) [0x7fff201c01e6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1232 (libcorecrypto.dylib + 25050) [0x7fff201c01da] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1209 (libcorecrypto.dylib + 25027) [0x7fff201c01c3] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1202 (libcorecrypto.dylib + 25020) [0x7fff201c01bc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1198 (libcorecrypto.dylib + 25016) [0x7fff201c01b8] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1192 (libcorecrypto.dylib + 25010) [0x7fff201c01b2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1184 (libcorecrypto.dylib + 25002) [0x7fff201c01aa] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1173 (libcorecrypto.dylib + 24991) [0x7fff201c019f] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1170 (libcorecrypto.dylib + 24988) [0x7fff201c019c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1164 (libcorecrypto.dylib + 24982) [0x7fff201c0196] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1162 (libcorecrypto.dylib + 24980) [0x7fff201c0194] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1142 (libcorecrypto.dylib + 24960) [0x7fff201c0180] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1139 (libcorecrypto.dylib + 24957) [0x7fff201c017d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1131 (libcorecrypto.dylib + 24949) [0x7fff201c0175] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1119 (libcorecrypto.dylib + 24937) [0x7fff201c0169] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1110 (libcorecrypto.dylib + 24928) [0x7fff201c0160] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1105 (libcorecrypto.dylib + 24923) [0x7fff201c015b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1101 (libcorecrypto.dylib + 24919) [0x7fff201c0157] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1086 (libcorecrypto.dylib + 24904) [0x7fff201c0148] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1084 (libcorecrypto.dylib + 24902) [0x7fff201c0146] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1081 (libcorecrypto.dylib + 24899) [0x7fff201c0143] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1071 (libcorecrypto.dylib + 24889) [0x7fff201c0139] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1069 (libcorecrypto.dylib + 24887) [0x7fff201c0137] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1066 (libcorecrypto.dylib + 24884) [0x7fff201c0134] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1063 (libcorecrypto.dylib + 24881) [0x7fff201c0131] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1057 (libcorecrypto.dylib + 24875) [0x7fff201c012b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1052 (libcorecrypto.dylib + 24870) [0x7fff201c0126] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1050 (libcorecrypto.dylib + 24868) [0x7fff201c0124] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1043 (libcorecrypto.dylib + 24861) [0x7fff201c011d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1037 (libcorecrypto.dylib + 24855) [0x7fff201c0117] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1034 (libcorecrypto.dylib + 24852) [0x7fff201c0114] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1032 (libcorecrypto.dylib + 24850) [0x7fff201c0112]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1027 (libcorecrypto.dylib + 24845) [0x7fff201c010d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1021 (libcorecrypto.dylib + 24839) [0x7fff201c0107] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1018 (libcorecrypto.dylib + 24836) [0x7fff201c0104] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1015 (libcorecrypto.dylib + 24833) [0x7fff201c0101] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1011 (libcorecrypto.dylib + 24829) [0x7fff201c00fd] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1000 (libcorecrypto.dylib + 24818) [0x7fff201c00f2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 983 (libcorecrypto.dylib + 24801) [0x7fff201c00e1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 967 (libcorecrypto.dylib + 24785) [0x7fff201c00d1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 965 (libcorecrypto.dylib + 24783) [0x7fff201c00cf] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 960 (libcorecrypto.dylib + 24778) [0x7fff201c00ca] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 949 (libcorecrypto.dylib + 24767) [0x7fff201c00bf] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 944 (libcorecrypto.dylib + 24762) [0x7fff201c00ba] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 938 (libcorecrypto.dylib + 24756) [0x7fff201c00b4] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 918 (libcorecrypto.dylib + 24736) [0x7fff201c00a0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 913 (libcorecrypto.dylib + 24731) [0x7fff201c009b]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 907 (libcorecrypto.dylib + 24725) [0x7fff201c0095] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 900 (libcorecrypto.dylib + 24718) [0x7fff201c008e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 873 (libcorecrypto.dylib + 24691) [0x7fff201c0073] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 850 (libcorecrypto.dylib + 24668) [0x7fff201c005c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 843 (libcorecrypto.dylib + 24661) [0x7fff201c0055] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 840 (libcorecrypto.dylib + 24658) [0x7fff201c0052] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 833 (libcorecrypto.dylib + 24651) [0x7fff201c004b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 828 (libcorecrypto.dylib + 24646) [0x7fff201c0046] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 813 (libcorecrypto.dylib + 24631) [0x7fff201c0037]
                                   *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                     *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 813 (libcorecrypto.dylib + 24631) [0x7fff201c0037] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 781 (libcorecrypto.dylib + 24599) [0x7fff201c0017]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 767 (libcorecrypto.dylib + 24585) [0x7fff201c0009] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 748 (libcorecrypto.dylib + 24566) [0x7fff201bfff6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 748 (libcorecrypto.dylib + 24566) [0x7fff201bfff6]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 745 (libcorecrypto.dylib + 24563) [0x7fff201bfff3] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 734 (libcorecrypto.dylib + 24552) [0x7fff201bffe8] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 722 (libcorecrypto.dylib + 24540) [0x7fff201bffdc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 706 (libcorecrypto.dylib + 24524) [0x7fff201bffcc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 702 (libcorecrypto.dylib + 24520) [0x7fff201bffc8] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 700 (libcorecrypto.dylib + 24518) [0x7fff201bffc6] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 692 (libcorecrypto.dylib + 24510) [0x7fff201bffbe] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 688 (libcorecrypto.dylib + 24506) [0x7fff201bffba] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 675 (libcorecrypto.dylib + 24493) [0x7fff201bffad] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 664 (libcorecrypto.dylib + 24482) [0x7fff201bffa2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 612 (libcorecrypto.dylib + 24430) [0x7fff201bff6e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 598 (libcorecrypto.dylib + 24416) [0x7fff201bff60] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 579 (libcorecrypto.dylib + 24397) [0x7fff201bff4d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 576 (libcorecrypto.dylib + 24394) [0x7fff201bff4a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 572 (libcorecrypto.dylib + 24390) [0x7fff201bff46] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 557 (libcorecrypto.dylib + 24375) [0x7fff201bff37] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 554 (libcorecrypto.dylib + 24372) [0x7fff201bff34]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 543 (libcorecrypto.dylib + 24361) [0x7fff201bff29] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 532 (libcorecrypto.dylib + 24350) [0x7fff201bff1e] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 521 (libcorecrypto.dylib + 24339) [0x7fff201bff13]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 515 (libcorecrypto.dylib + 24333) [0x7fff201bff0d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 512 (libcorecrypto.dylib + 24330) [0x7fff201bff0a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 506 (libcorecrypto.dylib + 24324) [0x7fff201bff04] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 501 (libcorecrypto.dylib + 24319) [0x7fff201bfeff]
                                   *1     return_from_trap + 203 (kernel + 141819) [0xffffff80002329fb]
                                     *1     ast_taken_user + 96 (kernel + 480400) [0xffffff8000285490] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 495 (libcorecrypto.dylib + 24313) [0x7fff201bfef9] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 491 (libcorecrypto.dylib + 24309) [0x7fff201bfef5] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 470 (libcorecrypto.dylib + 24288) [0x7fff201bfee0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 451 (libcorecrypto.dylib + 24269) [0x7fff201bfecd] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 429 (libcorecrypto.dylib + 24247) [0x7fff201bfeb7] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 403 (libcorecrypto.dylib + 24221) [0x7fff201bfe9d] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 399 (libcorecrypto.dylib + 24217) [0x7fff201bfe99]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 397 (libcorecrypto.dylib + 24215) [0x7fff201bfe97] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 394 (libcorecrypto.dylib + 24212) [0x7fff201bfe94] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 392 (libcorecrypto.dylib + 24210) [0x7fff201bfe92] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 366 (libcorecrypto.dylib + 24184) [0x7fff201bfe78] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 360 (libcorecrypto.dylib + 24178) [0x7fff201bfe72] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 353 (libcorecrypto.dylib + 24171) [0x7fff201bfe6b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 344 (libcorecrypto.dylib + 24162) [0x7fff201bfe62] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 329 (libcorecrypto.dylib + 24147) [0x7fff201bfe53] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 321 (libcorecrypto.dylib + 24139) [0x7fff201bfe4b] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 285 (libcorecrypto.dylib + 24103) [0x7fff201bfe27] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 272 (libcorecrypto.dylib + 24090) [0x7fff201bfe1a] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 240 (libcorecrypto.dylib + 24058) [0x7fff201bfdfa] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 228 (libcorecrypto.dylib + 24046) [0x7fff201bfdee] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 216 (libcorecrypto.dylib + 24034) [0x7fff201bfde2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 214 (libcorecrypto.dylib + 24032) [0x7fff201bfde0] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 199 (libcorecrypto.dylib + 24017) [0x7fff201bfdd1] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 194 (libcorecrypto.dylib + 24012) [0x7fff201bfdcc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 177 (libcorecrypto.dylib + 23995) [0x7fff201bfdbb] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 161 (libcorecrypto.dylib + 23979) [0x7fff201bfdab] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 155 (libcorecrypto.dylib + 23973) [0x7fff201bfda5] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 149 (libcorecrypto.dylib + 23967) [0x7fff201bfd9f]
                                   *1     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                                     *1     fpnoextflt + 204 (kernel + 1715132) [0xffffff80003b2bbc] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 146 (libcorecrypto.dylib + 23964) [0x7fff201bfd9c] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 134 (libcorecrypto.dylib + 23952) [0x7fff201bfd90] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 126 (libcorecrypto.dylib + 23944) [0x7fff201bfd88]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 114 (libcorecrypto.dylib + 23932) [0x7fff201bfd7c]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                  1     AccelerateCrypto_SHA256_compress + 11 (libcorecrypto.dylib + 23786) [0x7fff201bfcea] (running)
                                1     AccelerateCrypto_SHA256 + 0 (libcorecrypto.dylib + 23765) [0x7fff201bfcd5] (running)
                                1     ccdigest_update + 163 (libcorecrypto.dylib + 14340) [0x7fff201bd804]
                                  1     _platform_memmove$VARIANT$Haswell + 77 (libsystem_platform.dylib + 4173) [0x7fff2047504d] (running)
                                1     ccdigest_update + 27 (libcorecrypto.dylib + 14204) [0x7fff201bd77c] (running)
                              1     CCDigestUpdate + 33 (libcommonCrypto.dylib + 9348) [0x7fff2a59d484] (running)
                            1     CCDigestUpdate + 0 (libcommonCrypto.dylib + 9315) [0x7fff2a59d463] (running)
                          24    Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 90 (Security + 1761915) [0x7fff2246727b]
                            22    fstat$INODE64 + 10 (libsystem_kernel.dylib + 7130) [0x7fff203fdbda]
                             *18    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                               *18    unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                                 *9     ??? (kernel + 6184866) [0xffffff80007f5fa2]
                                   *8     vn_stat_noauth + 223 (kernel + 3373711) [0xffffff8000547a8f]
                                     *8     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                       *7     apfs_vnop_getattr + 810 (apfs + 307822) [0xffffff80033e526e]
                                         *3     apfs_pack_vap_common + 895 (apfs + 310114) [0xffffff80033e5b62]
                                           *3     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                             *2     lookup_jobj_in_snap + 55 (apfs + 666830) [0xffffff800343ccce]
                                               *2     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                 *2     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                   *2     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                                             *1     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                               *1     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                 *1     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                                   *1     btree_node_key_ptr + 1 (apfs + 896590) [0xffffff8003474e4e] (running)
                                         *1     apfs_timestamp_to_timespec + 1 (apfs + 1007740) [0xffffff800349007c] (running)
                                         *1     fs_get_dstream + 1 (apfs + 706483) [0xffffff80034467b3] (running)
                                         *1     apfs_pack_vap_common + 1555 (apfs + 310774) [0xffffff80033e5df6]
                                           *1     apfs_timestamp_to_timespec + 26 (apfs + 1007765) [0xffffff8003490095]
                                             *1     vfs_context_proc + 70 (kernel + 3413478) [0xffffff80005515e6]
                                               *1     ??? (kernel + 912400) [0xffffff80002eec10] (running)
                                         *1     apfs_pack_vap_common + 371 (apfs + 309590) [0xffffff80033e5956]
                                           *1     decmpfs_cnode_get_vnode_state + 7 (kernel + 3511463) [0xffffff80005694a7] (running)
                                       *1     apfs_vnop_getattr + 1931 (apfs + 308943) [0xffffff80033e56cf]
                                         *1     apfs_set_common_devt + 340 (apfs + 313147) [0xffffff80033e673b] (running)
                                   *1     vn_stat_noauth + 256 (kernel + 3373744) [0xffffff8000547ab0]
                                     *1     mac_vnode_check_getattr + 43 (kernel + 8864571) [0xffffff8000a8433b] (running)
                                 *2     ??? (kernel + 6184787) [0xffffff80007f5f53]
                                   *2     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                 *1     ??? (kernel + 6184552) [0xffffff80007f5e68]
                                   *1     ??? (kernel + 1741286) [0xffffff80003b91e6] (running)
                                 *1     ??? (kernel + 6183297) [0xffffff80007f5981]
                                   *1     vnode_getiocount + 452 (kernel + 3170964) [0xffffff8000516294] (running)
                                 *1     ??? (kernel + 6183199) [0xffffff80007f591f] (running)
                                 *1     ??? (kernel + 6183154) [0xffffff80007f58f2] (running)
                                 *1     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                 *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                 *1     __bzero + 6 (kernel + 4342) [0xffffff80001010f6] (running)
                             *3     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                             *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                            1     DYLD-STUB$$fstat$INODE64 + 0 (Security + 2891968) [0x7fff2257b0c0] (running)
                            1     fstat$INODE64 + 10 (libsystem_kernel.dylib + 7130) [0x7fff203fdbda] (running)
                          3     Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 218 (Security + 1762043) [0x7fff224672fb]
                            1     free_medium + 1458 (libsystem_malloc.dylib + 39178) [0x7fff2026190a] (running)
                            1     free_medium + 1124 (libsystem_malloc.dylib + 38844) [0x7fff202617bc]
                              1     medium_free_list_remove_ptr_no_clear + 627 (libsystem_malloc.dylib + 44005) [0x7fff20262be5] (running)
                            1     free + 110 (libsystem_malloc.dylib + 8467) [0x7fff2025a113] (running)
                          2     Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 116 (Security + 1761941) [0x7fff22467295]
                            2     _malloc_zone_valloc + 118 (libsystem_malloc.dylib + 115128) [0x7fff202741b8]
                              1     medium_memalign + 60 (libsystem_malloc.dylib + 62549) [0x7fff20267455]
                                1     medium_malloc_should_clear + 254 (libsystem_malloc.dylib + 34964) [0x7fff20260894]
                                  1     medium_malloc_from_free_list + 254 (libsystem_malloc.dylib + 36931) [0x7fff20261043] (running)
                              1     medium_malloc_should_clear + 0 (libsystem_malloc.dylib + 34710) [0x7fff20260796] (running)
                          1     Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 166 (Security + 1761991) [0x7fff224672c7] (running)
                          1     Security::CodeSigning::scanFileData(Security::UnixPlusPlus::FileDesc, unsigned long, void (void const*, unsigned long) block_pointer) + 163 (Security + 1761988) [0x7fff224672c4] (running)
                          1     Security::UnixPlusPlus::FileDesc::read(void*, unsigned long) + 0 (Security + 402922) [0x7fff2231b5ea] (running)
                        23    Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 680 (Security + 1762878) [0x7fff2246763e]
                          11    invocation function for block in Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 33 (Security + 1711952) [0x7fff2245af50]
                            9     Security::DynamicHash::verify(unsigned char const*) + 88 (Security + 1700748) [0x7fff2245838c]
                              9     CCDigestFinal + 40 (libcommonCrypto.dylib + 9413) [0x7fff2a59d4c5]
                                4     ccdigest_final_64be + 305 (libcorecrypto.dylib + 21605) [0x7fff201bf465]
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 4087 (libcorecrypto.dylib + 27905) [0x7fff201c0d01] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 1688 (libcorecrypto.dylib + 25506) [0x7fff201c03a2] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 335 (libcorecrypto.dylib + 24153) [0x7fff201bfe59] (running)
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 65 (libcorecrypto.dylib + 23883) [0x7fff201bfd4b] (running)
                                1     ccdigest_final_64be + 360 (libcorecrypto.dylib + 21660) [0x7fff201bf49c] (running)
                                1     ccdigest_final_64be + 258 (libcorecrypto.dylib + 21558) [0x7fff201bf436] (running)
                                1     ccdigest_final_64be + 246 (libcorecrypto.dylib + 21546) [0x7fff201bf42a] (running)
                                1     ccdigest_final_64be + 207 (libcorecrypto.dylib + 21507) [0x7fff201bf403]
                                  1     AccelerateCrypto_SHA256_compress_AVX2 + 65 (libcorecrypto.dylib + 23883) [0x7fff201bfd4b] (running)
                                1     cc_clear + 0 (libcorecrypto.dylib + 9103) [0x7fff201bc38f] (running)
                            1     _platform_memcmp + 0 (libsystem_platform.dylib + 6816) [0x7fff20475aa0] (running)
                            1     ___chkstk_darwin + 0 (libsystem_pthread.dylib + 9388) [0x7fff2042e4ac]
                             *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                          11    invocation function for block in Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 22 (Security + 1711941) [0x7fff2245af45]
                            9     Security::CodeSigning::ResourceSeal::hash(unsigned int) const + 52 (Security + 1883426) [0x7fff22484d22]
                              7     Security::CodeSigning::ResourceBuilder::hashName(unsigned int) + 119 (Security + 1882761) [0x7fff22484a89]
                                7     snprintf + 156 (libsystem_c.dylib + 265327) [0x7fff20347c6f]
                                  7     vsnprintf_l + 41 (libsystem_c.dylib + 326306) [0x7fff20356aa2]
                                    7     _vsnprintf + 411 (libsystem_c.dylib + 326213) [0x7fff20356a45]
                                      6     __v2printf + 469 (libsystem_c.dylib + 432501) [0x7fff20370975]
                                        1     __ultoa + 1 (libsystem_c.dylib + 288151) [0x7fff2034d597]
                                         *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                        1     __vfprintf + 8731 (libsystem_c.dylib + 279277) [0x7fff2034b2ed] (running)
                                        1     __vfprintf + 133 (libsystem_c.dylib + 270679) [0x7fff20349157] (running)
                                        1     __vfprintf + 129 (libsystem_c.dylib + 270675) [0x7fff20349153] (running)
                                        1     __sfvwrite + 0 (libsystem_c.dylib + 245582) [0x7fff20342f4e] (running)
                                        1     free + 0 (libsystem_malloc.dylib + 8357) [0x7fff2025a0a5] (running)
                                      1     __vfprintf + 0 (libsystem_c.dylib + 270546) [0x7fff203490d2] (running)
                              2     Security::CodeSigning::ResourceBuilder::hashName(unsigned int) + 130 (Security + 1882772) [0x7fff22484a94]
                                1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<std::nullptr_t>(char const*) + 94 (Security + 1548750) [0x7fff224331ce] (running)
                                1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<std::nullptr_t>(char const*) + 25 (Security + 1548681) [0x7fff22433189]
                                  1     _platform_strlen + 14 (libsystem_platform.dylib + 5454) [0x7fff2047554e]
                                   *1     hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
                                     *1     fpnoextflt + 195 (kernel + 1715123) [0xffffff80003b2bb3] (running)
                            1     Security::CodeSigning::ResourceSeal::hash(unsigned int) const + 55 (Security + 1883429) [0x7fff22484d25] (running)
                            1     CFDataGetBytePtr + 0 (CoreFoundation + 116953) [0x7fff204c68d9] (running)
                          1     Security::DynamicHash::verify(unsigned char const*) + 0 (Security + 1700660) [0x7fff22458334] (running)
                        7     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 115 (Security + 1762313) [0x7fff22467409]
                          6     Security::CodeSigning::CodeDirectory::hashFor(unsigned int) + 155 (Security + 1761591) [0x7fff22467137]
                            6     Security::CCHashInstance::CCHashInstance(unsigned int, unsigned long) + 37 (Security + 2787479) [0x7fff22561897]
                              5     CCDigestCreate + 20 (libcommonCrypto.dylib + 9165) [0x7fff2a59d3cd]
                                5     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                  4     szone_malloc_should_clear + 109 (libsystem_malloc.dylib + 10210) [0x7fff2025a7e2]
                                    2     small_malloc_should_clear + 259 (libsystem_malloc.dylib + 10695) [0x7fff2025a9c7]
                                      1     small_malloc_from_free_list + 503 (libsystem_malloc.dylib + 12844) [0x7fff2025b22c] (running)
                                      1     small_malloc_from_free_list + 185 (libsystem_malloc.dylib + 12526) [0x7fff2025b0ee] (running)
                                    1     small_malloc_should_clear + 128 (libsystem_malloc.dylib + 10564) [0x7fff2025a944] (running)
                                    1     small_malloc_should_clear + 80 (libsystem_malloc.dylib + 10516) [0x7fff2025a914] (running)
                                  1     szone_malloc_should_clear + 281 (libsystem_malloc.dylib + 10382) [0x7fff2025a88e] (running)
                              1     CCDigestCreate + 39 (libcommonCrypto.dylib + 9184) [0x7fff2a59d3e0]
                                1     CCDigestInit + 32 (libcommonCrypto.dylib + 9244) [0x7fff2a59d41c]
                                  1     CCDigestGetDigestInfo + 50 (libcommonCrypto.dylib + 2850) [0x7fff2a59bb22] (running)
                          1     Security::CodeSigning::CodeDirectory::hashFor(unsigned int) + 137 (Security + 1761573) [0x7fff22467125] (running)
                        5     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 653 (Security + 1762851) [0x7fff22467623]
                          4     Security::makeCFMutableDictionary() + 27 (Security + 2796254) [0x7fff22563ade]
                            4     CFDictionaryCreateMutable + 31 (CoreFoundation + 20249) [0x7fff204aef19]
                              4     __NSDictionaryM_new + 112 (CoreFoundation + 22592) [0x7fff204af840]
                                4     __CFAllocateObject + 15 (CoreFoundation + 17077) [0x7fff204ae2b5]
                                  2     class_createInstance + 65 (libobjc.A.dylib + 26106) [0x7fff202d05fa]
                                    2     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                      2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                        2     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                          2     tiny_malloc_from_free_list + 165 (libsystem_malloc.dylib + 16084) [0x7fff2025bed4] (running)
                                  1     class_createInstance + 107 (libobjc.A.dylib + 26148) [0x7fff202d0624] (running)
                                  1     _malloc_zone_calloc + 0 (libsystem_malloc.dylib + 114803) [0x7fff20274073] (running)
                          1     Security::makeCFMutableDictionary() + 11 (Security + 2796238) [0x7fff22563ace] (running)
                        4     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 748 (Security + 1762946) [0x7fff22467682]
                          4     Security::CFRef<__CFDictionary*>::~CFRef() + 17 (Security + 1619139) [0x7fff224444c3]
                            3     -[__NSDictionaryM dealloc] + 158 (CoreFoundation + 188825) [0x7fff204d8199]
                              3     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                                1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                                  1     tiny_free_list_add_ptr + 181 (libsystem_malloc.dylib + 27999) [0x7fff2025ed5f] (running)
                                1     tiny_free_no_lock + 12 (libsystem_malloc.dylib + 25447) [0x7fff2025e367] (running)
                                1     tiny_free_no_lock + 10 (libsystem_malloc.dylib + 25445) [0x7fff2025e365] (running)
                            1     DYLD-STUB$$free + 0 (CoreFoundation + 1827956) [0x7fff20668474] (running)
                        4     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 769 (Security + 1762967) [0x7fff22467697]
                          3     std::__1::__tree<std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> > > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> >, void*>*) + 40 (Security + 1763722) [0x7fff2246798a]
                            2     Security::RefPointer<Security::DynamicHash>::~RefPointer() + 15 (Security + 1726331) [0x7fff2245e77b]
                              1     Security::RefPointer<Security::DynamicHash>::release() + 75 (Security + 1726445) [0x7fff2245e7ed]
                                1     Security::CCHashInstance::~CCHashInstance() + 14 (Security + 2787194) [0x7fff2256177a]
                                  1     Security::CCHashInstance::~CCHashInstance() + 23 (Security + 1839497) [0x7fff2247a189]
                                    1     CCDigestDestroy + 27 (libcommonCrypto.dylib + 9461) [0x7fff2a59d4f5]
                                      1     memset_s + 58 (libsystem_c.dylib + 442819) [0x7fff203731c3]
                                        1     _platform_bzero$VARIANT$Haswell + 84 (libsystem_platform.dylib + 5364) [0x7fff204754f4] (running)
                              1     Security::RefPointer<Security::DynamicHash>::release() + 59 (Security + 1726429) [0x7fff2245e7dd]
                               *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                            1     Security::Mutex::~Mutex() + 30 (Security + 11338) [0x7fff222bbc4a]
                              1     pthread_mutex_destroy + 168 (libsystem_pthread.dylib + 10803) [0x7fff2042ea33] (running)
                          1     free + 292 (libsystem_malloc.dylib + 8649) [0x7fff2025a1c9] (running)
                        2     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 241 (Security + 1762439) [0x7fff22467487]
                          2     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                            2     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                              2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                2     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                  1     tiny_malloc_from_free_list + 165 (libsystem_malloc.dylib + 16084) [0x7fff2025bed4] (running)
                                  1     tiny_malloc_from_free_list + 53 (libsystem_malloc.dylib + 15972) [0x7fff2025be64]
                                   *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                        2     Security::CodeSigning::CodeDirectory::multipleHashFileData(Security::UnixPlusPlus::FileDesc, unsigned long, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >, void (unsigned int, Security::DynamicHash*) block_pointer) + 760 (Security + 1762958) [0x7fff2246768e]
                          1     __ulock_wake + 10 (libsystem_kernel.dylib + 10974) [0x7fff203feade]
                           *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                          1     free_tiny + 314 (libsystem_malloc.dylib + 24985) [0x7fff2025e199] (running)
                        1     std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> >, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> >, void*> > > >::reset(std::__1::__tree_node<std::__1::__value_type<unsigned int, Security::RefPointer<Security::DynamicHash> >, void*>*) + 0 (Security + 1763804) [0x7fff224679dc] (running)
                      543   Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4121 (Security + 1708779) [0x7fff2245a2eb]
                        533   Security::UnixPlusPlus::FileDesc::open(char const*, int, unsigned short) + 64 (Security + 2806352) [0x7fff22566250]
                          529   __open + 10 (libsystem_kernel.dylib + 7106) [0x7fff203fdbc2]
                           *518   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                             *488   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                               *482   open_nocancel + 313 (kernel + 3267561) [0xffffff800052dbe9]
                                 *477   ??? (kernel + 3264568) [0xffffff800052d038]
                                   *205   vn_open_auth + 312 (kernel + 3369528) [0xffffff8000546a38]
                                     *199   namei + 4388 (kernel + 3146836) [0xffffff8000510454]
                                       *166   lookup + 878 (kernel + 3150190) [0xffffff800051116e]
                                         *84    apfs_vnop_lookup + 1004 (apfs + 314221) [0xffffff80033e6b6d]
                                           *82    apfs_internal_lookup + 236 (apfs + 395627) [0xffffff80033fa96b]
                                             *81    apfs_lookup_name_with_alt_name + 67 (apfs + 389473) [0xffffff80033f9161]
                                               *81    fs_lookup_name_and_hash + 63 (apfs + 747043) [0xffffff8003450623]
                                                 *73    fs_lookup_name_with_parent_id + 593 (apfs + 681229) [0xffffff800344050d]
                                                   *48    iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                                     *47    bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                                       *12    _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                                         *12    btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                           *11    btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                             *2     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                                             *2     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                               *1     obj_get_finish + 266 (apfs + 1066627) [0xffffff800349e683]
                                                                 *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                                   *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                                 *1     obj_reference_release_wait + 84 (apfs + 1045713) [0xffffff80034994d1] (running)
                                                             *2     obj_get + 713 (apfs + 1060980) [0xffffff800349d074]
                                                               *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                                               *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                             *1     obj_get + 4232 (apfs + 1064499) [0xffffff800349de33]
                                                               *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                             *1     obj_get + 4009 (apfs + 1064276) [0xffffff800349dd54]
                                                               *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                                 *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                             *1     obj_get + 507 (apfs + 1060774) [0xffffff800349cfa6] (running)
                                                             *1     obj_get + 207 (apfs + 1060474) [0xffffff800349ce7a] (running)
                                                             *1     obj_get + 41 (apfs + 1060308) [0xffffff800349cdd4] (running)
                                                           *1     btree_node_get_internal + 154 (apfs + 896111) [0xffffff8003474c6f] (running)
                                                       *8     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                         *8     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                           *7     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                             *3     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                               *2     obj_get_finish + 214 (apfs + 1066575) [0xffffff800349e64f] (running)
                                                               *1     obj_get_finish + 166 (apfs + 1066527) [0xffffff800349e61f]
                                                                 *1     obj_reference_release_wait + 41 (apfs + 1045670) [0xffffff80034994a6] (running)
                                                             *1     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                                               *1     IORWLockRead + 48 (kernel + 1745872) [0xffffff80003ba3d0] (running)
                                                             *1     obj_get + 1358 (apfs + 1061625) [0xffffff800349d2f9] (running)
                                                             *1     obj_get + 1274 (apfs + 1061541) [0xffffff800349d2a5] (running)
                                                             *1     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                                           *1     btree_node_get_internal + 302 (apfs + 896259) [0xffffff8003474d03] (running)
                                                       *5     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                                         *5     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                                           *3     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                             *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                               *1     jobj_validate_key_val + 113 (apfs + 671033) [0xffffff800343dd39] (running)
                                                             *1     apfs_key_compare + 78 (apfs + 673766) [0xffffff800343e7e6]
                                                               *1     jobj_validate_key_val + 44 (apfs + 670964) [0xffffff800343dcf4] (running)
                                                             *1     jobj_validate_key_val + 1 (apfs + 670921) [0xffffff800343dcc9] (running)
                                                           *1     btree_node_key_ptr + 1 (apfs + 896590) [0xffffff8003474e4e] (running)
                                                           *1     apfs_key_compare + 0 (apfs + 673688) [0xffffff800343e798] (running)
                                                       *5     _bt_lookup_variant + 1040 (apfs + 939828) [0xffffff800347f734]
                                                         *3     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                           *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                             *1     jobj_validate_key_val + 17 (apfs + 670937) [0xffffff800343dcd9] (running)
                                                           *1     apfs_key_compare + 78 (apfs + 673766) [0xffffff800343e7e6]
                                                             *1     jobj_validate_key_val + 337 (apfs + 671257) [0xffffff800343de19] (running)
                                                           *1     apfs_key_compare + 8 (apfs + 673696) [0xffffff800343e7a0] (running)
                                                         *2     bt_search_node_insert + 143 (apfs + 902509) [0xffffff800347656d]
                                                           *1     btree_node_key_ptr + 112 (apfs + 896701) [0xffffff8003474ebd]
                                                             *1     btree_node_key_range_validate + 31 (apfs + 896774) [0xffffff8003474f06] (running)
                                                           *1     btree_node_key_ptr + 78 (apfs + 896667) [0xffffff8003474e9b] (running)
                                                       *3     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                                         *1     obj_release + 1047 (apfs + 1049766) [0xffffff800349a4a6]
                                                           *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                             *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                         *1     obj_release + 690 (apfs + 1049409) [0xffffff800349a341]
                                                           *1     OSBitAndAtomic + 6 (kernel + 7593686) [0xffffff800094ded6] (running)
                                                         *1     obj_release + 47 (apfs + 1048766) [0xffffff800349a0be]
                                                           *1     IORWLockRead + 35 (kernel + 1745859) [0xffffff80003ba3c3] (running)
                                                       *2     _bt_lookup_variant + 758 (apfs + 939546) [0xffffff800347f61a]
                                                         *2     btree_node_child_val + 69 (apfs + 892868) [0xffffff8003473fc4]
                                                           *2     btree_node_val_ptr + 85 (apfs + 893082) [0xffffff800347409a]
                                                             *1     btree_node_val_len + 78 (apfs + 893261) [0xffffff800347414d] (running)
                                                             *1     btree_node_val_len + 18 (apfs + 893201) [0xffffff8003474111] (running)
                                                       *2     _bt_lookup_variant + 722 (apfs + 939510) [0xffffff800347f5f6]
                                                         *2     obj_release + 47 (apfs + 1048766) [0xffffff800349a0be]
                                                           *1     IORWLockRead + 63 (kernel + 1745887) [0xffffff80003ba3df] (running)
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                       *2     _bt_lookup_variant + 540 (apfs + 939328) [0xffffff800347f540]
                                                         *2     obj_retain + 23 (apfs + 1065019) [0xffffff800349e03b]
                                                           *2     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                       *1     _bt_lookup_variant + 1763 (apfs + 940551) [0xffffff800347fa07] (running)
                                                       *1     _bt_lookup_variant + 1360 (apfs + 940148) [0xffffff800347f874]
                                                         *1     obj_release + 47 (apfs + 1048766) [0xffffff800349a0be]
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                       *1     _bt_lookup_variant + 873 (apfs + 939661) [0xffffff800347f68d]
                                                         *1     btree_node_child_val + 69 (apfs + 892868) [0xffffff8003473fc4]
                                                           *1     btree_node_val_ptr + 85 (apfs + 893082) [0xffffff800347409a]
                                                             *1     btree_node_val_len + 83 (apfs + 893266) [0xffffff8003474152] (running)
                                                       *1     _bt_lookup_variant + 714 (apfs + 939502) [0xffffff800347f5ee]
                                                         *1     IORWLockUnlock + 0 (kernel + 1744976) [0xffffff80003ba050] (running)
                                                       *1     _bt_lookup_variant + 690 (apfs + 939478) [0xffffff800347f5d6] (running)
                                                       *1     _bt_lookup_variant + 525 (apfs + 939313) [0xffffff800347f531]
                                                         *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                                       *1     _bt_lookup_variant + 191 (apfs + 938979) [0xffffff800347f3e3] (running)
                                                       *1     btree_node_child_val + 0 (apfs + 892799) [0xffffff8003473f7f] (running)
                                                     *1     _bt_lookup_variant + 1412 (apfs + 940200) [0xffffff800347f8a8] (running)
                                                   *14    iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                                                     *11    raw_lookup_name_iterator + 155 (apfs + 684159) [0xffffff800344107f]
                                                       *3     utf8_normalizeOptCaseFoldAndCompare + 893 (kernel + 3358493) [0xffffff8000543f1d]
                                                         *1     ??? (kernel + 3355179) [0xffffff800054322b] (running)
                                                         *1     ??? (kernel + 3355162) [0xffffff800054321a] (running)
                                                         *1     ??? (kernel + 3355110) [0xffffff80005431e6] (running)
                                                       *2     utf8_normalizeOptCaseFoldAndCompare + 580 (kernel + 3358180) [0xffffff8000543de4] (running)
                                                       *1     utf8_normalizeOptCaseFoldAndCompare + 872 (kernel + 3358472) [0xffffff8000543f08] (running)
                                                       *1     utf8_normalizeOptCaseFoldAndCompare + 801 (kernel + 3358401) [0xffffff8000543ec1]
                                                         *1     ??? (kernel + 3355135) [0xffffff80005431ff] (running)
                                                       *1     utf8_normalizeOptCaseFoldAndCompare + 710 (kernel + 3358310) [0xffffff8000543e66] (running)
                                                       *1     utf8_normalizeOptCaseFoldAndCompare + 700 (kernel + 3358300) [0xffffff8000543e5c] (running)
                                                       *1     utf8_normalizeOptCaseFoldAndCompare + 613 (kernel + 3358213) [0xffffff8000543e05] (running)
                                                       *1     ??? (kernel + 3354960) [0xffffff8000543150] (running)
                                                     *3     raw_lookup_name_iterator + 208 (apfs + 684212) [0xffffff80034410b4]
                                                       *2     key_val_to_jobj + 718 (apfs + 669642) [0xffffff800343d7ca]
                                                         *2     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                                           *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                             *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                               *1     ??? (kernel + 900464) [0xffffff80002ebd70] (running)
                                                           *1     OSMalloc + 35 (kernel + 582275) [0xffffff800029e283] (running)
                                                       *1     memset + 12 (kernel + 4284) [0xffffff80001010bc] (running)
                                                   *7     iterate_raw_jobjs_with_hint + 108 (apfs + 666028) [0xffffff800343c9ac]
                                                     *5     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                       *5     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                         *2     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                                                         *2     memcmp_zero_ptr_aligned + 64 (kernel + 1740032) [0xffffff80003b8d00] (running)
                                                         *1     memcmp_zero_ptr_aligned + 91 (kernel + 1740059) [0xffffff80003b8d1b] (running)
                                                     *1     _apfs_zalloc + 25 (apfs + 657420) [0xffffff800343a80c] (running)
                                                     *1     memset + 10 (kernel + 4282) [0xffffff80001010ba] (running)
                                                   *3     iterate_raw_jobjs_with_hint + 380 (apfs + 666300) [0xffffff800343cabc]
                                                     *2     ??? (kernel + 905417) [0xffffff80002ed0c9] (running)
                                                     *1     ??? (kernel + 905972) [0xffffff80002ed2f4] (running)
                                                   *1     iterate_raw_jobjs_with_hint + 268 (apfs + 666188) [0xffffff800343ca4c]
                                                     *1     jfs_get_tree_in_snap + 392 (apfs + 667880) [0xffffff800343d0e8]
                                                       *1     obj_retain + 23 (apfs + 1065019) [0xffffff800349e03b]
                                                         *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                 *8     fs_lookup_name_with_parent_id + 239 (apfs + 680875) [0xffffff80034403ab]
                                                   *2     utf8_normalizeOptCaseFoldAndHash + 632 (kernel + 3354872) [0xffffff80005430f8] (running)
                                                   *2     utf8_normalizeOptCaseFoldAndHash + 428 (kernel + 3354668) [0xffffff800054302c]
                                                     *1     ??? (kernel + 3357373) [0xffffff8000543abd] (running)
                                                     *1     ??? (kernel + 3355021) [0xffffff800054318d] (running)
                                                   *1     utf8_normalizeOptCaseFoldAndHash + 632 (kernel + 3354872) [0xffffff80005430f8]
                                                     *1     drec_hash_func + 23 (apfs + 683647) [0xffffff8003440e7f]
                                                       *1     crc32c_x86_hw + 39 (apfs + 65804) [0xffffff80033aa10c] (running)
                                                   *1     utf8_normalizeOptCaseFoldAndHash + 428 (kernel + 3354668) [0xffffff800054302c] (running)
                                                   *1     utf8_normalizeOptCaseFoldAndHash + 241 (kernel + 3354481) [0xffffff8000542f71] (running)
                                                   *1     utf8_normalizeOptCaseFoldAndHash + 144 (kernel + 3354384) [0xffffff8000542f10] (running)
                                             *1     fs_lookup_name_and_hash + 1 (apfs + 746981) [0xffffff80034505e5] (running)
                                           *2     apfs_internal_lookup + 289 (apfs + 395680) [0xffffff80033fa9a0]
                                             *1     xf_get + 172 (apfs + 1172553) [0xffffff80034b8449] (running)
                                             *1     xf_get + 8 (apfs + 1172389) [0xffffff80034b83a5] (running)
                                         *67    apfs_vnop_lookup + 1232 (apfs + 314449) [0xffffff80033e6c51]
                                           *38    apfs_load_inode_internal + 607 (apfs + 268479) [0xffffff80033db8bf]
                                             *34    fs_get_inode_with_hint + 217 (apfs + 664760) [0xffffff800343c4b8]
                                               *25    iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                                 *25    bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                                   *7     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                     *7     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                       *7     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                         *2     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                                         *2     obj_get + 518 (apfs + 1060785) [0xffffff800349cfb1]
                                                           *2     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                         *1     obj_get + 4232 (apfs + 1064499) [0xffffff800349de33]
                                                           *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                         *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                           *1     obj_get_finish + 266 (apfs + 1066627) [0xffffff800349e683]
                                                             *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                               *1     IORWLockUnlock + 210 (kernel + 1745186) [0xffffff80003ba122] (running)
                                                         *1     obj_get + 733 (apfs + 1061000) [0xffffff800349d088]
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                   *7     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                                     *7     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                       *7     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                         *1     obj_get + 4232 (apfs + 1064499) [0xffffff800349de33]
                                                           *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                         *1     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                           *1     obj_get_finish + 198 (apfs + 1066559) [0xffffff800349e63f]
                                                             *1     OSBitAndAtomic + 24 (kernel + 7593704) [0xffffff800094dee8] (running)
                                                         *1     obj_get + 3113 (apfs + 1063380) [0xffffff800349d9d4]
                                                           *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                             *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                         *1     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                                         *1     obj_get + 733 (apfs + 1061000) [0xffffff800349d088]
                                                           *1     IORWLockRead + 900 (kernel + 1746724) [0xffffff80003ba724] (running)
                                                         *1     obj_get + 713 (apfs + 1060980) [0xffffff800349d074]
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                         *1     obj_get + 56 (apfs + 1060323) [0xffffff800349cde3] (running)
                                                   *4     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                                     *4     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                                       *2     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                         *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                           *1     jobj_validate_key_val + 337 (apfs + 671257) [0xffffff800343de19] (running)
                                                         *1     apfs_key_compare + 78 (apfs + 673766) [0xffffff800343e7e6]
                                                           *1     jobj_validate_key_val + 17 (apfs + 670937) [0xffffff800343dcd9] (running)
                                                       *2     bt_search_node_insert + 143 (apfs + 902509) [0xffffff800347656d]
                                                         *1     btree_node_key_ptr + 126 (apfs + 896715) [0xffffff8003474ecb] (running)
                                                         *1     btree_node_key_ptr + 66 (apfs + 896655) [0xffffff8003474e8f] (running)
                                                   *3     _bt_lookup_variant + 722 (apfs + 939510) [0xffffff800347f5f6]
                                                     *1     obj_release + 1047 (apfs + 1049766) [0xffffff800349a4a6]
                                                       *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                         *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                     *1     obj_release + 421 (apfs + 1049140) [0xffffff800349a234]
                                                       *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                     *1     obj_release + 69 (apfs + 1048788) [0xffffff800349a0d4]
                                                       *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                                   *1     _bt_lookup_variant + 1726 (apfs + 940514) [0xffffff800347f9e2]
                                                     *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                       *1     jobj_validate_key_val + 38 (apfs + 670958) [0xffffff800343dcee] (running)
                                                   *1     _bt_lookup_variant + 1040 (apfs + 939828) [0xffffff800347f734]
                                                     *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                       *1     jobj_validate_key_val + 47 (apfs + 670967) [0xffffff800343dcf7] (running)
                                                   *1     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                                     *1     obj_release + 435 (apfs + 1049154) [0xffffff800349a242]
                                                       *1     obj_cache_enqueue_deferred_update + 34 (apfs + 1050114) [0xffffff800349a602]
                                                         *1     OSBitOrAtomic + 24 (kernel + 7593736) [0xffffff800094df08] (running)
                                                   *1     _bt_lookup_variant + 758 (apfs + 939546) [0xffffff800347f61a]
                                                     *1     btree_node_child_val + 69 (apfs + 892868) [0xffffff8003473fc4]
                                                       *1     btree_node_val_ptr + 103 (apfs + 893100) [0xffffff80034740ac]
                                                         *1     btree_node_val_range_validate + 143 (apfs + 893423) [0xffffff80034741ef] (running)
                                               *7     iterate_raw_jobjs_with_hint + 559 (apfs + 666479) [0xffffff800343cb6f]
                                                 *7     bt_iterator_next + 78 (apfs + 941456) [0xffffff800347fd90]
                                                   *3     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                                     *3     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                       *2     apfs_key_compare + 78 (apfs + 673766) [0xffffff800343e7e6]
                                                         *2     jobj_validate_key_val + 113 (apfs + 671033) [0xffffff800343dd39] (running)
                                                       *1     apfs_key_compare + 105 (apfs + 673793) [0xffffff800343e801]
                                                         *1     jobj_validate_key_val + 302 (apfs + 671222) [0xffffff800343ddf6] (running)
                                                   *3     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                                     *3     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                       *3     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                         *2     obj_get + 3152 (apfs + 1063419) [0xffffff800349d9fb]
                                                           *1     obj_get_finish + 266 (apfs + 1066627) [0xffffff800349e683]
                                                             *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                               *1     IORWLockUnlock + 365 (kernel + 1745341) [0xffffff80003ba1bd] (running)
                                                           *1     obj_get_finish + 235 (apfs + 1066596) [0xffffff800349e664]
                                                             *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                         *1     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                                   *1     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                     *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                       *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                         *1     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                                           *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                               *1     iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                                                 *1     raw_ino_loader + 60 (apfs + 665847) [0xffffff800343c8f7]
                                                   *1     key_val_to_jobj + 415 (apfs + 669339) [0xffffff800343d69b]
                                                     *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                       *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                               *1     iterate_raw_jobjs_with_hint + 108 (apfs + 666028) [0xffffff800343c9ac]
                                                 *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                   *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                     *1     memcmp_zero_ptr_aligned + 88 (kernel + 1740056) [0xffffff80003b8d18] (running)
                                             *2     fs_get_inode_with_hint + 662 (apfs + 665205) [0xffffff800343c675]
                                               *2     lck_rw_alloc_init + 41 (kernel + 1744441) [0xffffff80003b9e39]
                                                 *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                   *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                 *1     ??? (kernel + 898399) [0xffffff80002eb55f] (running)
                                             *1     fs_get_inode_with_hint + 740 (apfs + 665283) [0xffffff800343c6c3]
                                               *1     lck_mtx_alloc_init + 37 (kernel + 1751189) [0xffffff80003bb895]
                                                 *1     ??? (kernel + 900486) [0xffffff80002ebd86] (running)
                                             *1     fs_get_inode_with_hint + 142 (apfs + 664685) [0xffffff800343c46d] (running)
                                           *19    apfs_load_inode_internal + 2038 (apfs + 269910) [0xffffff80033dbe56]
                                             *11    ??? (kernel + 3187749) [0xffffff800051a425]
                                               *5     ??? (kernel + 6636113) [0xffffff8000864251]
                                                 *5     memory_object_create_named + 45 (kernel + 1302477) [0xffffff800034dfcd]
                                                   *5     vm_object_memory_object_associate + 357 (kernel + 1300741) [0xffffff800034d905]
                                                     *3     ??? (kernel + 1274211) [0xffffff8000347163]
                                                       *2     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                         *2     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                       *1     ??? (kernel + 900873) [0xffffff80002ebf09] (running)
                                                     *2     memcpy + 7 (kernel + 4183) [0xffffff8000101057] (running)
                                               *4     ??? (kernel + 6635976) [0xffffff80008641c8]
                                                 *3     ??? (kernel + 898370) [0xffffff80002eb542] (running)
                                                 *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                               *1     ??? (kernel + 6636037) [0xffffff8000864205]
                                                 *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                               *1     __bzero + 8 (kernel + 4344) [0xffffff80001010f8] (running)
                                             *2     ??? (kernel + 3189157) [0xffffff800051a9a5]
                                               *1     ??? (kernel + 3081863) [0xffffff8000500687] (running)
                                               *1     ??? (kernel + 3081066) [0xffffff800050036a] (running)
                                             *2     ??? (kernel + 3189066) [0xffffff800051a94a]
                                               *1     ??? (kernel + 3176629) [0xffffff80005178b5] (running)
                                               *1     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                             *1     ??? (kernel + 6635888) [0xffffff8000864170] (running)
                                             *1     ??? (kernel + 3189002) [0xffffff800051a90a] (running)
                                             *1     ??? (kernel + 3188963) [0xffffff800051a8e3] (running)
                                             *1     ??? (kernel + 3187069) [0xffffff800051a17d]
                                               *1     ??? (kernel + 3177504) [0xffffff8000517c20] (running)
                                           *5     apfs_load_inode_internal + 246 (apfs + 268118) [0xffffff80033db756]
                                             *3     apfs_jhash_getvnode_internal + 120 (apfs + 658025) [0xffffff800343aa69]
                                               *2     object_in_jhash + 87 (apfs + 658422) [0xffffff800343abf6] (running)
                                               *1     object_in_jhash + 48 (apfs + 658383) [0xffffff800343abcf] (running)
                                             *2     apfs_jhash_getvnode_internal + 298 (apfs + 658203) [0xffffff800343ab1b]
                                               *2     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                           *1     apfs_load_inode_internal + 2440 (apfs + 270312) [0xffffff80033dbfe8] (running)
                                           *1     apfs_load_inode_internal + 2405 (apfs + 270277) [0xffffff80033dbfc5]
                                             *1     lck_rw_unlock_exclusive + 9 (kernel + 1745673) [0xffffff80003ba309]
                                               *1     IORWLockUnlock + 10 (kernel + 1744986) [0xffffff80003ba05a] (running)
                                           *1     apfs_load_inode_internal + 2203 (apfs + 270075) [0xffffff80033dbefb]
                                             *1     insert_linkid + 140 (apfs + 721811) [0xffffff800344a393]
                                               *1     _apfs_malloc + 120 (apfs + 660792) [0xffffff800343b538]
                                                 *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                           *1     apfs_load_inode_internal + 1626 (apfs + 269498) [0xffffff80033dbcba]
                                             *1     fs_get_dstream + 0 (apfs + 706482) [0xffffff80034467b2] (running)
                                           *1     apfs_load_inode_internal + 520 (apfs + 268392) [0xffffff80033db868] (running)
                                         *2     apfs_vnop_lookup + 2219 (apfs + 315436) [0xffffff80033e702c]
                                           *1     cache_enter + 259 (kernel + 3093843) [0xffffff8000503553]
                                             *1     ??? (kernel + 3092356) [0xffffff8000502f84]
                                               *1     ??? (kernel + 901597) [0xffffff80002ec1dd] (running)
                                           *1     cache_enter + 224 (kernel + 3093808) [0xffffff8000503530]
                                             *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                         *2     apfs_vnop_lookup + 814 (apfs + 314031) [0xffffff80033e6aaf]
                                           *1     _apfs_free + 90 (apfs + 657714) [0xffffff800343a932]
                                             *1     OSFree + 64 (kernel + 582960) [0xffffff800029e530]
                                               *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                                 *1     ??? (kernel + 905972) [0xffffff80002ed2f4] (running)
                                           *1     OSFree + 1 (kernel + 582897) [0xffffff800029e4f1] (running)
                                         *2     apfs_vnop_lookup + 775 (apfs + 313992) [0xffffff80033e6a88]
                                           *1     vnode_ref_ext + 0 (kernel + 3189600) [0xffffff800051ab60] (running)
                                           *1     vnode_update_identity + 696 (kernel + 3080584) [0xffffff8000500188]
                                             *1     vfs_removename + 309 (kernel + 3083061) [0xffffff8000500b35]
                                               *1     ??? (kernel + 580273) [0xffffff800029dab1] (running)
                                         *1     apfs_vnop_lookup + 3440 (apfs + 316657) [0xffffff80033e74f1]
                                           *1     vnode_getfirmlink + 39 (kernel + 3087687) [0xffffff8000501d47]
                                             *1     IORWLockRead + 387 (kernel + 1746211) [0xffffff80003ba523] (running)
                                         *1     apfs_vnop_lookup + 1744 (apfs + 314961) [0xffffff80033e6e51]
                                           *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                         *1     apfs_vnop_lookup + 690 (apfs + 313907) [0xffffff80033e6a33]
                                           *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                         *1     apfs_vnop_lookup + 637 (apfs + 313854) [0xffffff80033e69fe]
                                           *1     apfs_check_and_alloc_alt_name + 136 (apfs + 387708) [0xffffff80033f8a7c]
                                             *1     utf8_getcp + 0 (apfs + 684248) [0xffffff80034410d8] (running)
                                         *1     apfs_vnop_lookup + 438 (apfs + 313655) [0xffffff80033e6937]
                                           *1     cache_lookup + 267 (kernel + 3091531) [0xffffff8000502c4b]
                                             *1     IORWLockRead + 29 (kernel + 1745853) [0xffffff80003ba3bd] (running)
                                         *1     apfs_vnop_lookup + 112 (apfs + 313329) [0xffffff80033e67f1] (running)
                                         *1     APFSOSNumberAtomic::addValue(long long) + 0 (apfs + 233790) [0xffffff80033d313e] (running)
                                         *1     vnode_mount + 0 (kernel + 3414880) [0xffffff8000551b60] (running)
                                         *1     cache_lookup + 0 (kernel + 3091264) [0xffffff8000502b40] (running)
                                       *23    lookup + 379 (kernel + 3149691) [0xffffff8000510f7b]
                                         *6     cache_lookup_path + 1050 (kernel + 3090026) [0xffffff800050266a] (running)
                                         *5     cache_lookup_path + 1124 (kernel + 3090100) [0xffffff80005026b4] (running)
                                         *5     cache_lookup_path + 1072 (kernel + 3090048) [0xffffff8000502680] (running)
                                         *1     cache_lookup_path + 1538 (kernel + 3090514) [0xffffff8000502852] (running)
                                         *1     cache_lookup_path + 1275 (kernel + 3090251) [0xffffff800050274b] (running)
                                         *1     cache_lookup_path + 1097 (kernel + 3090073) [0xffffff8000502699] (running)
                                         *1     cache_lookup_path + 1076 (kernel + 3090052) [0xffffff8000502684] (running)
                                         *1     cache_lookup_path + 992 (kernel + 3089968) [0xffffff8000502630] (running)
                                         *1     cache_lookup_path + 199 (kernel + 3089175) [0xffffff8000502317] (running)
                                         *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                       *6     lookup + 1463 (kernel + 3150775) [0xffffff80005113b7]
                                         *6     ??? (kernel + 3149222) [0xffffff8000510da6]
                                           *4     audit_arg_vnpath + 348 (kernel + 5939740) [0xffffff80007ba21c]
                                             *2     build_path_with_parent + 149 (kernel + 3083333) [0xffffff8000500c45] (running)
                                             *1     build_path_with_parent + 965 (kernel + 3084149) [0xffffff8000500f75] (running)
                                             *1     build_path_with_parent + 838 (kernel + 3084022) [0xffffff8000500ef6] (running)
                                           *2     audit_arg_vnpath + 526 (kernel + 5939918) [0xffffff80007ba2ce]
                                             *1     apfs_vnop_getattr + 0 (apfs + 307012) [0xffffff80033e4f44] (running)
                                             *1     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                               *1     apfs_vnop_getattr + 1579 (apfs + 308591) [0xffffff80033e556f] (running)
                                       *2     lookup + 868 (kernel + 3150180) [0xffffff8000511164] (running)
                                       *2     lookup + 179 (kernel + 3149491) [0xffffff8000510eb3]
                                         *1     cache_lookup_path + 1921 (kernel + 3090897) [0xffffff80005029d1]
                                           *1     ??? (kernel + 3229070) [0xffffff800052458e] (running)
                                         *1     cache_lookup_path + 199 (kernel + 3089175) [0xffffff8000502317] (running)
                                     *2     namei + 4372 (kernel + 3146820) [0xffffff8000510444]
                                       *2     mac_vnode_check_lookup_preflight + 158 (kernel + 8872846) [0xffffff8000a8638e]
                                         *1     hook_vnode_check_lookup_preflight + 101 (Sandbox + 57303) [0xffffff8003349fd7] (running)
                                         *1     hook_vnode_check_lookup_preflight + 94 (Sandbox + 57296) [0xffffff8003349fd0]
                                           *1     cred_sb_evaluate + 119 (Sandbox + 30575) [0xffffff800334376f]
                                             *1     proc_ucred + 1 (kernel + 6367105) [0xffffff8000822781] (running)
                                     *2     namei + 2705 (kernel + 3145153) [0xffffff800050fdc1]
                                       *1     audit_arg_upath + 155 (kernel + 5937691) [0xffffff80007b9a1b]
                                         *1     audit_canon_path + 216 (kernel + 5978760) [0xffffff80007c3a88] (running)
                                       *1     audit_arg_upath + 94 (kernel + 5937630) [0xffffff80007b99de]
                                         *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                           *1     ??? (kernel + 900899) [0xffffff80002ebf23] (running)
                                     *2     namei + 491 (kernel + 3142939) [0xffffff800050f51b]
                                       *1     ??? (kernel + 1741282) [0xffffff80003b91e2] (running)
                                       *1     _bcopystr + 8 (kernel + 138824) [0xffffff8000231e48] (running)
                                   *132   vn_open_auth + 2648 (kernel + 3371864) [0xffffff8000547358]
                                     *117   vn_authorize_open_existing + 191 (kernel + 3216671) [0xffffff800052151f]
                                       *115   mac_vnode_check_open + 154 (kernel + 8874122) [0xffffff8000a8688a]
                                         *115   hook_vnode_check_open + 184 (Sandbox + 51217) [0xffffff8003348811]
                                           *113   sb_evaluate_internal + 201 (Sandbox + 74643) [0xffffff800334e393]
                                             *87    eval + 4873 (Sandbox + 85506) [0xffffff8003350e02]
                                               *80    derive_vnode_storage_class + 938 (Sandbox + 97949) [0xffffff8003353e9d]
                                                 *38    eval + 1294 (Sandbox + 81927) [0xffffff8003350007]
                                                   *18    derive_vnode_path + 202 (Sandbox + 73264) [0xffffff800334de30]
                                                     *14    getpath_with_mount + 171 (Sandbox + 24324) [0xffffff8003341f04]
                                                       *14    vn_getpath_ext_with_mntlen + 161 (kernel + 3200017) [0xffffff800051d411]
                                                         *10    build_path_with_parent + 1430 (kernel + 3084614) [0xffffff8000501146]
                                                           *10    vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                                             *9     apfs_vnop_getattr + 299 (apfs + 307311) [0xffffff80033e506f]
                                                               *9     lookup_sibling_link + 119 (apfs + 721306) [0xffffff800344a19a]
                                                                 *6     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                                                   *6     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                                     *3     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                                                       *3     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                                                         *2     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                                           *1     apfs_key_compare + 259 (apfs + 673947) [0xffffff800343e89b] (running)
                                                                           *1     apfs_key_compare + 78 (apfs + 673766) [0xffffff800343e7e6]
                                                                             *1     jobj_validate_key_val + 38 (apfs + 670958) [0xffffff800343dcee] (running)
                                                                         *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592] (running)
                                                                     *1     _bt_lookup_variant + 977 (apfs + 939765) [0xffffff800347f6f5]
                                                                       *1     obj_release + 47 (apfs + 1048766) [0xffffff800349a0be]
                                                                         *1     IORWLockRead + 10 (kernel + 1745834) [0xffffff80003ba3aa] (running)
                                                                     *1     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                                       *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                         *1     btree_node_get_internal + 4 (apfs + 895961) [0xffffff8003474bd9] (running)
                                                                     *1     _bt_lookup_variant + 475 (apfs + 939263) [0xffffff800347f4ff] (running)
                                                                 *2     lookup_jobj_in_snap + 299 (apfs + 667074) [0xffffff800343cdc2]
                                                                   *1     ??? (kernel + 905252) [0xffffff80002ed024] (running)
                                                                   *1     ??? (kernel + 905226) [0xffffff80002ed00a] (running)
                                                                 *1     lookup_jobj_in_snap + 277 (apfs + 667052) [0xffffff800343cdac]
                                                                   *1     key_val_to_jobj + 718 (apfs + 669642) [0xffffff800343d7ca]
                                                                     *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                                                       *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                                         *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                                           *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                                             *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                             *1     apfs_vnop_getattr + 2022 (apfs + 309034) [0xffffff80033e572a]
                                                               *1     __strlcpy_chk + 53 (kernel + 1522101) [0xffffff80003839b5] (running)
                                                         *2     build_path_with_parent + 1699 (kernel + 3084883) [0xffffff8000501253]
                                                           *2     vnode_update_identity + 271 (kernel + 3080159) [0xffffff80004fffdf]
                                                             *1     ??? (kernel + 3081187) [0xffffff80005003e3] (running)
                                                             *1     IORWLockRead + 918 (kernel + 1746742) [0xffffff80003ba736] (running)
                                                         *1     build_path_with_parent + 587 (kernel + 3083771) [0xffffff8000500dfb] (running)
                                                         *1     build_path_with_parent + 548 (kernel + 3083732) [0xffffff8000500dd4] (running)
                                                     *3     getpath_with_mount + 55 (Sandbox + 24208) [0xffffff8003341e90]
                                                       *2     smalloc + 36 (Sandbox + 71484) [0xffffff800334d73c]
                                                         *2     IOMalloc + 34 (kernel + 7992706) [0xffffff80009af582]
                                                           *2     ??? (kernel + 579084) [0xffffff800029d60c]
                                                             *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                               *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                             *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                                       *1     IOMalloc + 0 (kernel + 7992672) [0xffffff80009af560] (running)
                                                     *1     getpath_with_mount + 224 (Sandbox + 24377) [0xffffff8003341f39]
                                                       *1     strlen + 16 (kernel + 1740128) [0xffffff80003b8d60] (running)
                                                   *18    derive_vnode_path + 296 (Sandbox + 73358) [0xffffff800334de8e]
                                                     *5     sandbox_normalize_string_ext + 395 (Sandbox + 129080) [0xffffff800335b838]
                                                       *2     utf8_encodestr + 501 (kernel + 3349589) [0xffffff8000541c55] (running)
                                                       *1     utf8_encodestr + 510 (kernel + 3349598) [0xffffff8000541c5e] (running)
                                                       *1     utf8_encodestr + 213 (kernel + 3349301) [0xffffff8000541b35] (running)
                                                       *1     utf8_encodestr + 196 (kernel + 3349284) [0xffffff8000541b24] (running)
                                                     *5     sandbox_normalize_string_ext + 158 (Sandbox + 128843) [0xffffff800335b74b]
                                                       *2     utf8_decodestr + 2544 (kernel + 3352624) [0xffffff8000542830] (running)
                                                       *1     utf8_decodestr + 2440 (kernel + 3352520) [0xffffff80005427c8] (running)
                                                       *1     utf8_decodestr + 164 (kernel + 3350244) [0xffffff8000541ee4] (running)
                                                       *1     utf8_decodestr + 129 (kernel + 3350209) [0xffffff8000541ec1] (running)
                                                     *3     sandbox_normalize_string_ext + 348 (Sandbox + 129033) [0xffffff800335b809]
                                                       *3     smalloc + 36 (Sandbox + 71484) [0xffffff800334d73c]
                                                         *3     IOMalloc + 34 (kernel + 7992706) [0xffffff80009af582]
                                                           *3     ??? (kernel + 579084) [0xffffff800029d60c]
                                                             *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                               *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                             *1     ??? (kernel + 900873) [0xffffff80002ebf09] (running)
                                                             *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                                     *1     sandbox_normalize_string_ext + 406 (Sandbox + 129091) [0xffffff800335b843]
                                                       *1     sfree + 53 (Sandbox + 72180) [0xffffff800334d9f4]
                                                         *1     IOFree + 42 (kernel + 7993162) [0xffffff80009af74a]
                                                           *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                                             *1     ??? (kernel + 905972) [0xffffff80002ed2f4] (running)
                                                     *1     sandbox_normalize_string_ext + 237 (Sandbox + 128922) [0xffffff800335b79a] (running)
                                                     *1     sandbox_normalize_string_ext + 111 (Sandbox + 128796) [0xffffff800335b71c]
                                                       *1     smalloc + 36 (Sandbox + 71484) [0xffffff800334d73c]
                                                         *1     IOMalloc + 34 (kernel + 7992706) [0xffffff80009af582]
                                                           *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                             *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                               *1     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                                                     *1     sandbox_normalize_string_ext + 48 (Sandbox + 128733) [0xffffff800335b6dd]
                                                       *1     utf8_validatestr + 32 (kernel + 3353184) [0xffffff8000542a60] (running)
                                                     *1     sandbox_normalize_string_ext + 36 (Sandbox + 128721) [0xffffff800335b6d1] (running)
                                                   *1     derive_vnode_path + 375 (Sandbox + 73437) [0xffffff800334dedd] (running)
                                                   *1     derive_vnode_path + 6 (Sandbox + 73068) [0xffffff800334dd6c] (running)
                                                 *29    eval + 7238 (Sandbox + 87871) [0xffffff800335173f]
                                                   *19    match_pattern + 201 (Sandbox + 95330) [0xffffff8003353462]
                                                     *7     sb_fsa_evaluate + 375 (Sandbox + 22599) [0xffffff8003341847]
                                                       *2     pattern_variable_resolver + 173 (Sandbox + 102134) [0xffffff8003354ef6]
                                                         *2     sandcastle_match_pattern + 92 (Sandbox + 168428) [0xffffff80033651ec]
                                                           *2     sb_fsa_evaluate + 174 (Sandbox + 22398) [0xffffff800334177e] (running)
                                                       *1     sandcastle_match_pattern + 0 (Sandbox + 168336) [0xffffff8003365190] (running)
                                                       *1     pattern_variable_resolver + 189 (Sandbox + 102150) [0xffffff8003354f06] (running)
                                                       *1     pattern_variable_resolver + 107 (Sandbox + 102068) [0xffffff8003354eb4] (running)
                                                       *1     pattern_variable_resolver + 51 (Sandbox + 102012) [0xffffff8003354e7c] (running)
                                                       *1     pattern_variable_resolver + 6 (Sandbox + 101967) [0xffffff8003354e4f] (running)
                                                     *3     sb_fsa_evaluate + 292 (Sandbox + 22516) [0xffffff80033417f4]
                                                       *1     _match_sequence + 94 (Sandbox + 23638) [0xffffff8003341c56] (running)
                                                       *1     _match_sequence + 84 (Sandbox + 23628) [0xffffff8003341c4c] (running)
                                                       *1     _match_sequence + 84 (Sandbox + 23628) [0xffffff8003341c4c]
                                                         *1     memcmp + 30 (kernel + 1739950) [0xffffff80003b8cae] (running)
                                                     *1     sb_fsa_evaluate + 1084 (Sandbox + 23308) [0xffffff8003341b0c] (running)
                                                     *1     sb_fsa_evaluate + 355 (Sandbox + 22579) [0xffffff8003341833] (running)
                                                     *1     sb_fsa_evaluate + 334 (Sandbox + 22558) [0xffffff800334181e] (running)
                                                     *1     sb_fsa_evaluate + 215 (Sandbox + 22439) [0xffffff80033417a7] (running)
                                                     *1     sb_fsa_evaluate + 204 (Sandbox + 22428) [0xffffff800334179c] (running)
                                                     *1     sb_fsa_evaluate + 174 (Sandbox + 22398) [0xffffff800334177e] (running)
                                                     *1     sb_fsa_evaluate + 168 (Sandbox + 22392) [0xffffff8003341778] (running)
                                                     *1     sb_fsa_evaluate + 103 (Sandbox + 22327) [0xffffff8003341737] (running)
                                                     *1     sb_fsa_evaluate + 17 (Sandbox + 22241) [0xffffff80033416e1] (running)
                                                   *1     match_pattern + 159 (Sandbox + 95288) [0xffffff8003353438] (running)
                                                   *1     match_pattern + 151 (Sandbox + 95280) [0xffffff8003353430] (running)
                                                   *1     match_pattern + 147 (Sandbox + 95276) [0xffffff800335342c] (running)
                                                   *1     match_pattern + 92 (Sandbox + 95221) [0xffffff80033533f5] (running)
                                                   *1     match_pattern + 61 (Sandbox + 95190) [0xffffff80033533d6]
                                                     *1     _read16 + 44 (Sandbox + 94109) [0xffffff8003352f9d] (running)
                                                   *1     match_pattern + 28 (Sandbox + 95157) [0xffffff80033533b5] (running)
                                                   *1     match_pattern + 25 (Sandbox + 95154) [0xffffff80033533b2] (running)
                                                   *1     match_pattern + 12 (Sandbox + 95141) [0xffffff80033533a5] (running)
                                                   *1     match_pattern + 8 (Sandbox + 95137) [0xffffff80033533a1] (running)
                                                   *1     sb_fsa_evaluate + 1 (Sandbox + 22225) [0xffffff80033416d1] (running)
                                                 *2     eval + 7383 (Sandbox + 88016) [0xffffff80033517d0]
                                                   *1     _readaddr + 52 (Sandbox + 80573) [0xffffff800334fabd] (running)
                                                   *1     _readaddr + 44 (Sandbox + 80565) [0xffffff800334fab5]
                                                     *1     _read16 + 47 (Sandbox + 94112) [0xffffff8003352fa0] (running)
                                                 *2     eval + 7185 (Sandbox + 87818) [0xffffff800335170a]
                                                   *1     _readaddr + 69 (Sandbox + 80590) [0xffffff800334face] (running)
                                                   *1     _readaddr + 4 (Sandbox + 80525) [0xffffff800334fa8d] (running)
                                                 *1     eval + 8903 (Sandbox + 89536) [0xffffff8003351dc0] (running)
                                                 *1     eval + 8852 (Sandbox + 89485) [0xffffff8003351d8d] (running)
                                                 *1     eval + 7162 (Sandbox + 87795) [0xffffff80033516f3] (running)
                                                 *1     eval + 1249 (Sandbox + 81882) [0xffffff800334ffda] (running)
                                                 *1     eval + 485 (Sandbox + 81118) [0xffffff800334fcde] (running)
                                                 *1     eval + 402 (Sandbox + 81035) [0xffffff800334fc8b] (running)
                                                 *1     eval_op + 42 (Sandbox + 80442) [0xffffff800334fa3a] (running)
                                                 *1     vnode_mount + 0 (kernel + 3414880) [0xffffff8000551b60] (running)
                                                 *1     vfs_flags + 0 (kernel + 3409808) [0xffffff8000550790] (running)
                                               *5     derive_vnode_storage_class + 470 (Sandbox + 97481) [0xffffff8003353cc9]
                                                 *5     derive_vnode_has_multiple_names + 128 (Sandbox + 101092) [0xffffff8003354ae4]
                                                   *5     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                                     *5     apfs_vnop_getattr + 810 (apfs + 307822) [0xffffff80033e526e]
                                                       *5     apfs_pack_vap_common + 895 (apfs + 310114) [0xffffff80033e5b62]
                                                         *5     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                                           *3     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                                             *3     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                               *3     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                                 *3     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                   *3     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                     *1     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                                                       *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                                                     *1     obj_get + 272 (apfs + 1060539) [0xffffff800349cebb] (running)
                                                                     *1     APFSOSNumberAtomic::addValue(long long) + 0 (apfs + 233790) [0xffffff80033d313e] (running)
                                                           *1     lookup_jobj_in_snap + 277 (apfs + 667052) [0xffffff800343cdac]
                                                             *1     key_val_to_jobj + 718 (apfs + 669642) [0xffffff800343d7ca]
                                                               *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                                                 *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                                   *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                                     *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                                       *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                           *1     lookup_jobj_in_snap + 55 (apfs + 666830) [0xffffff800343ccce]
                                                             *1     _apfs_zalloc + 13 (apfs + 657408) [0xffffff800343a800] (running)
                                               *2     derive_vnode_storage_class + 1541 (Sandbox + 98552) [0xffffff80033540f8]
                                                 *2     storage_class_get_name + 20 (Sandbox + 175402) [0xffffff8003366d2a]
                                                   *2     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                             *8     eval + 6665 (Sandbox + 87298) [0xffffff8003351502]
                                               *8     AppleMobileFileIntegrity::copyEntitlement(ucred*, char const*) + 37 (AppleMobileFileIntegrity + 29855) [0xffffff80018bf49f]
                                                 *5     OSDictionary::getObject(char const*) const + 18 (kernel + 7630290) [0xffffff8000956dd2]
                                                   *4     OSSymbol::existingSymbolForCString(char const*) + 41 (kernel + 7795833) [0xffffff800097f479]
                                                     *1     OSSymbolPool::findSymbol(char const*) const + 362 (kernel + 7794442) [0xffffff800097ef0a] (running)
                                                     *1     OSSymbolPool::findSymbol(char const*) const + 308 (kernel + 7794388) [0xffffff800097eed4] (running)
                                                     *1     OSSymbolPool::findSymbol(char const*) const + 134 (kernel + 7794214) [0xffffff800097ee26] (running)
                                                     *1     OSSymbolPool::findSymbol(char const*) const + 60 (kernel + 7794140) [0xffffff800097eddc] (running)
                                                   *1     OSSymbol::existingSymbolForCString(char const*) + 63 (kernel + 7795855) [0xffffff800097f48f]
                                                     *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                 *2     OSSymbol::taggedRelease(void const*) const + 0 (kernel + 7790016) [0xffffff800097ddc0] (running)
                                                 *1     OSDictionary::getObject(OSSymbol const*) const + 0 (kernel + 7630032) [0xffffff8000956cd0] (running)
                                             *4     eval + 7383 (Sandbox + 88016) [0xffffff80033517d0]
                                               *1     _readaddr + 52 (Sandbox + 80573) [0xffffff800334fabd] (running)
                                               *1     _readaddr + 44 (Sandbox + 80565) [0xffffff800334fab5]
                                                 *1     _read16 + 47 (Sandbox + 94112) [0xffffff8003352fa0] (running)
                                               *1     _readaddr + 44 (Sandbox + 80565) [0xffffff800334fab5] (running)
                                               *1     _readaddr + 15 (Sandbox + 80536) [0xffffff800334fa98] (running)
                                             *2     eval + 7644 (Sandbox + 88277) [0xffffff80033518d5]
                                               *2     csproc_get_platform_binary + 59 (kernel + 6145867) [0xffffff80007ec74b]
                                                 *2     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                             *2     eval + 8794 (Sandbox + 89427) [0xffffff8003351d53]
                                               *1     match_rootless + 166 (Sandbox + 163978) [0xffffff800336408a]
                                                 *1     derive_vnode_flags + 104 (Sandbox + 103296) [0xffffff8003355380]
                                                   *1     vnode_getattr + 848 (kernel + 3418464) [0xffffff8000552960]
                                                     *1     vnode_attr_handle_mnt_ignore_ownership + 15 (kernel + 3417295) [0xffffff80005524cf] (running)
                                               *1     match_rootless + 127 (Sandbox + 163939) [0xffffff8003364063]
                                                 *1     rootless_protect_mount + 31 (Sandbox + 163735) [0xffffff8003363f97]
                                                   *1     is_file_on_data_volume_equivalent_mount + 41 (Sandbox + 24134) [0xffffff8003341e46]
                                                     *1     mac_label_get + 12 (kernel + 8827964) [0xffffff8000a7b43c] (running)
                                             *2     eval + 844 (Sandbox + 81477) [0xffffff800334fe45]
                                               *1     match_rootless_protected_device + 124 (Sandbox + 165017) [0xffffff8003364499] (running)
                                               *1     vnode_isblk + 0 (kernel + 3415680) [0xffffff8000551e80] (running)
                                             *1     eval + 7398 (Sandbox + 88031) [0xffffff80033517df] (running)
                                             *1     eval + 7333 (Sandbox + 87966) [0xffffff800335179e] (running)
                                             *1     eval + 7238 (Sandbox + 87871) [0xffffff800335173f]
                                               *1     match_pattern + 201 (Sandbox + 95330) [0xffffff8003353462]
                                                 *1     sb_fsa_evaluate + 292 (Sandbox + 22516) [0xffffff80033417f4]
                                                   *1     _match_sequence + 84 (Sandbox + 23628) [0xffffff8003341c4c]
                                                     *1     memcmp + 38 (kernel + 1739958) [0xffffff80003b8cb6] (running)
                                             *1     eval + 6672 (Sandbox + 87305) [0xffffff8003351509] (running)
                                             *1     eval + 4824 (Sandbox + 85457) [0xffffff8003350dd1] (running)
                                             *1     eval + 3882 (Sandbox + 84515) [0xffffff8003350a23]
                                               *1     cs_identity_get + 52 (kernel + 6147764) [0xffffff80007eceb4]
                                                 *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                             *1     eval + 482 (Sandbox + 81115) [0xffffff800334fcdb] (running)
                                             *1     eval + 441 (Sandbox + 81074) [0xffffff800334fcb2] (running)
                                           *1     eval_op + 0 (Sandbox + 80400) [0xffffff800334fa10] (running)
                                           *1     sb_evaluate_internal + 6 (Sandbox + 74448) [0xffffff800334e2d0] (running)
                                       *1     EndpointSecurityEventManager::es_vnode_check_open(ucred*, vnode*, label*, int) + 0 (EndpointSecurity + 53856) [0xffffff8001c53260] (running)
                                       *1     mac_vnode_check_open + 80 (kernel + 8874048) [0xffffff8000a86840] (running)
                                     *15    vn_authorize_open_existing + 316 (kernel + 3216796) [0xffffff800052159c]
                                       *11    kauth_authorize_action + 225 (kernel + 6112849) [0xffffff80007e4651]
                                         *8     VnodeScopeListener + 630 (AppleFileUtil + 54464) [0xffffff7f9801a4c0]
                                           *8     HydrationContext_Get + 57 (AppleFileUtil + 35050) [0xffffff7f980158ea]
                                             *7     Placeholders_HasFlagsThatRequireHydration + 126 (AppleFileUtil + 56838) [0xffffff7f9801ae06]
                                               *7     Attr_Get + 109 (AppleFileUtil + 43193) [0xffffff7f980178b9]
                                                 *6     vnode_getattr + 174 (kernel + 3417790) [0xffffff80005526be]
                                                   *5     apfs_vnop_getattr + 810 (apfs + 307822) [0xffffff80033e526e]
                                                     *2     apfs_timestamp_to_timespec + 0 (apfs + 1007739) [0xffffff800349007b] (running)
                                                     *2     apfs_pack_vap_common + 895 (apfs + 310114) [0xffffff80033e5b62]
                                                       *2     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                                         *1     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                                           *1     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                             *1     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                                               *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                 *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                   *1     obj_get + 4009 (apfs + 1064276) [0xffffff800349dd54]
                                                                     *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                                       *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                                         *1     lookup_jobj_in_snap + 55 (apfs + 666830) [0xffffff800343ccce]
                                                           *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                             *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                               *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                     *1     apfs_pack_vap_common + 1602 (apfs + 310821) [0xffffff80033e5e25] (running)
                                                   *1     apfs_vnop_getattr + 141 (apfs + 307153) [0xffffff80033e4fd1]
                                                     *1     IORWLockRead + 29 (kernel + 1745853) [0xffffff80003ba3bd] (running)
                                                 *1     vnode_getattr + 67 (kernel + 3417683) [0xffffff8000552653] (running)
                                             *1     Placeholders_HasFlagsThatRequireHydration + 10 (AppleFileUtil + 56722) [0xffffff7f9801ad92] (running)
                                         *2     VnodeScopeListener + 618 (AppleFileUtil + 54452) [0xffffff7f9801a4b4]
                                           *1     Kernel_Zero_Memory + 0 (AppleFileUtil + 48915) [0xffffff7f98018f13] (running)
                                           *1     HydrationContext_Init + 62 (AppleFileUtil + 34874) [0xffffff7f9801583a] (running)
                                         *1     VnodeScopeListener + 2394 (AppleFileUtil + 56228) [0xffffff7f9801aba4] (running)
                                       *3     kauth_authorize_action + 80 (kernel + 6112704) [0xffffff80007e45c0]
                                         *2     ??? (kernel + 3210877) [0xffffff800051fe7d]
                                           *1     vnode_cache_authorized_action + 166 (kernel + 3088790) [0xffffff8000502196]
                                             *1     IORWLockWrite + 53 (kernel + 1748613) [0xffffff80003bae85] (running)
                                           *1     vnode_cache_authorized_action + 6 (kernel + 3088630) [0xffffff80005020f6] (running)
                                         *1     ??? (kernel + 3210276) [0xffffff800051fc24] (running)
                                       *1     kauth_authorize_action + 40 (kernel + 6112664) [0xffffff80007e4598] (running)
                                   *130   vn_open_auth + 2128 (kernel + 3371344) [0xffffff8000547150]
                                     *126   apfs_vnop_open + 219 (apfs + 244021) [0xffffff80033d5935]
                                       *124   decmpfs_validate_compressed_file + 194 (kernel + 3511986) [0xffffff80005696b2]
                                         *123   compression_decode_buffer + 1477 (AppleFSCompressionTypeZlib + 27652) [0xffffff800172cc04]
                                           *122   compression_decode_buffer + 3082 (AppleFSCompressionTypeZlib + 29257) [0xffffff800172d249]
                                             *122   VNOP_GETXATTR + 90 (kernel + 3439114) [0xffffff8000557a0a]
                                               *122   apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                                 *113   apfs_inode_getxattr + 457 (apfs + 295048) [0xffffff80033e2088]
                                                   *112   apfs_nstream_read + 446 (apfs + 291055) [0xffffff80033e10ef]
                                                     *112   cluster_read_ext + 394 (kernel + 3120074) [0xffffff8000509bca]
                                                       *89    ??? (kernel + 3124530) [0xffffff800050ad32]
                                                         *88    ??? (kernel + 6437640) [0xffffff8000833b08]
                                                           *88    lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                             *87    thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                               *87    ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                 *85    machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                                 *2     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (runnable)
                                                             *1     thread_block_reason + 202 (kernel + 660090) [0xffffff80002b127a] (running)
                                                         *1     ??? (kernel + 6438120) [0xffffff8000833ce8] (running)
                                                       *17    ??? (kernel + 3123727) [0xffffff800050aa0f]
                                                         *9     ??? (kernel + 3099816) [0xffffff8000504ca8]
                                                           *8     apfs_vnop_strategy + 840 (apfs + 263520) [0xffffff80033da560]
                                                             *8     buf_strategy + 378 (kernel + 3061162) [0xffffff80004fb5aa]
                                                               *8     spec_strategy + 1088 (kernel + 3476688) [0xffffff8000560cd0]
                                                                 *4     dkreadwrite(void*, dkrtype_t) + 1678 (IOStorageFamily + 54866) [0xffffff8002e6f652]
                                                                   *4     IOBlockStorageDriver::prepareRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*) + 502 (IOStorageFamily + 28458) [0xffffff8002e68f2a]
                                                                     *4     IOBlockStorageDriver::executeRequest(unsigned long long, IOMemoryDescriptor*, IOStorageAttributes*, IOStorageCompletion*, IOBlockStorageDriver::Context*) + 297 (IOStorageFamily + 17419) [0xffffff8002e6640b]
                                                                       *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 981 (IONVMeFamily + 108419) [0xffffff8002aba783]
                                                                         *1     IONVMeController::UpdateQDCounters(unsigned int) + 65 (IONVMeFamily + 56483) [0xffffff8002aadca3] (running)
                                                                       *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 844 (IONVMeFamily + 108282) [0xffffff8002aba6fa]
                                                                         *1     IODMACommand::prepare(unsigned long long, unsigned long long, bool, bool) + 847 (kernel + 8289759) [0xffffff80009f7ddf]
                                                                           *1     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1307 (kernel + 8331931) [0xffffff8000a0229b]
                                                                             *1     IOMemoryDescriptor::dmaMapRecord(IOMapper*, IODMACommand*, unsigned long long) + 88 (kernel + 8324552) [0xffffff8000a005c8] (running)
                                                                       *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 797 (IONVMeFamily + 108235) [0xffffff8002aba6cb]
                                                                         *1     IODMACommand::setMemoryDescriptor(IOMemoryDescriptor const*, bool) + 6 (kernel + 8288326) [0xffffff80009f7846] (running)
                                                                       *1     IONVMeBlockStorageDevice::doAsyncReadWrite(IOMemoryDescriptor*, unsigned long long, unsigned long long, IOStorageAttributes*, IOStorageCompletion*) + 772 (IONVMeFamily + 108210) [0xffffff8002aba6b2]
                                                                         *1     AppleNVMeRequest::BuildCommandReadStruct(NVMeRWCommand*) + 254 (IONVMeFamily + 97026) [0xffffff8002ab7b02] (running)
                                                                 *3     dkreadwrite(void*, dkrtype_t) + 1100 (IOStorageFamily + 54288) [0xffffff8002e6f410]
                                                                   *3     IOGeneralMemoryDescriptor::prepare(unsigned int) + 259 (kernel + 8334275) [0xffffff8000a02bc3]
                                                                     *2     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 620 (kernel + 8347612) [0xffffff8000a05fdc]
                                                                       *2     IOGeneralMemoryDescriptor::getPhysicalSegment(unsigned long long, unsigned long long*, unsigned int) + 479 (kernel + 8333407) [0xffffff8000a0285f]
                                                                         *2     IOGeneralMemoryDescriptor::dmaCommandOperation(unsigned int, void*, unsigned int) const + 1137 (kernel + 8331761) [0xffffff8000a021f1]
                                                                           *2     IOGeneralMemoryDescriptor::dmaMap(IOMapper*, IOMemoryDescriptor*, IODMACommand*, IODMAMapSpecification const*, unsigned long long, unsigned long long, unsigned long long*, unsigned long long*) + 527 (kernel + 8349375) [0xffffff8000a066bf]
                                                                             *2     AppleVTD::iovmMapMemory(IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 67 (IOPCIFamily + 22917) [0xffffff8002d64985]
                                                                               *2     AppleVTD::spaceMapMemory(vtd_space*, IOMemoryDescriptor*, unsigned long long, unsigned long long, unsigned int, IODMAMapSpecification const*, IODMACommand*, IODMAMapPageList const*, unsigned long long*, unsigned long long*) + 538 (IOPCIFamily + 21506) [0xffffff8002d64402]
                                                                                 *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 326 (IOPCIFamily + 11040) [0xffffff8002d61b20]
                                                                                   *1     AppleVTD::checkFree(vtd_space*, unsigned int) + 199 (IOPCIFamily + 12409) [0xffffff8002d62079]
                                                                                     *1     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                                                                       *1     ??? (kernel + 593936) [0xffffff80002a1010] (running)
                                                                                 *1     AppleVTD::space_alloc(vtd_space*, unsigned int, unsigned int, unsigned int, IODMAMapSpecification const*, upl_page_info const*) + 305 (IOPCIFamily + 11019) [0xffffff8002d61b0b]
                                                                                   *1     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                                                                     *1     ??? (kernel + 593921) [0xffffff80002a1001] (running)
                                                                     *1     IOMemoryDescriptor::ktraceEmitPhysicalSegments() + 111 (kernel + 8347103) [0xffffff8000a05ddf]
                                                                       *1     IOMallocZero_internal + 24 (kernel + 7993032) [0xffffff80009af6c8]
                                                                         *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                                           *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                                             *1     memcmp_zero_ptr_aligned + 7 (kernel + 1739975) [0xffffff80003b8cc7] (running)
                                                                 *1     dkreadwrite(void*, dkrtype_t) + 897 (IOStorageFamily + 54085) [0xffffff8002e6f345]
                                                                   *1     IOMemoryDescriptor::withOptions(void*, unsigned int, unsigned int, task*, unsigned int, IOMapper*) + 98 (kernel + 8354258) [0xffffff8000a079d2]
                                                                     *1     IOGeneralMemoryDescriptor::initWithOptions(void*, unsigned int, unsigned int, task*, unsigned int, IOMapper*) + 1239 (kernel + 8329143) [0xffffff8000a017b7]
                                                                       *1     bcopy + 18 (kernel + 4226) [0xffffff8000101082] (running)
                                                           *1     apfs_vnop_strategy + 184 (apfs + 262864) [0xffffff80033da2d0]
                                                             *1     apfs_io_common + 872 (apfs + 271561) [0xffffff80033dc4c9]
                                                               *1     lookup_file_extent + 204 (apfs + 689455) [0xffffff800344252f]
                                                                 *1     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                                   *1     _bt_lookup_variant + 413 (apfs + 939201) [0xffffff800347f4c1]
                                                                     *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                       *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                         *1     obj_get + 507 (apfs + 1060774) [0xffffff800349cfa6] (running)
                                                         *7     ??? (kernel + 3097747) [0xffffff8000504493]
                                                           *7     VNOP_BLOCKMAP + 199 (kernel + 3440487) [0xffffff8000557f67]
                                                             *6     apfs_vnop_blockmap + 2342 (apfs + 259191) [0xffffff80033d9477]
                                                               *6     lookup_file_extent + 204 (apfs + 689455) [0xffffff800344252f]
                                                                 *6     tree_lookup_le + 44 (apfs + 849693) [0xffffff800346971d]
                                                                   *3     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                                     *3     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                                       *3     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                                         *1     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                                                           *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                                                         *1     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                                                         *1     obj_get + 507 (apfs + 1060774) [0xffffff800349cfa6] (running)
                                                                   *2     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                                                     *2     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                                                       *2     bt_search_node_insert + 143 (apfs + 902509) [0xffffff800347656d]
                                                                         *1     btree_node_key_ptr + 46 (apfs + 896635) [0xffffff8003474e7b] (running)
                                                                         *1     btree_node_key_ptr + 8 (apfs + 896597) [0xffffff8003474e55] (running)
                                                                   *1     _bt_lookup_variant + 540 (apfs + 939328) [0xffffff800347f540]
                                                                     *1     obj_retain + 38 (apfs + 1065034) [0xffffff800349e04a] (running)
                                                             *1     invalid_ranges_offset_is_invalid + 0 (apfs + 830343) [0xffffff8003464b87] (running)
                                                         *1     ??? (kernel + 3097657) [0xffffff8000504439] (running)
                                                       *3     ??? (kernel + 3121913) [0xffffff800050a2f9]
                                                         *3     ??? (kernel + 3117848) [0xffffff8000509318]
                                                           *3     memory_object_control_uiomove + 292 (kernel + 1050612) [0xffffff80003107f4]
                                                             *3     lck_rw_sleep + 115 (kernel + 597667) [0xffffff80002a1ea3]
                                                               *3     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                 *3     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                   *3     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                                       *2     ??? (kernel + 3122505) [0xffffff800050a549]
                                                         *2     ubc_create_upl_kernel + 272 (kernel + 6637648) [0xffffff8000864850]
                                                           *1     ??? (kernel + 1343827) [0xffffff8000358153] (running)
                                                           *1     ??? (kernel + 1341879) [0xffffff80003579b7] (running)
                                                       *1     ??? (kernel + 3117712) [0xffffff8000509290] (running)
                                                   *1     apfs_nstream_read + 1148 (apfs + 291757) [0xffffff80033e13ad] (running)
                                                 *9     apfs_inode_getxattr + 341 (apfs + 294932) [0xffffff80033e2014]
                                                   *2     apfs_get_namedstream_vnode + 1297 (apfs + 297614) [0xffffff80033e2a8e]
                                                     *1     ??? (kernel + 3189157) [0xffffff800051a9a5]
                                                       *1     ??? (kernel + 3081195) [0xffffff80005003eb] (running)
                                                     *1     ??? (kernel + 3187749) [0xffffff800051a425]
                                                       *1     ??? (kernel + 6636113) [0xffffff8000864251]
                                                         *1     memory_object_create_named + 45 (kernel + 1302477) [0xffffff800034dfcd]
                                                           *1     vm_object_memory_object_associate + 357 (kernel + 1300741) [0xffffff800034d905]
                                                             *1     ??? (kernel + 1274457) [0xffffff8000347259]
                                                               *1     lck_rw_init + 102 (kernel + 1744694) [0xffffff80003b9f36] (running)
                                                   *1     apfs_get_namedstream_vnode + 2303 (apfs + 298620) [0xffffff80033e2e7c]
                                                     *1     _apfs_calloc + 63 (apfs + 657283) [0xffffff800343a783]
                                                       *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                         *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                           *1     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                                   *1     apfs_get_namedstream_vnode + 2059 (apfs + 298376) [0xffffff80033e2d88]
                                                     *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                       *1     ??? (kernel + 898757) [0xffffff80002eb6c5]
                                                         *1     ??? (kernel + 900464) [0xffffff80002ebd70] (running)
                                                   *1     apfs_get_namedstream_vnode + 1936 (apfs + 298253) [0xffffff80033e2d0d] (running)
                                                   *1     apfs_get_namedstream_vnode + 1613 (apfs + 297930) [0xffffff80033e2bca]
                                                     *1     vnode_put + 24 (kernel + 3180184) [0xffffff8000518698]
                                                       *1     ??? (kernel + 3171391) [0xffffff800051643f]
                                                         *1     ??? (kernel + 3172627) [0xffffff8000516913]
                                                           *1     ??? (kernel + 3174796) [0xffffff800051718c]
                                                             *1     apfs_vnop_fsync + 92 (apfs + 246606) [0xffffff80033d634e]
                                                               *1     apfs_fsync_internal + 910 (apfs + 285535) [0xffffff80033dfb5f]
                                                                 *1     _tx_remove_dirty_work_item + 71 (apfs + 1156280) [0xffffff80034b44b8]
                                                                   *1     ??? (kernel + 1753211) [0xffffff80003bc07b]
                                                                     *1     lck_mtx_lock_wait_x86 + 326 (kernel + 1755158) [0xffffff80003bc816]
                                                                       *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                         *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                           *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b] (blocked by turnstile with priority 81 waiting for launchd [1] thread 0x84a155)
                                                   *1     apfs_get_namedstream_vnode + 1074 (apfs + 297391) [0xffffff80033e29af]
                                                     *1     snprintf + 107 (kernel + 6546267) [0xffffff800084e35b]
                                                       *1     __doprnt + 544 (kernel + 622688) [0xffffff80002a8060] (running)
                                                   *1     apfs_get_namedstream_vnode + 808 (apfs + 297125) [0xffffff80033e28a5]
                                                     *1     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                                       *1     lookup_jobj_in_snap + 55 (apfs + 666830) [0xffffff800343ccce]
                                                         *1     _apfs_zalloc + 41 (apfs + 657436) [0xffffff800343a81c]
                                                           *1     ??? (kernel + 902703) [0xffffff80002ec62f]
                                                             *1     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                                                   *1     apfs_get_namedstream_vnode + 474 (apfs + 296791) [0xffffff80033e2757]
                                                     *1     apfs_jhash_getvnode_internal + 120 (apfs + 658025) [0xffffff800343aa69]
                                                       *1     object_in_jhash + 87 (apfs + 658422) [0xffffff800343abf6] (running)
                                           *1     compression_decode_buffer + 3029 (AppleFSCompressionTypeZlib + 29204) [0xffffff800172d214]
                                             *1     uio_create + 70 (kernel + 6435750) [0xffffff80008333a6]
                                               *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                 *1     ??? (kernel + 899258) [0xffffff80002eb8ba] (running)
                                         *1     compression_decode_buffer + 1047 (AppleFSCompressionTypeZlib + 27222) [0xffffff800172ca56]
                                           *1     VNOP_GETXATTR + 90 (kernel + 3439114) [0xffffff8000557a0a]
                                             *1     apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                               *1     apfs_inode_getxattr + 798 (apfs + 295389) [0xffffff80033e21dd]
                                                 *1     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                                   *1     lookup_jobj_in_snap + 299 (apfs + 667074) [0xffffff800343cdc2]
                                                     *1     __bzero + 6 (kernel + 4342) [0xffffff80001010f6] (running)
                                       *1     compression_decode_buffer + 825 (AppleFSCompressionTypeZlib + 27000) [0xffffff800172c978] (running)
                                       *1     decmpfs_validate_compressed_file + 278 (kernel + 3512070) [0xffffff8000569706]
                                         *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                     *3     apfs_vnop_open + 193 (apfs + 243995) [0xffffff80033d591b]
                                       *3     decmpfs_file_is_compressed + 583 (kernel + 3514743) [0xffffff800056a177]
                                         *2     ??? (kernel + 3512909) [0xffffff8000569a4d]
                                           *2     vn_getxattr + 631 (kernel + 3376359) [0xffffff80005484e7]
                                             *2     apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                               *1     apfs_inode_getxattr + 1571 (apfs + 296162) [0xffffff80033e24e2]
                                                 *1     xattr_io2 + 639 (apfs + 301292) [0xffffff80033e38ec]
                                                   *1     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                                     *1     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                                       *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                         *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                           *1     obj_get + 2025 (apfs + 1062292) [0xffffff800349d594]
                                                             *1     obj_read + 449 (apfs + 1065503) [0xffffff800349e21f]
                                                               *1     vnode_dev_read + 21 (apfs + 13883) [0xffffff800339d63b]
                                                                 *1     _vnode_dev_read + 544 (apfs + 18283) [0xffffff800339e76b]
                                                                   *1     buf_biowait + 133 (kernel + 3063093) [0xffffff80004fbd35]
                                                                     *1     ??? (kernel + 6437640) [0xffffff8000833b08]
                                                                       *1     lck_mtx_sleep + 104 (kernel + 595480) [0xffffff80002a1618]
                                                                         *1     thread_block_reason + 175 (kernel + 660063) [0xffffff80002b125f]
                                                                           *1     ??? (kernel + 666306) [0xffffff80002b2ac2]
                                                                             *1     machine_switch_context + 203 (kernel + 1767499) [0xffffff80003bf84b]
                                               *1     apfs_inode_getxattr + 798 (apfs + 295389) [0xffffff80033e21dd]
                                                 *1     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                                   *1     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                                     *1     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                       *1     _bt_lookup_variant + 1478 (apfs + 940266) [0xffffff800347f8ea]
                                                         *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                           *1     apfs_key_compare + 462 (apfs + 674150) [0xffffff800343e966]
                                                             *1     apfs_cstrncmp + 42 (apfs + 678022) [0xffffff800343f886] (running)
                                         *1     ??? (kernel + 3512620) [0xffffff800056992c]
                                           *1     vn_getxattr + 631 (kernel + 3376359) [0xffffff80005484e7]
                                             *1     apfs_vnop_getxattr + 172 (apfs + 294580) [0xffffff80033e1eb4]
                                               *1     apfs_inode_getxattr + 798 (apfs + 295389) [0xffffff80033e21dd]
                                                 *1     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                                   *1     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                                     *1     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                       *1     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                         *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                           *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                             *1     obj_get + 965 (apfs + 1061232) [0xffffff800349d170] (running)
                                     *1     get_vol_crypto + 0 (apfs + 842846) [0xffffff8003467c5e] (running)
                                   *7     vn_open_auth + 3064 (kernel + 3372280) [0xffffff80005474f8]
                                     *4     kauth_authorize_fileop + 204 (kernel + 6113388) [0xffffff80007e486c]
                                       *1     build_path_with_parent + 748 (kernel + 3083932) [0xffffff8000500e9c] (running)
                                       *1     build_path_with_parent + 626 (kernel + 3083810) [0xffffff8000500e22] (running)
                                       *1     build_path_with_parent + 605 (kernel + 3083789) [0xffffff8000500e0d] (running)
                                       *1     build_path_with_parent + 499 (kernel + 3083683) [0xffffff8000500da3] (running)
                                     *1     kauth_authorize_fileop + 419 (kernel + 6113603) [0xffffff80007e4943] (running)
                                     *1     kauth_authorize_fileop + 362 (kernel + 6113546) [0xffffff80007e490a]
                                       *1     ??? (kernel + 905972) [0xffffff80002ed2f4] (running)
                                     *1     kauth_authorize_fileop + 106 (kernel + 6113290) [0xffffff80007e480a]
                                       *1     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                   *1     vn_open_auth + 2627 (kernel + 3371843) [0xffffff8000547343] (running)
                                   *1     vn_open_auth + 2205 (kernel + 3371421) [0xffffff800054719d]
                                     *1     lck_mtx_lock_spin_always + 6 (kernel + 1757702) [0xffffff80003bd206] (running)
                                   *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                 *2     ??? (kernel + 3264502) [0xffffff800052cff6]
                                   *2     falloc_withalloc + 220 (kernel + 6188300) [0xffffff80007f6d0c]
                                     *2     ??? (kernel + 900610) [0xffffff80002ebe02] (running)
                                 *2     IOLockLock + 33 (kernel + 1757361) [0xffffff80003bd0b1] (running)
                                 *1     falloc_withalloc + 0 (kernel + 6188080) [0xffffff80007f6c30] (running)
                               *2     open_nocancel + 127 (kernel + 3267375) [0xffffff800052db2f]
                                 *2     ??? (kernel + 579084) [0xffffff800029d60c]
                                   *2     ??? (kernel + 902703) [0xffffff80002ec62f]
                                     *1     memcmp_zero_ptr_aligned + 91 (kernel + 1740059) [0xffffff80003b8d1b] (running)
                                     *1     memcmp_zero_ptr_aligned + 69 (kernel + 1740037) [0xffffff80003b8d05] (running)
                               *1     vfs_context_proc + 0 (kernel + 3413408) [0xffffff80005515a0] (running)
                               *1     open_nocancel + 336 (kernel + 3267584) [0xffffff800052dc00]
                                 *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                   *1     __bzero + 6 (kernel + 4342) [0xffffff80001010f6] (running)
                               *1     open_nocancel + 94 (kernel + 3267342) [0xffffff800052db0e]
                                 *1     vfs_context_proc + 90 (kernel + 3413498) [0xffffff80005515fa] (running)
                               *1     open + 13 (kernel + 3267197) [0xffffff800052da7d] (running)
                             *21    unix_syscall64 + 694 (kernel + 7540118) [0xffffff8000940d96]
                               *11    audit_syscall_enter + 290 (kernel + 5934674) [0xffffff80007b8e52]
                                 *6     audit_new + 393 (kernel + 5932569) [0xffffff80007b8619]
                                   *5     audit_mac_new + 109 (kernel + 5992429) [0xffffff80007c6fed]
                                     *3     mac_externalize + 132 (kernel + 8818724) [0xffffff8000a79024]
                                       *2     ??? (kernel + 579084) [0xffffff800029d60c]
                                         *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                         *1     ??? (kernel + 898757) [0xffffff80002eb6c5]
                                           *1     ??? (kernel + 903079) [0xffffff80002ec7a7]
                                             *1     ??? (kernel + 905972) [0xffffff80002ed2f4] (running)
                                       *1     ??? (kernel + 579076) [0xffffff800029d604] (running)
                                     *1     mac_externalize + 703 (kernel + 8819295) [0xffffff8000a7925f] (running)
                                     *1     mac_externalize + 690 (kernel + 8819282) [0xffffff8000a79252] (running)
                                   *1     audit_mac_new + 120 (kernel + 5992440) [0xffffff80007c6ff8]
                                     *1     kauth_cred_unref + 26 (kernel + 6136458) [0xffffff80007ea28a] (running)
                                 *3     audit_new + 108 (kernel + 5932284) [0xffffff80007b84fc]
                                   *2     ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
                                   *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                 *1     audit_new + 207 (kernel + 5932383) [0xffffff80007b855f]
                                   *1     IOLockLock + 64 (kernel + 1757392) [0xffffff80003bd0d0] (running)
                                 *1     audit_new + 175 (kernel + 5932351) [0xffffff80007b853f]
                                   *1     clock_get_calendar_nanotime + 129 (kernel + 488321) [0xffffff8000287381] (running)
                               *6     audit_syscall_enter + 370 (kernel + 5934754) [0xffffff80007b8ea2]
                                 *3     audit_identity_info_construct + 70 (kernel + 5941478) [0xffffff80007ba8e6]
                                   *1     ubc_cs_blob_get + 148 (kernel + 6646532) [0xffffff8000866b04]
                                     *1     lck_mtx_unlock_slow + 186 (kernel + 1752202) [0xffffff80003bbc8a] (running)
                                   *1     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                   *1     lck_mtx_lock_spin_always + 6 (kernel + 1757702) [0xffffff80003bd206] (running)
                                 *1     audit_identity_info_construct + 986 (kernel + 5942394) [0xffffff80007bac7a]
                                   *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                     *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                 *1     audit_identity_info_construct + 95 (kernel + 5941503) [0xffffff80007ba8ff]
                                   *1     csblob_find_blob + 16 (kernel + 6635280) [0xffffff8000863f10] (running)
                                 *1     audit_identity_info_construct + 34 (kernel + 5941442) [0xffffff80007ba8c2] (running)
                               *1     audit_identity_info_construct + 1 (kernel + 5941409) [0xffffff80007ba8a1] (running)
                               *1     audit_syscall_enter + 122 (kernel + 5934506) [0xffffff80007b8daa]
                                 *1     mac_audit_check_preselect + 78 (kernel + 8813694) [0xffffff8000a77c7e] (running)
                               *1     audit_syscall_enter + 104 (kernel + 5934488) [0xffffff80007b8d98]
                                 *1     au_event_class + 69 (kernel + 5976133) [0xffffff80007c3045] (running)
                               *1     audit_syscall_enter + 77 (kernel + 5934461) [0xffffff80007b8d7d]
                                 *1     IOLockUnlock + 45 (kernel + 1758061) [0xffffff80003bd36d] (running)
                             *8     unix_syscall64 + 746 (kernel + 7540170) [0xffffff8000940dca]
                               *7     audit_syscall_exit + 84 (kernel + 5934916) [0xffffff80007b8f44]
                                 *1     audit_flags_and_error_to_openevent + 0 (kernel + 5977360) [0xffffff80007c3510] (running)
                                 *1     audit_commit + 495 (kernel + 5933839) [0xffffff80007b8b0f]
                                   *1     audit_pipe_preselect + 51 (kernel + 5993651) [0xffffff80007c74b3]
                                     *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                 *1     audit_commit + 406 (kernel + 5933750) [0xffffff80007b8ab6]
                                   *1     au_event_class + 21 (kernel + 5976085) [0xffffff80007c3015]
                                     *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                 *1     audit_free + 578 (kernel + 5933266) [0xffffff80007b88d2]
                                   *1     audit_mac_free + 140 (kernel + 5992700) [0xffffff80007c70fc]
                                     *1     ??? (kernel + 905989) [0xffffff80002ed305] (running)
                                 *1     audit_free + 560 (kernel + 5933248) [0xffffff80007b88c0]
                                   *1     audit_identity_info_destruct + 76 (kernel + 5941260) [0xffffff80007ba80c]
                                     *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                       *1     ??? (kernel + 906177) [0xffffff80002ed3c1] (running)
                                 *1     audit_free + 182 (kernel + 5932870) [0xffffff80007b8746]
                                   *1     ??? (kernel + 580266) [0xffffff800029daaa]
                                     *1     __bzero + 6 (kernel + 4342) [0xffffff80001010f6] (running)
                                 *1     audit_free + 148 (kernel + 5932836) [0xffffff80007b8724] (running)
                               *1     audit_syscall_exit + 62 (kernel + 5934894) [0xffffff80007b8f2e]
                                 *1     audit_mac_syscall_exit + 82 (kernel + 5993074) [0xffffff80007c7272]
                                   *1     mac_audit_check_postselect + 113 (kernel + 8814033) [0xffffff8000a77dd1] (running)
                             *1     unix_syscall64 + 866 (kernel + 7540290) [0xffffff8000940e42] (running)
                           *7     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                           *2     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                           *2     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                             *2     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                          4     __open + 10 (libsystem_kernel.dylib + 7106) [0x7fff203fdbc2] (running)
                        10    Security::UnixPlusPlus::FileDesc::open(char const*, int, unsigned short) + 87 (Security + 2806375) [0x7fff22566267]
                          7     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                            2     secLogObjForCFScope + 42 (Security + 2860691) [0x7fff22573693]
                              2     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e]
                               *1     ??? (kernel + 6586192) [0xffffff8000857f50] (runnable)
                               *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                            2     os_unfair_lock_lock_with_options + 14 (libsystem_platform.dylib + 3758) [0x7fff20474eae] (running)
                            1     secLogObjForCFScope + 233 (Security + 2860882) [0x7fff22573752]
                              1     __ulock_wake + 10 (libsystem_kernel.dylib + 10974) [0x7fff203feade]
                               *1     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                                 *1     unix_syscall64 + 630 (kernel + 7540054) [0xffffff8000940d56] (running)
                            1     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                              1     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                                1     objc_msgSend + 0 (libobjc.A.dylib + 26624) [0x7fff202d0800] (running)
                            1     os_unfair_lock_lock_with_options + 0 (libsystem_platform.dylib + 3744) [0x7fff20474ea0] (running)
                          2     secLogObjForScope + 83 (Security + 2861155) [0x7fff22573863]
                            1     DYLD-STUB$$strlen + 0 (CoreFoundation + 1829444) [0x7fff20668a44] (running)
                            1     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                              1     __CFStringCreateImmutableFunnel3 + 94 (CoreFoundation + 11742) [0x7fff204acdde]
                                1     _CFGetTSDCreateIfNeeded + 28 (CoreFoundation + 20042) [0x7fff204aee4a]
                                  1     __CFTSDGetTable + 15 (CoreFoundation + 20128) [0x7fff204aeea0] (running)
                          1     secLogObjForScope + 28 (Security + 2861100) [0x7fff2257382c]
                            1     pthread_mutex_lock + 105 (libsystem_pthread.dylib + 7759) [0x7fff2042de4f] (running)
                      39    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4786 (Security + 1709444) [0x7fff2245a584]
                        32    close + 10 (libsystem_kernel.dylib + 7462) [0x7fff203fdd26]
                         *29    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                           *26    unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                             *14    ??? (kernel + 6162158) [0xffffff80007f06ee]
                               *13    ??? (kernel + 6154814) [0xffffff80007eea3e]
                                 *8     ??? (kernel + 3366546) [0xffffff8000545e92]
                                   *4     vn_close + 398 (kernel + 3367982) [0xffffff800054642e]
                                     *1     vnode_rele_internal + 636 (kernel + 3176076) [0xffffff800051768c]
                                       *1     _rtc_nanotime_read + 43 (kernel + 139483) [0xffffff80002320db] (running)
                                     *1     vnode_rele_internal + 50 (kernel + 3175490) [0xffffff8000517442] (running)
                                     *1     lck_mtx_lock_spin_always + 47 (kernel + 1757743) [0xffffff80003bd22f] (running)
                                     *1     lck_mtx_lock_spin_always + 36 (kernel + 1757732) [0xffffff80003bd224] (running)
                                   *3     vn_close + 299 (kernel + 3367883) [0xffffff80005463cb]
                                     *1     apfs_vnop_close + 85 (apfs + 244810) [0xffffff80033d5c4a] (running)
                                     *1     apfs_vnop_close + 77 (apfs + 244802) [0xffffff80033d5c42] (running)
                                     *1     apfs_vnop_close + 43 (apfs + 244768) [0xffffff80033d5c20]
                                       *1     vfs_context_proc + 90 (kernel + 3413498) [0xffffff80005515fa] (running)
                                   *1     vn_close + 292 (kernel + 3367876) [0xffffff80005463c4] (running)
                                 *5     ??? (kernel + 3366566) [0xffffff8000545ea6]
                                   *4     ??? (kernel + 3173517) [0xffffff8000516c8d]
                                     *3     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                       *2     ??? (kernel + 593924) [0xffffff80002a1004] (running)
                                       *1     ??? (kernel + 593936) [0xffffff80002a1010] (running)
                                     *1     ??? (kernel + 1743504) [0xffffff80003b9a90] (running)
                                   *1     ??? (kernel + 3171134) [0xffffff800051633e]
                                     *1     apfs_vnop_inactive + 0 (apfs + 246625) [0xffffff80033d6361] (running)
                               *1     ??? (kernel + 6154968) [0xffffff80007eead8]
                                 *1     mac_file_label_destroy + 240 (kernel + 8945760) [0xffffff8000a98060]
                                   *1     ??? (kernel + 906076) [0xffffff80002ed35c] (running)
                             *10    ??? (kernel + 6161068) [0xffffff80007f02ac]
                               *4     kauth_authorize_fileop + 464 (kernel + 6113648) [0xffffff80007e4970]
                                 *3     OSIncrementAtomic + 0 (kernel + 7593648) [0xffffff800094deb0] (running)
                                 *1     FileopScopeListener + 35 (AppleFileUtil + 28835) [0xffffff7f980140a3] (running)
                               *4     kauth_authorize_fileop + 204 (kernel + 6113388) [0xffffff80007e486c]
                                 *1     build_path_with_parent + 965 (kernel + 3084149) [0xffffff8000500f75] (running)
                                 *1     build_path_with_parent + 580 (kernel + 3083764) [0xffffff8000500df4] (running)
                                 *1     build_path_with_parent + 548 (kernel + 3083732) [0xffffff8000500dd4] (running)
                                 *1     build_path_with_parent + 271 (kernel + 3083455) [0xffffff8000500cbf]
                                   *1     IORWLockRead + 387 (kernel + 1746211) [0xffffff80003ba523] (running)
                               *1     kauth_authorize_fileop + 32 (kernel + 6113216) [0xffffff80007e47c0] (running)
                               *1     ??? (kernel + 900849) [0xffffff80002ebef1] (running)
                             *1     ??? (kernel + 6162147) [0xffffff80007f06e3]
                               *1     ??? (kernel + 906076) [0xffffff80002ed35c] (running)
                             *1     IOLockLock + 33 (kernel + 1757361) [0xffffff80003bd0b1] (running)
                           *3     unix_syscall64 + 694 (kernel + 7540118) [0xffffff8000940d96]
                             *2     audit_syscall_enter + 104 (kernel + 5934488) [0xffffff80007b8d98]
                               *1     au_event_class + 80 (kernel + 5976144) [0xffffff80007c3050] (running)
                               *1     au_event_class + 21 (kernel + 5976085) [0xffffff80007c3015]
                                 *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                             *1     audit_syscall_enter + 77 (kernel + 5934461) [0xffffff80007b8d7d]
                               *1     kauth_cred_proc_ref + 46 (kernel + 6136158) [0xffffff80007ea15e] (running)
                         *2     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                         *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                        4     close + 10 (libsystem_kernel.dylib + 7462) [0x7fff203fdd26] (running)
                        3     Security::UnixPlusPlus::FileDesc::closeAndLog() + 65 (Security + 2806793) [0x7fff22566409]
                          2     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                            1     DYLD-STUB$$os_unfair_lock_lock_with_options + 0 (Security + 2892718) [0x7fff2257b3ae] (running)
                            1     secLogObjForCFScope + 42 (Security + 2860691) [0x7fff22573693]
                              1     _os_unfair_lock_lock_slow + 162 (libsystem_platform.dylib + 8389) [0x7fff204760c5]
                               *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                          1     secLogObjForScope + 28 (Security + 2861100) [0x7fff2257382c]
                            1     pthread_mutex_lock + 11 (libsystem_pthread.dylib + 7665) [0x7fff2042ddf1] (running)
                      37    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 125 (Security + 1704783) [0x7fff2245934f]
                        24    Security::makeCFURL(char const*, bool, __CFURL const*) + 155 (Security + 2795613) [0x7fff2256385d]
                          14    _CFURLCreateWithFileSystemPath + 1075 (CoreFoundation + 1166491) [0x7fff205c6c9b]
                            7     POSIXPathToURLPath + 203 (CoreFoundation + 61324) [0x7fff204b8f8c]
                              3     CreateStringFromFileSystemRepresentationByAddingPercentEscapes + 754 (CoreFoundation + 63199) [0x7fff204b96df]
                                3     CFStringCreateWithBytes + 27 (CoreFoundation + 63382) [0x7fff204b9796]
                                  1     _CFRuntimeCreateInstance + 0 (CoreFoundation + 15548) [0x7fff204adcbc] (running)
                                  1     __CFStringCreateImmutableFunnel3 + 2127 (CoreFoundation + 13775) [0x7fff204ad5cf] (running)
                                  1     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                                    1     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                      1     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                        1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                          1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                            1     tiny_malloc_from_free_list + 211 (libsystem_malloc.dylib + 16130) [0x7fff2025bf02] (running)
                              1     CreateStringFromFileSystemRepresentationByAddingPercentEscapes + 519 (CoreFoundation + 62964) [0x7fff204b95f4] (running)
                              1     CreateStringFromFileSystemRepresentationByAddingPercentEscapes + 457 (CoreFoundation + 62902) [0x7fff204b95b6] (running)
                              1     CreateStringFromFileSystemRepresentationByAddingPercentEscapes + 412 (CoreFoundation + 62857) [0x7fff204b9589] (running)
                              1     CreateStringFromFileSystemRepresentationByAddingPercentEscapes + 72 (CoreFoundation + 62517) [0x7fff204b9435] (running)
                            5     POSIXPathToURLPath + 138 (CoreFoundation + 61259) [0x7fff204b8f4b]
                              5     CFStringGetFileSystemRepresentation + 11 (CoreFoundation + 61645) [0x7fff204b90cd]
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 679 (CoreFoundation + 62338) [0x7fff204b9382] (running)
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 606 (CoreFoundation + 62265) [0x7fff204b9339] (running)
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 268 (CoreFoundation + 61927) [0x7fff204b91e7] (running)
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 263 (CoreFoundation + 61922) [0x7fff204b91e2]
                                 *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 259 (CoreFoundation + 61918) [0x7fff204b91de] (running)
                            2     POSIXPathToURLPath + 77 (CoreFoundation + 61198) [0x7fff204b8f0e]
                              1     CFStringGetFastestEncoding + 0 (CoreFoundation + 61518) [0x7fff204b904e] (running)
                              1     CFStringGetMaximumSizeOfFileSystemRepresentation + 26 (CoreFoundation + 61431) [0x7fff204b8ff7]
                                1     CFStringGetFastestEncoding + 56 (CoreFoundation + 61574) [0x7fff204b9086] (running)
                          3     _CFURLCreateWithFileSystemPath + 148 (CoreFoundation + 1165564) [0x7fff205c68fc]
                            3     CFStringHasPrefix + 55 (CoreFoundation + 46461) [0x7fff204b557d]
                              1     CFStringFindWithOptionsAndLocale + 12524 (CoreFoundation + 59007) [0x7fff204b867f] (running)
                              1     CFStringFindWithOptionsAndLocale + 10640 (CoreFoundation + 57123) [0x7fff204b7f23] (running)
                              1     CFStringFindWithOptionsAndLocale + 288 (CoreFoundation + 46771) [0x7fff204b56b3]
                                1     _CFStringGetCStringPtrInternal + 141 (CoreFoundation + 60596) [0x7fff204b8cb4] (running)
                          3     _CFURLCreateWithFileSystemPath + 2676 (CoreFoundation + 1168092) [0x7fff205c72dc]
                            2     CFURLCopyAbsoluteURL + 300 (CoreFoundation + 64710) [0x7fff204b9cc6]
                              1     _CFRetain + 176 (CoreFoundation + 1165341) [0x7fff205c681d] (running)
                              1     _CFRetain + 68 (CoreFoundation + 1165233) [0x7fff205c67b1] (running)
                            1     CFGetAllocator + 0 (CoreFoundation + 31690) [0x7fff204b1bca] (running)
                          1     _CFURLCreateWithFileSystemPath + 2968 (CoreFoundation + 1168384) [0x7fff205c7400]
                            1     _CFRelease + 474 (CoreFoundation + 1361312) [0x7fff205f65a0] (running)
                          1     _CFURLCreateWithFileSystemPath + 2620 (CoreFoundation + 1168036) [0x7fff205c72a4]
                            1     _CFRuntimeCreateInstance + 587 (CoreFoundation + 16135) [0x7fff204adf07]
                              1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                  1     tiny_malloc_should_clear + 971 (libsystem_malloc.dylib + 15247) [0x7fff2025bb8f] (running)
                          1     _CFURLCreateWithFileSystemPath + 2413 (CoreFoundation + 1167829) [0x7fff205c71d5]
                           *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                             *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                          1     CFStringGetCharacterAtIndex + 156 (CoreFoundation + 46392) [0x7fff204b5538] (running)
                        7     Security::makeCFURL(char const*, bool, __CFURL const*) + 44 (Security + 2795502) [0x7fff225637ee]
                          7     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                            5     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                              2     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                2     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                  2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                    1     _platform_memset$VARIANT$Haswell + 0 (libsystem_platform.dylib + 5216) [0x7fff20475460] (running)
                                    1     tiny_malloc_should_clear + 971 (libsystem_malloc.dylib + 15247) [0x7fff2025bb8f] (running)
                              1     _CFRuntimeCreateInstance + 513 (CoreFoundation + 16061) [0x7fff204adebd] (running)
                              1     _CFRuntimeCreateInstance + 472 (CoreFoundation + 16020) [0x7fff204ade94] (running)
                              1     object_setClass + 5 (libobjc.A.dylib + 38285) [0x7fff202d358d] (running)
                            1     __CFStringCreateImmutableFunnel3 + 2373 (CoreFoundation + 14021) [0x7fff204ad6c5]
                              1     _platform_memmove$VARIANT$Haswell + 24 (libsystem_platform.dylib + 4120) [0x7fff20475018] (running)
                            1     __CFStringCreateImmutableFunnel3 + 1561 (CoreFoundation + 13209) [0x7fff204ad399] (running)
                        4     Security::makeCFURL(char const*, bool, __CFURL const*) + 188 (Security + 2795646) [0x7fff2256387e]
                          4     Security::CFRef<__CFString const*>::~CFRef() + 17 (Security + 1621211) [0x7fff22444cdb]
                            1     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                              1     free_tiny + 535 (libsystem_malloc.dylib + 25206) [0x7fff2025e276] (running)
                            1     _CFRelease + 899 (CoreFoundation + 1361737) [0x7fff205f6749]
                              1     objc_destructInstance + 4 (libobjc.A.dylib + 34264) [0x7fff202d25d8] (running)
                            1     object_getClass + 24 (libobjc.A.dylib + 38434) [0x7fff202d3622] (running)
                            1     szone_free + 0 (libsystem_malloc.dylib + 24016) [0x7fff2025ddd0]
                             *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                               *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                        2     _CFURLCreateWithFileSystemPath + 0 (CoreFoundation + 1165416) [0x7fff205c6868] (running)
                      33    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4067 (Security + 1708725) [0x7fff2245a2b5]
                        32    Security::cfString(__CFURL const*) + 87 (Security + 2797280) [0x7fff22563ee0]
                          26    CFURLGetFileSystemRepresentation + 175 (CoreFoundation + 95175) [0x7fff204c13c7]
                            10    CFURLCreateStringWithFileSystemPath + 71 (CoreFoundation + 89197) [0x7fff204bfc6d]
                              7     CFURLCreateStringWithFileSystemPath + 165 (CoreFoundation + 89291) [0x7fff204bfccb]
                                3     _retainedComponentString + 687 (CoreFoundation + 91489) [0x7fff204c0561]
                                  1     CFURLCreateStringByReplacingPercentEscapes + 1643 (CoreFoundation + 93651) [0x7fff204c0dd3]
                                    1     CFStringCreateWithBytes + 27 (CoreFoundation + 63382) [0x7fff204b9796]
                                      1     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                                        1     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                          1     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                            1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                              1     tiny_malloc_should_clear + 55 (libsystem_malloc.dylib + 14331) [0x7fff2025b7fb] (running)
                                  1     CFURLCreateStringByReplacingPercentEscapes + 1621 (CoreFoundation + 93629) [0x7fff204c0dbd] (running)
                                  1     CFStringGetBytes + 0 (CoreFoundation + 66260) [0x7fff204ba2d4] (running)
                                2     _retainedComponentString + 715 (CoreFoundation + 91517) [0x7fff204c057d]
                                  1     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                                    1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                                      1     tiny_free_no_lock + 2077 (libsystem_malloc.dylib + 27512) [0x7fff2025eb78] (running)
                                  1     szone_free + 0 (libsystem_malloc.dylib + 24016) [0x7fff2025ddd0] (running)
                                1     _retainedComponentString + 116 (CoreFoundation + 90918) [0x7fff204c0326]
                                  1     CFStringCreateWithSubstring + 367 (CoreFoundation + 91984) [0x7fff204c0750]
                                    1     __CFStringCreateImmutableFunnel3 + 2147 (CoreFoundation + 13795) [0x7fff204ad5e3] (running)
                                1     _retainedComponentString + 75 (CoreFoundation + 90877) [0x7fff204c02fd] (running)
                              1     _CFRelease + 0 (CoreFoundation + 1360838) [0x7fff205f63c6] (running)
                              1     _retainedComponentString + 1 (CoreFoundation + 90803) [0x7fff204c02b3] (running)
                              1     CFURLCreateStringWithFileSystemPath + 1007 (CoreFoundation + 90133) [0x7fff204c0015]
                                1     _CFRelease + 314 (CoreFoundation + 1361152) [0x7fff205f6500] (running)
                            7     CFURLCreateStringWithFileSystemPath + 878 (CoreFoundation + 90004) [0x7fff204bff94]
                              7     URLPathToPOSIXPath + 33 (CoreFoundation + 431271) [0x7fff205134a7]
                                4     CFURLCreateStringByReplacingPercentEscapes + 1643 (CoreFoundation + 93651) [0x7fff204c0dd3]
                                  4     CFStringCreateWithBytes + 27 (CoreFoundation + 63382) [0x7fff204b9796]
                                    2     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                                      2     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                        2     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                          2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                            1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                              1     set_tiny_meta_header_in_use + 54 (libsystem_malloc.dylib + 17804) [0x7fff2025c58c] (running)
                                            1     tiny_malloc_should_clear + 142 (libsystem_malloc.dylib + 14418) [0x7fff2025b852]
                                              1     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e]
                                               *1     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                                                 *1     unix_syscall64 + 730 (kernel + 7540154) [0xffffff8000940dba] (running)
                                    1     __CFStringCreateImmutableFunnel3 + 2748 (CoreFoundation + 14396) [0x7fff204ad83c] (running)
                                    1     __CFStringCreateImmutableFunnel3 + 8 (CoreFoundation + 11656) [0x7fff204acd88] (running)
                                1     CFURLCreateStringByReplacingPercentEscapes + 1609 (CoreFoundation + 93617) [0x7fff204c0db1] (running)
                                1     CFURLCreateStringByReplacingPercentEscapes + 1549 (CoreFoundation + 93557) [0x7fff204c0d75] (running)
                                1     CFURLCreateStringByReplacingPercentEscapes + 1501 (CoreFoundation + 93509) [0x7fff204c0d45]
                                  1     CFStringGetBytes + 673 (CoreFoundation + 66933) [0x7fff204ba575]
                                    1     _platform_memmove$VARIANT$Haswell + 272 (libsystem_platform.dylib + 4368) [0x7fff20475110] (running)
                            4     CFURLCreateStringWithFileSystemPath + 1503 (CoreFoundation + 90629) [0x7fff204c0205]
                              2     CFStringCreateWithCharactersNoCopy + 45 (CoreFoundation + 76917) [0x7fff204bcc75]
                                1     __CFStringCreateImmutableFunnel3 + 2019 (CoreFoundation + 13667) [0x7fff204ad563] (running)
                                1     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                                  1     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                    1     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                      1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                        1     tiny_malloc_should_clear + 62 (libsystem_malloc.dylib + 14338) [0x7fff2025b802] (running)
                              1     _resolvedPath + 391 (CoreFoundation + 76638) [0x7fff204bcb5e] (running)
                              1     _resolvedPath + 378 (CoreFoundation + 76625) [0x7fff204bcb51] (running)
                            2     CFURLCreateStringWithFileSystemPath + 1322 (CoreFoundation + 90448) [0x7fff204c0150]
                              2     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                  2     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                    1     tiny_malloc_from_free_list + 224 (libsystem_malloc.dylib + 16143) [0x7fff2025bf0f] (running)
                                    1     tiny_malloc_from_free_list + 170 (libsystem_malloc.dylib + 16089) [0x7fff2025bed9] (running)
                            1     CFURLCreateStringWithFileSystemPath + 1523 (CoreFoundation + 90649) [0x7fff204c0219]
                              1     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                                1     free_tiny + 462 (libsystem_malloc.dylib + 25133) [0x7fff2025e22d] (running)
                            1     CFURLCreateStringWithFileSystemPath + 263 (CoreFoundation + 89389) [0x7fff204bfd2d]
                              1     _retainedComponentString + 116 (CoreFoundation + 90918) [0x7fff204c0326]
                                1     CFStringCreateWithSubstring + 97 (CoreFoundation + 91714) [0x7fff204c0642] (running)
                            1     __CFStrConvertBytesToUnicode + 23 (CoreFoundation + 67481) [0x7fff204ba799] (running)
                          4     CFURLGetFileSystemRepresentation + 201 (CoreFoundation + 95201) [0x7fff204c13e1]
                            4     CFStringGetFileSystemRepresentation + 11 (CoreFoundation + 61645) [0x7fff204b90cd]
                              2     _CFStringGetFileSystemRepresentationWithErrorStatus + 160 (CoreFoundation + 61819) [0x7fff204b917b]
                                1     CFUniCharDecomposeWithErrorLocation + 1071 (CoreFoundation + 69342) [0x7fff204baede] (running)
                                1     CFUniCharDecomposeWithErrorLocation + 1061 (CoreFoundation + 69332) [0x7fff204baed4] (running)
                              1     _CFStringGetFileSystemRepresentationWithErrorStatus + 613 (CoreFoundation + 62272) [0x7fff204b9340] (running)
                              1     _CFStringGetFileSystemRepresentationWithErrorStatus + 606 (CoreFoundation + 62265) [0x7fff204b9339] (running)
                          1     CFURLGetFileSystemRepresentation + 212 (CoreFoundation + 95212) [0x7fff204c13ec]
                            1     _CFRelease + 244 (CoreFoundation + 1361082) [0x7fff205f64ba]
                              1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                                1     tiny_free_no_lock + 1250 (libsystem_malloc.dylib + 26685) [0x7fff2025e83d] (running)
                          1     CFURLGetFileSystemRepresentation + 142 (CoreFoundation + 95142) [0x7fff204c13a6]
                           *1     ??? (kernel + 481216) [0xffffff80002857c0] (runnable)
                        1     Security::cfString(__CFURL const*) + 106 (Security + 2797299) [0x7fff22563ef3]
                          1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string<std::nullptr_t>(char const*) + 76 (Security + 1548732) [0x7fff224331bc]
                            1     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                              1     default_zone_malloc + 26 (libsystem_malloc.dylib + 5429) [0x7fff20259535] (running)
                      31    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 883 (Security + 1705541) [0x7fff22459645]
                        28    Security::CodeSigning::SecStaticCode::checkfix30814861(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) + 56 (Security + 1712030) [0x7fff2245af9e]
                          20    Security::CodeSigning::MachORep::copyDiskRepInformation() + 25 (Security + 1807185) [0x7fff22472351]
                            19    Security::Universal::architecture() const + 44 (Security + 2817260) [0x7fff22568cec]
                              19    Security::Universal::findImage(Security::Architecture const&) const + 78 (Security + 2817546) [0x7fff22568e0a]
                                11    Security::MachO::MachO(Security::UnixPlusPlus::FileDesc, unsigned long, unsigned long) + 163 (Security + 2813221) [0x7fff22567d25]
                                  11    pread + 10 (libsystem_kernel.dylib + 10118) [0x7fff203fe786]
                                   *10    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                                     *7     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                                       *6     pread_nocancel + 189 (kernel + 6550957) [0xffffff800084f5ad]
                                         *6     ??? (kernel + 6550600) [0xffffff800084f448]
                                           *6     ??? (kernel + 3363756) [0xffffff80005453ac]
                                             *4     apfs_vnop_read + 729 (apfs + 332115) [0xffffff80033eb153]
                                               *4     decmpfs_read_compressed + 297 (kernel + 3521033) [0xffffff800056ba09]
                                                 *4     ??? (kernel + 3117848) [0xffffff8000509318]
                                                   *2     memory_object_control_uiomove + 594 (kernel + 1050914) [0xffffff8000310922]
                                                     *2     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                       *1     ??? (kernel + 1741293) [0xffffff80003b91ed] (running)
                                                       *1     _bcopy + 14 (kernel + 138734) [0xffffff8000231dee] (running)
                                                   *1     uiomove64 + 0 (kernel + 6433536) [0xffffff8000832b00] (running)
                                                   *1     memory_object_control_uiomove + 685 (kernel + 1051005) [0xffffff800031097d] (running)
                                             *1     apfs_vnop_read + 645 (apfs + 332031) [0xffffff80033eb0ff] (running)
                                             *1     apfs_vnop_read + 140 (apfs + 331526) [0xffffff80033eaf06]
                                               *1     OSAddAtomic64 + 12 (kernel + 7593628) [0xffffff800094de9c] (running)
                                       *1     pread_nocancel + 70 (kernel + 6550838) [0xffffff800084f536]
                                         *1     ??? (kernel + 6550102) [0xffffff800084f256]
                                           *1     ??? (kernel + 6156928) [0xffffff80007ef280] (running)
                                     *2     unix_syscall64 + 694 (kernel + 7540118) [0xffffff8000940d96]
                                       *1     audit_syscall_enter + 265 (kernel + 5934649) [0xffffff80007b8e39]
                                         *1     IOLockLock + 33 (kernel + 1757361) [0xffffff80003bd0b1] (running)
                                       *1     audit_syscall_enter + 122 (kernel + 5934506) [0xffffff80007b8daa]
                                         *1     mac_audit_check_preselect + 82 (kernel + 8813698) [0xffffff8000a77c82] (running)
                                     *1     unix_syscall64 + 669 (kernel + 7540093) [0xffffff8000940d7d] (running)
                                   *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                                6     Security::MachO::MachO(Security::UnixPlusPlus::FileDesc, unsigned long, unsigned long) + 252 (Security + 2813310) [0x7fff22567d7e]
                                  6     pread + 10 (libsystem_kernel.dylib + 10118) [0x7fff203fe786]
                                   *5     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                                     *4     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                                       *4     pread_nocancel + 189 (kernel + 6550957) [0xffffff800084f5ad]
                                         *4     ??? (kernel + 6550600) [0xffffff800084f448]
                                           *3     ??? (kernel + 3363756) [0xffffff80005453ac]
                                             *3     apfs_vnop_read + 729 (apfs + 332115) [0xffffff80033eb153]
                                               *2     decmpfs_read_compressed + 297 (kernel + 3521033) [0xffffff800056ba09]
                                                 *2     ??? (kernel + 3117848) [0xffffff8000509318]
                                                   *2     memory_object_control_uiomove + 594 (kernel + 1050914) [0xffffff8000310922]
                                                     *2     uiomove64 + 583 (kernel + 6434119) [0xffffff8000832d47]
                                                       *2     _bcopy + 11 (kernel + 138731) [0xffffff8000231deb] (running)
                                               *1     decmpfs_read_compressed + 169 (kernel + 3520905) [0xffffff800056b989]
                                                 *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                           *1     ??? (kernel + 3363121) [0xffffff8000545131]
                                             *1     ??? (kernel + 3171172) [0xffffff8000516364] (running)
                                     *1     unix_syscall64 + 694 (kernel + 7540118) [0xffffff8000940d96]
                                       *1     audit_syscall_enter + 77 (kernel + 5934461) [0xffffff80007b8d7d]
                                         *1     IOLockLock + 20 (kernel + 1757348) [0xffffff80003bd0a4] (running)
                                   *1     unix_syscall64 + 0 (kernel + 7539424) [0xffffff8000940ae0] (running)
                                1     Security::MachO::MachO(Security::UnixPlusPlus::FileDesc, unsigned long, unsigned long) + 211 (Security + 2813269) [0x7fff22567d55]
                                  1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                    1     szone_malloc_should_clear + 109 (libsystem_malloc.dylib + 10210) [0x7fff2025a7e2]
                                      1     small_malloc_should_clear + 128 (libsystem_malloc.dylib + 10564) [0x7fff2025a944] (running)
                                1     malloc + 0 (libsystem_malloc.dylib + 5376) [0x7fff20259500] (running)
                            1     Security::Universal::architecture() const + 29 (Security + 2817245) [0x7fff22568cdd]
                              1     Security::Universal::bestNativeArch() const + 33 (Security + 2817375) [0x7fff22568d5f]
                                1     _dyld_get_image_header + 0 (libdyld.dylib + 17310) [0x7fff2043c39e] (running)
                          7     Security::CodeSigning::MachORep::copyDiskRepInformation() + 120 (Security + 1807280) [0x7fff224723b0]
                            7     __CFDictionary* Security::cfmake<__CFDictionary*>(char const*, ...) + 170 (Security + 1812193) [0x7fff224736e1]
                              4     Security::CFMake::make() + 734 (Security + 2788498) [0x7fff22561c92]
                                1     Security::CFMake::add(__CFDictionary*) + 87 (Security + 2789381) [0x7fff22562005]
                                  1     -[__NSDictionaryM __setObject:forKey:] + 508 (CoreFoundation + 136594) [0x7fff204cb592] (running)
                                1     Security::CFMake::add(__CFDictionary*) + 50 (Security + 2789344) [0x7fff22561fe0]
                                  1     Security::CFMunge::next() + 72 (Security + 2787590) [0x7fff22561906] (running)
                                1     CFRetain + 0 (CoreFoundation + 17169) [0x7fff204ae311] (running)
                                1     objc_msgSend + 33 (libobjc.A.dylib + 26657) [0x7fff202d0821] (running)
                              3     Security::CFMake::make() + 715 (Security + 2788479) [0x7fff22561c7f]
                                3     CFDictionaryCreateMutable + 31 (CoreFoundation + 20249) [0x7fff204aef19]
                                  3     __NSDictionaryM_new + 112 (CoreFoundation + 22592) [0x7fff204af840]
                                    3     __CFAllocateObject + 15 (CoreFoundation + 17077) [0x7fff204ae2b5]
                                      2     class_createInstance + 65 (libobjc.A.dylib + 26106) [0x7fff202d05fa]
                                        2     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                          2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                            1     tiny_malloc_should_clear + 127 (libsystem_malloc.dylib + 14403) [0x7fff2025b843] (running)
                                            1     tiny_malloc_should_clear + 44 (libsystem_malloc.dylib + 14320) [0x7fff2025b7f0] (running)
                                      1     calloc + 0 (libsystem_malloc.dylib + 13795) [0x7fff2025b5e3] (running)
                          1     Security::Universal::architecture() const + 103 (Security + 2817319) [0x7fff22568d27] (running)
                        1     Security::CodeSigning::SecStaticCode::checkfix30814861(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) + 772 (Security + 1712746) [0x7fff2245b26a]
                          1     Security::CFRef<__CFDictionary const*>::~CFRef() + 17 (Security + 1619869) [0x7fff2244479d]
                            1     -[__NSDictionaryM dealloc] + 128 (CoreFoundation + 188795) [0x7fff204d817b]
                              1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                                1     tiny_free_no_lock + 1240 (libsystem_malloc.dylib + 26675) [0x7fff2025e833] (running)
                        1     Security::CodeSigning::SecStaticCode::checkfix30814861(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) + 763 (Security + 1712737) [0x7fff2245b261] (running)
                        1     Security::CodeSigning::SecStaticCode::checkfix30814861(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool) + 87 (Security + 1712061) [0x7fff2245afbd]
                          1     Security::CFDictionary::CFDictionary(__CFDictionary const*, int) + 24 (Security + 1619956) [0x7fff224447f4]
                            1     objc_retain + 80 (libobjc.A.dylib + 26336) [0x7fff202d06e0] (running)
                      20    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 524 (Security + 1705182) [0x7fff224594de]
                        12    Security::CodeSigning::ResourceSeal::ResourceSeal(void const*) + 262 (Security + 1883278) [0x7fff22484c8e]
                          11    Security::cfscan(void const*, char const*, ...) + 173 (Security + 2791320) [0x7fff22562798]
                            4     Security::CFScan::scan(void const*) + 364 (Security + 2789794) [0x7fff225621a2]
                              1     DYLD-STUB$$CFBooleanGetTypeID + 0 (Security + 2888398) [0x7fff2257a2ce] (running)
                              1     Security::CFScan::scan(void const*) + 1098 (Security + 2790528) [0x7fff22562480] (running)
                              1     CFBooleanGetTypeID + 5 (CoreFoundation + 333595) [0x7fff204fb71b] (running)
                              1     CFBooleanGetTypeID + 0 (CoreFoundation + 333590) [0x7fff204fb716] (running)
                            3     Security::CFScan::scan(void const*) + 261 (Security + 2789691) [0x7fff2256213b]
                              1     Security::CFMake::make() + 795 (Security + 2788559) [0x7fff22561ccf] (running)
                              1     CFStringCreateWithBytes + 27 (CoreFoundation + 63382) [0x7fff204b9796]
                                1     __CFStringCreateImmutableFunnel3 + 1338 (CoreFoundation + 12986) [0x7fff204ad2ba] (running)
                              1     CFStringCreateWithBytes + 17 (CoreFoundation + 63372) [0x7fff204b978c] (running)
                            1     Security::CFScan::scan(void const*) + 297 (Security + 2789727) [0x7fff2256215f]
                              1     -[__NSDictionaryM objectForKey:] + 104 (CoreFoundation + 139689) [0x7fff204cc1a9]
                                1     -[NSTaggedPointerString hash] + 92 (CoreFoundation + 139091) [0x7fff204cbf53]
                                 *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                   *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                            1     Security::CFMunge::next() + 1 (Security + 2787519) [0x7fff225618bf] (running)
                            1     CFStringCreateWithBytes + 0 (CoreFoundation + 63355) [0x7fff204b977b] (running)
                            1     CFRelease + 0 (CoreFoundation + 45563) [0x7fff204b51fb] (running)
                          1     Security::CFScan::scan(void const*) + 0 (Security + 2789430) [0x7fff22562036] (running)
                        5     Security::CodeSigning::ResourceSeal::ResourceSeal(void const*) + 165 (Security + 1883181) [0x7fff22484c2d]
                          1     -[__NSDictionaryM objectForKey:] + 172 (CoreFoundation + 139757) [0x7fff204cc1ed]
                            1     -[NSTaggedPointerString isEqual:] + 36 (CoreFoundation + 94166) [0x7fff204c0fd6]
                              1     _NSIsNSString + 48 (CoreFoundation + 94247) [0x7fff204c1027]
                                1     object_getMethodImplementation + 75 (libobjc.A.dylib + 50797) [0x7fff202d666d] (running)
                          1     -[NSTaggedPointerString isEqual:] + 1 (CoreFoundation + 94131) [0x7fff204c0fb3] (running)
                          1     __CFStringHash + 892 (CoreFoundation + 39721) [0x7fff204b3b29] (running)
                          1     __CFStringHash + 156 (CoreFoundation + 38985) [0x7fff204b3849] (running)
                          1     objc_msgSend + 26 (libobjc.A.dylib + 26650) [0x7fff202d081a] (running)
                        1     DYLD-STUB$$CFGetTypeID + 0 (Security + 2888920) [0x7fff2257a4d8] (running)
                        1     Security::CodeSigning::ResourceSeal::ResourceSeal(void const*) + 242 (Security + 1883258) [0x7fff22484c7a]
                          1     Security::cfscan(void const*, char const*, ...) + 173 (Security + 2791320) [0x7fff22562798]
                            1     Security::CFScan::scan(void const*) + 395 (Security + 2789825) [0x7fff225621c1]
                              1     Security::CFMunge::next() + 104 (Security + 2787622) [0x7fff22561926] (running)
                        1     Security::CodeSigning::ResourceSeal::ResourceSeal(void const*) + 212 (Security + 1883228) [0x7fff22484c5c]
                          1     __CFStringHash + 152 (CoreFoundation + 38981) [0x7fff204b3845] (running)
                      15    Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 3990 (Security + 1708648) [0x7fff2245a268]
                        15    Security::CFRef<__CFURL const*>::~CFRef() + 17 (Security + 1619729) [0x7fff22444711]
                          6     _CFRelease + 244 (CoreFoundation + 1361082) [0x7fff205f64ba]
                            5     __CFURLDeallocate + 39 (CoreFoundation + 89017) [0x7fff204bfbb9]
                              1     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                                1     free_tiny + 36 (libsystem_malloc.dylib + 24707) [0x7fff2025e083] (running)
                              1     CFRelease + 19 (CoreFoundation + 45582) [0x7fff204b520e]
                               *1     call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
                                 *1     ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
                              1     __CFAllocatorSystemDeallocate + 0 (CoreFoundation + 41003) [0x7fff204b402b] (running)
                              1     object_getClass + 24 (libobjc.A.dylib + 38434) [0x7fff202d3622] (running)
                              1     default_zone_free + 26 (libsystem_malloc.dylib + 33151) [0x7fff2026017f] (running)
                            1     __CFURLDeallocate + 68 (CoreFoundation + 89046) [0x7fff204bfbd6]
                              1     CFRelease + 50 (CoreFoundation + 45613) [0x7fff204b522d] (running)
                          3     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                            1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                              1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                                1     tiny_free_list_add_ptr + 8 (libsystem_malloc.dylib + 27826) [0x7fff2025ecb2] (running)
                            1     free_tiny + 314 (libsystem_malloc.dylib + 24985) [0x7fff2025e199] (running)
                            1     free_tiny + 36 (libsystem_malloc.dylib + 24707) [0x7fff2025e083] (running)
                          2     __CFURLDeallocate + 0 (CoreFoundation + 88978) [0x7fff204bfb92] (running)
                          2     CFRelease + 19 (CoreFoundation + 45582) [0x7fff204b520e] (running)
                          1     _CFRelease + 179 (CoreFoundation + 1361017) [0x7fff205f6479] (running)
                          1     object_getClass + 24 (libobjc.A.dylib + 38434) [0x7fff202d3622] (running)
                      13    readlink + 10 (libsystem_kernel.dylib + 12026) [0x7fff203feefa]
                       *13    hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                         *12    unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                           *12    readlink + 102 (kernel + 3288790) [0xffffff8000532ed6]
                             *11    ??? (kernel + 3289085) [0xffffff8000532ffd]
                               *11    ??? (kernel + 3260377) [0xffffff800052bfd9]
                                 *11    namei + 4388 (kernel + 3146836) [0xffffff8000510454]
                                   *9     lookup + 878 (kernel + 3150190) [0xffffff800051116e]
                                     *5     apfs_vnop_lookup + 1004 (apfs + 314221) [0xffffff80033e6b6d]
                                       *5     apfs_internal_lookup + 236 (apfs + 395627) [0xffffff80033fa96b]
                                         *5     apfs_lookup_name_with_alt_name + 67 (apfs + 389473) [0xffffff80033f9161]
                                           *5     fs_lookup_name_and_hash + 63 (apfs + 747043) [0xffffff8003450623]
                                             *5     fs_lookup_name_with_parent_id + 593 (apfs + 681229) [0xffffff800344050d]
                                               *3     iterate_raw_jobjs_with_hint + 543 (apfs + 666463) [0xffffff800343cb5f]
                                                 *2     raw_lookup_name_iterator + 155 (apfs + 684159) [0xffffff800344107f]
                                                   *1     utf8_normalizeOptCaseFoldAndCompare + 2216 (kernel + 3359816) [0xffffff8000544448] (running)
                                                   *1     utf8_normalizeOptCaseFoldAndCompare + 2054 (kernel + 3359654) [0xffffff80005443a6] (running)
                                                 *1     raw_lookup_name_iterator + 208 (apfs + 684212) [0xffffff80034410b4]
                                                   *1     key_val_to_jobj + 718 (apfs + 669642) [0xffffff800343d7ca]
                                                     *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                                       *1     OSMalloc + 35 (kernel + 582275) [0xffffff800029e283] (running)
                                               *2     iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                                 *2     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                                   *2     _bt_lookup_variant + 942 (apfs + 939730) [0xffffff800347f6d2]
                                                     *2     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                       *2     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                         *2     obj_get + 4094 (apfs + 1064361) [0xffffff800349dda9]
                                                           *1     IORWLockRead + 65 (kernel + 1745889) [0xffffff80003ba3e1] (running)
                                                           *1     IORWLockRead + 55 (kernel + 1745879) [0xffffff80003ba3d7] (running)
                                     *4     apfs_vnop_lookup + 1232 (apfs + 314449) [0xffffff80033e6c51]
                                       *4     apfs_load_inode_internal + 607 (apfs + 268479) [0xffffff80033db8bf]
                                         *2     fs_get_inode_with_hint + 570 (apfs + 665113) [0xffffff800343c619]
                                           *2     fs_get_xattr_in_snap + 186 (apfs + 666721) [0xffffff800343cc61]
                                             *1     lookup_jobj_in_snap + 277 (apfs + 667052) [0xffffff800343cdac]
                                               *1     key_val_to_jobj + 718 (apfs + 669642) [0xffffff800343d7ca]
                                                 *1     _apfs_malloc + 97 (apfs + 660769) [0xffffff800343b521]
                                                   *1     OSMalloc + 109 (kernel + 582349) [0xffffff800029e2cd]
                                                     *1     ??? (kernel + 579084) [0xffffff800029d60c]
                                                       *1     ??? (kernel + 900584) [0xffffff80002ebde8] (running)
                                             *1     lookup_jobj_in_snap + 186 (apfs + 666961) [0xffffff800343cd51]
                                               *1     tree_lookup + 46 (apfs + 849578) [0xffffff80034696aa]
                                                 *1     _bt_lookup_variant + 969 (apfs + 939757) [0xffffff800347f6ed]
                                                   *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                     *1     IORWLockUnlock + 6 (kernel + 1744982) [0xffffff80003ba056] (running)
                                         *2     fs_get_inode_with_hint + 217 (apfs + 664760) [0xffffff800343c4b8]
                                           *2     iterate_raw_jobjs_with_hint + 341 (apfs + 666261) [0xffffff800343ca95]
                                             *2     bt_iterator_init_with_hint + 295 (apfs + 941343) [0xffffff800347fd1f]
                                               *1     _bt_lookup_variant + 834 (apfs + 939622) [0xffffff800347f666]
                                                 *1     btree_node_get + 116 (apfs + 895942) [0xffffff8003474bc6]
                                                   *1     btree_node_get_internal + 361 (apfs + 896318) [0xffffff8003474d3e]
                                                     *1     obj_get + 3113 (apfs + 1063380) [0xffffff800349d9d4]
                                                       *1     lck_rw_unlock_shared + 14 (kernel + 1745630) [0xffffff80003ba2de]
                                                         *1     IORWLockUnlock + 159 (kernel + 1745135) [0xffffff80003ba0ef] (running)
                                               *1     _bt_lookup_variant + 630 (apfs + 939418) [0xffffff800347f59a]
                                                 *1     bt_search_node + 18 (apfs + 902803) [0xffffff8003476693]
                                                   *1     bt_search_node_insert + 180 (apfs + 902546) [0xffffff8003476592]
                                                     *1     apfs_key_compare + 6 (apfs + 673694) [0xffffff800343e79e] (running)
                                   *2     lookup + 1463 (kernel + 3150775) [0xffffff80005113b7]
                                     *2     ??? (kernel + 3149222) [0xffffff8000510da6]
                                       *1     audit_arg_vnpath + 348 (kernel + 5939740) [0xffffff80007ba21c]
                                         *1     build_path_with_parent + 100 (kernel + 3083284) [0xffffff8000500c14]
                                           *1     vfs_context_proc + 90 (kernel + 3413498) [0xffffff80005515fa] (running)
                                       *1     audit_arg_vnpath + 79 (kernel + 5939471) [0xffffff80007ba10f] (running)
                             *1     ??? (kernel + 3289424) [0xffffff8000533150]
                               *1     kauth_authorize_action + 80 (kernel + 6112704) [0xffffff80007e45c0]
                                 *1     ??? (kernel + 3210877) [0xffffff800051fe7d]
                                   *1     vnode_cache_authorized_action + 166 (kernel + 3088790) [0xffffff8000502196]
                                     *1     ??? (kernel + 1747858) [0xffffff80003bab92] (running)
                         *1     unix_syscall64 + 730 (kernel + 7540154) [0xffffff8000940dba] (running)
                      8     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 450 (Security + 1705108) [0x7fff22459494]
                        5     objc_msgSend + 26 (libobjc.A.dylib + 26650) [0x7fff202d081a] (running)
                        1     -[__NSDictionaryM objectForKey:] + 172 (CoreFoundation + 139757) [0x7fff204cc1ed]
                          1     _CFStringEqual + 0 (CoreFoundation + 37898) [0x7fff204b340a] (running)
                        1     __CFStringHash + 521 (CoreFoundation + 39350) [0x7fff204b39b6] (running)
                        1     objc_msgSend + 0 (libobjc.A.dylib + 26624) [0x7fff202d0800] (running)
                      7     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 1326 (Security + 1705984) [0x7fff22459800]
                        4     Security::makeCFURL(char const*, bool, __CFURL const*) + 155 (Security + 2795613) [0x7fff2256385d]
                          4     _CFURLCreateWithFileSystemPath + 1075 (CoreFoundation + 1166491) [0x7fff205c6c9b]
                            2     POSIXPathToURLPath + 203 (CoreFoundation + 61324) [0x7fff204b8f8c]
                              2     CreateStringFromFileSystemRepresentationByAddingPercentEscapes + 754 (CoreFoundation + 63199) [0x7fff204b96df]
                                2     CFStringCreateWithBytes + 27 (CoreFoundation + 63382) [0x7fff204b9796]
                                  1     __CFStringCreateImmutableFunnel3 + 2877 (CoreFoundation + 14525) [0x7fff204ad8bd] (running)
                                  1     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                                    1     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                      1     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                        1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                          1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                            1     set_tiny_meta_header_in_use + 0 (libsystem_malloc.dylib + 17750) [0x7fff2025c556] (running)
                            2     POSIXPathToURLPath + 138 (CoreFoundation + 61259) [0x7fff204b8f4b]
                              2     CFStringGetFileSystemRepresentation + 11 (CoreFoundation + 61645) [0x7fff204b90cd]
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 620 (CoreFoundation + 62279) [0x7fff204b9347] (running)
                                1     _CFStringGetFileSystemRepresentationWithErrorStatus + 315 (CoreFoundation + 61974) [0x7fff204b9216] (running)
                        3     Security::makeCFURL(char const*, bool, __CFURL const*) + 44 (Security + 2795502) [0x7fff225637ee]
                          3     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                            2     __CFStringCreateImmutableFunnel3 + 1900 (CoreFoundation + 13548) [0x7fff204ad4ec]
                              2     _CFRuntimeCreateInstance + 294 (CoreFoundation + 15842) [0x7fff204adde2]
                                2     _malloc_zone_calloc + 59 (libsystem_malloc.dylib + 114862) [0x7fff202740ae]
                                  2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                    1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                      1     tiny_malloc_from_free_list + 492 (libsystem_malloc.dylib + 16411) [0x7fff2025c01b] (running)
                                    1     tiny_malloc_should_clear + 55 (libsystem_malloc.dylib + 14331) [0x7fff2025b7fb] (running)
                            1     _CFRuntimeCreateInstance + 1 (CoreFoundation + 15549) [0x7fff204adcbd] (running)
                      5     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 1053 (Security + 1705711) [0x7fff224596ef]
                        4     Security::CodeSigning::ResourceSeal::hash(unsigned int) const + 52 (Security + 1883426) [0x7fff22484d22]
                          3     Security::CodeSigning::ResourceBuilder::hashName(unsigned int) + 119 (Security + 1882761) [0x7fff22484a89]
                            3     snprintf + 156 (libsystem_c.dylib + 265327) [0x7fff20347c6f]
                              3     vsnprintf_l + 41 (libsystem_c.dylib + 326306) [0x7fff20356aa2]
                                2     _vsnprintf + 411 (libsystem_c.dylib + 326213) [0x7fff20356a45]
                                  1     __v2printf + 693 (libsystem_c.dylib + 432725) [0x7fff20370a55] (running)
                                  1     __v2printf + 469 (libsystem_c.dylib + 432501) [0x7fff20370975]
                                    1     __vfprintf + 133 (libsystem_c.dylib + 270679) [0x7fff20349157] (running)
                                1     _vsnprintf + 296 (libsystem_c.dylib + 326098) [0x7fff203569d2] (running)
                          1     snprintf + 0 (libsystem_c.dylib + 265171) [0x7fff20347bd3] (running)
                        1     Security::CodeSigning::ResourceSeal::hash(unsigned int) const + 155 (Security + 1883529) [0x7fff22484d89]
                          1     -[NSTaggedPointerString hash] + 1 (CoreFoundation + 139000) [0x7fff204cbef8] (running)
                      4     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4243 (Security + 1708901) [0x7fff2245a365]
                        4     std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::set(std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > const&) + 42 (Security + 1693768) [0x7fff22456848]
                          3     void std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::insert<std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long> >(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>) + 47 (Security + 1693845) [0x7fff22456895]
                            2     std::__1::pair<std::__1::__tree_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, bool> std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::__emplace_hint_unique_key_args<unsigned int, unsigned int const&>(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, unsigned int const&, unsigned int const&) + 78 (Security + 1620496) [0x7fff22444a10]
                              1     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                                1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                                  1     tiny_malloc_should_clear + 0 (libsystem_malloc.dylib + 14276) [0x7fff2025b7c4] (running)
                              1     malloc + 0 (libsystem_malloc.dylib + 5376) [0x7fff20259500] (running)
                            1     std::__1::pair<std::__1::__tree_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, bool> std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::__emplace_hint_unique_key_args<unsigned int, unsigned int const&>(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, unsigned int const&, unsigned int const&) + 53 (Security + 1620471) [0x7fff224449f7]
                              1     std::__1::__tree_node_base<void*>*& std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::__find_equal<unsigned int>(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, unsigned int const&) + 127 (Security + 1620965) [0x7fff22444be5] (running)
                          1     void std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::insert<std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long> >(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>) + 51 (Security + 1693849) [0x7fff22456899] (running)
                      3     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 486 (Security + 1705144) [0x7fff224594b8]
                        1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                          1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                            1     tiny_free_list_add_ptr + 99 (libsystem_malloc.dylib + 27917) [0x7fff2025ed0d] (running)
                        1     free_tiny + 24 (libsystem_malloc.dylib + 24695) [0x7fff2025e077] (running)
                        1     free + 120 (libsystem_malloc.dylib + 8477) [0x7fff2025a11d]
                          1     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f]
                            1     tiny_size + 78 (libsystem_malloc.dylib + 19000) [0x7fff2025ca38] (running)
                      2     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 1398 (Security + 1706056) [0x7fff22459848]
                        2     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                          1     tiny_free_no_lock + 1112 (libsystem_malloc.dylib + 26547) [0x7fff2025e7b3]
                            1     tiny_free_list_add_ptr + 1009 (libsystem_malloc.dylib + 28827) [0x7fff2025f09b] (running)
                          1     tiny_free_no_lock + 544 (libsystem_malloc.dylib + 25979) [0x7fff2025e57b] (running)
                      2     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 1279 (Security + 1705937) [0x7fff224597d1]
                        2     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init_copy_ctor_external(char const*, unsigned long) + 59 (libc++.1.dylib + 241823) [0x7fff203cb09f]
                          1     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                            1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                              1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                1     tiny_malloc_should_clear + 62 (libsystem_malloc.dylib + 14338) [0x7fff2025b802] (running)
                          1     operator new(unsigned long) + 5 (libc++abi.dylib + 71701) [0x7fff203f7815] (running)
                      2     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 465 (Security + 1705123) [0x7fff224594a3]
                        2     Security::CFRef<__CFString const*>::~CFRef() + 17 (Security + 1621211) [0x7fff22444cdb]
                          1     _CFRelease + 1145 (CoreFoundation + 1361983) [0x7fff205f683f]
                            1     free_tiny + 104 (libsystem_malloc.dylib + 24775) [0x7fff2025e0c7] (running)
                          1     szone_free + 0 (libsystem_malloc.dylib + 24016) [0x7fff2025ddd0] (running)
                      2     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 1361 (Security + 1706019) [0x7fff22459823]
                        1     Security::CodeSigning::SecStaticCode::CollectingContext::reportProblem(int, __CFString const*, void const*) + 188 (Security + 1694528) [0x7fff22456b40]
                          1     -[__NSArrayM addObject:] + 35 (CoreFoundation + 134419) [0x7fff204cad13] (running)
                        1     Security::CodeSigning::SecStaticCode::CollectingContext::reportProblem(int, __CFString const*, void const*) + 129 (Security + 1694469) [0x7fff22456b05]
                          1     __CFStringHash + 149 (CoreFoundation + 38978) [0x7fff204b3842] (running)
                      2     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 413 (Security + 1705071) [0x7fff2245946f]
                        1     operator new(unsigned long) + 0 (libc++abi.dylib + 71696) [0x7fff203f7810] (running)
                        1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init_copy_ctor_external(char const*, unsigned long) + 59 (libc++.1.dylib + 241823) [0x7fff203cb09f]
                          1     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                            1     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                              1     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                                1     tiny_malloc_should_clear + 233 (libsystem_malloc.dylib + 14509) [0x7fff2025b8ad]
                                  1     tiny_malloc_from_free_list + 1584 (libsystem_malloc.dylib + 17503) [0x7fff2025c45f] (running)
                      1     Security::CodeSigning::ResourceSeal::ResourceSeal(void const*) + 1 (Security + 1883017) [0x7fff22484b89] (running)
                      1     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4142 (Security + 1708800) [0x7fff2245a300]
                        1     free + 42 (libsystem_malloc.dylib + 8399) [0x7fff2025a0cf] (running)
                      1     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 4128 (Security + 1708786) [0x7fff2245a2f2] (running)
                      1     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 3978 (Security + 1708636) [0x7fff2245a25c]
                        1     Security::CFRef<__CFDictionary const*>::~CFRef() + 17 (Security + 1619869) [0x7fff2244479d]
                          1     CFRelease + 65 (CoreFoundation + 45628) [0x7fff204b523c] (running)
                      1     Security::CodeSigning::SecStaticCode::validateResource(__CFDictionary const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, bool, Security::CodeSigning::SecStaticCode::ValidationContext&, unsigned int, unsigned int) + 435 (Security + 1705093) [0x7fff22459485]
                        1     Security::CFTempString::CFTempString<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) + 47 (Security + 1703561) [0x7fff22458e89]
                          1     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                            1     _CFRuntimeCreateInstance + 0 (CoreFoundation + 15548) [0x7fff204adcbc] (running)
                      1     Security::CodeSigning::SecStaticCode::codeDirectory(bool) const + 1 (Security + 1681991) [0x7fff22453a47] (running)
                      1     std::__1::__tree<std::__1::__value_type<unsigned int, Security::BlobCore*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, Security::BlobCore*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, Security::BlobCore*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, Security::BlobCore*>, void*>*) + 0 (Security + 1308170) [0x7fff223f860a] (running)
                      1     DYLD-STUB$$_platform_memmove + 0 (libsystem_platform.dylib + 30438) [0x7fff2047b6e6] (running)
                      1     operator delete(void*) + 0 (libc++abi.dylib + 71897) [0x7fff203f78d9] (running)
                      1     free_tiny + 0 (libsystem_malloc.dylib + 24671) [0x7fff2025e05f] (running)
                      1     szone_free_definite_size + 0 (libsystem_malloc.dylib + 19560) [0x7fff2025cc68] (running)
                    14    invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 523 (Security + 1704124) [0x7fff224590bc]
                      6     secLogObjForScope + 94 (Security + 2861166) [0x7fff2257386e]
                        2     secLogObjForCFScope + 98 (Security + 2860747) [0x7fff225736cb]
                          2     CFDictionaryGetValue + 88 (CoreFoundation + 32059) [0x7fff204b1d3b]
                            1     CFBasicHashFindBucket + 304 (CoreFoundation + 32444) [0x7fff204b1ebc] (running)
                            1     CFBasicHashFindBucket + 182 (CoreFoundation + 32322) [0x7fff204b1e42]
                              1     -[NSTaggedPointerString hash] + 116 (CoreFoundation + 139115) [0x7fff204cbf6b] (running)
                        2     secLogObjForCFScope + 42 (Security + 2860691) [0x7fff22573693]
                          2     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e]
                           *1     hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
                             *1     unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                               *1     ulock_wait + 68 (kernel + 6583012) [0xffffff80008572e4]
                                 *1     ulock_wait2 + 887 (kernel + 6583911) [0xffffff8000857667]
                                   *1     ??? (kernel + 6585760) [0xffffff8000857da0]
                                     *1     ??? (kernel + 1743509) [0xffffff80003b9a95]
                                       *1     ??? (kernel + 593924) [0xffffff80002a1004] (running)
                           *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                        1     secLogObjForCFScope + 233 (Security + 2860882) [0x7fff22573752]
                          1     __ulock_wake + 10 (libsystem_kernel.dylib + 10974) [0x7fff203feade]
                           *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
                        1     os_unfair_lock_unlock + 8 (libsystem_platform.dylib + 3773) [0x7fff20474ebd] (running)
                      3     secLogObjForScope + 83 (Security + 2861155) [0x7fff22573863]
                        3     CFStringCreateWithCString + 73 (CoreFoundation + 11634) [0x7fff204acd72]
                          1     __CFStringCreateImmutableFunnel3 + 1375 (CoreFoundation + 13023) [0x7fff204ad2df] (running)
                          1     __CFStringCreateImmutableFunnel3 + 1311 (CoreFoundation + 12959) [0x7fff204ad29f] (running)
                          1     __CFStringCreateImmutableFunnel3 + 1181 (CoreFoundation + 12829) [0x7fff204ad21d] (running)
                      2     secLogObjForScope + 28 (Security + 2861100) [0x7fff2257382c]
                        2     pthread_mutex_lock + 105 (libsystem_pthread.dylib + 7759) [0x7fff2042de4f] (running)
                      1     secLogObjForScope + 118 (Security + 2861190) [0x7fff22573886] (running)
                      1     secLogObjForScope + 42 (Security + 2861114) [0x7fff2257383a]
                        1     pthread_mutex_unlock + 90 (libsystem_pthread.dylib + 8840) [0x7fff2042e288] (running)
                      1     pthread_mutex_lock + 0 (libsystem_pthread.dylib + 7654) [0x7fff2042dde6] (running)
                    6     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 572 (Security + 1704173) [0x7fff224590ed]
                      3     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init_copy_ctor_external(char const*, unsigned long) + 59 (libc++.1.dylib + 241823) [0x7fff203cb09f]
                        2     operator new(unsigned long) + 26 (libc++abi.dylib + 71722) [0x7fff203f782a]
                          2     _malloc_zone_malloc + 118 (libsystem_malloc.dylib + 114677) [0x7fff20273ff5]
                            2     szone_malloc_should_clear + 66 (libsystem_malloc.dylib + 10167) [0x7fff2025a7b7]
                              1     tiny_malloc_should_clear + 971 (libsystem_malloc.dylib + 15247) [0x7fff2025bb8f] (running)
                              1     tiny_malloc_should_clear + 127 (libsystem_malloc.dylib + 14403) [0x7fff2025b843] (running)
                        1     malloc + 0 (libsystem_malloc.dylib + 5376) [0x7fff20259500] (running)
                      1     _platform_memmove$VARIANT$Haswell + 244 (libsystem_platform.dylib + 4340) [0x7fff204750f4] (running)
                      1     DYLD-STUB$$operator new(unsigned long) + 0 (libc++.1.dylib + 311892) [0x7fff203dc254] (running)
                      1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init_copy_ctor_external(char const*, unsigned long) + 8 (libc++.1.dylib + 241772) [0x7fff203cb06c] (running)
                    2     Security::CodeSigning::SecStaticCode::reportProgress(unsigned int) + 0 (Security + 1698008) [0x7fff224578d8] (running)
                    2     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 630 (Security + 1704231) [0x7fff22459127]
                      1     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                        1     tiny_free_no_lock + 504 (libsystem_malloc.dylib + 25939) [0x7fff2025e553] (running)
                      1     free + 120 (libsystem_malloc.dylib + 8477) [0x7fff2025a11d]
                        1     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f]
                          1     tiny_size + 78 (libsystem_malloc.dylib + 19000) [0x7fff2025ca38] (running)
                    2     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 539 (Security + 1704140) [0x7fff224590cc]
                      1     os_log_type_enabled + 148 (libsystem_trace.dylib + 19639) [0x7fff201a6cb7] (running)
                      1     os_log_type_enabled + 72 (libsystem_trace.dylib + 19563) [0x7fff201a6c6b] (running)
                    1     secLogObjForScope + 0 (Security + 2861072) [0x7fff22573810] (running)
                    1     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 30 (Security + 1703631) [0x7fff22458ecf] (running)
                    1     std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) + 0 (libc++.1.dylib + 241874) [0x7fff203cb0d2] (running)
                    1     os_log_type_enabled + 0 (libsystem_trace.dylib + 19491) [0x7fff201a6c23] (running)
                  2     invocation function for block in Security::CodeSigning::SecStaticCode::validateResources(unsigned int) + 0 (Security + 1703601) [0x7fff22458eb1] (running)
                  1     invocation function for block in Security::CodeSigning::LimitedAsync::perform(Security::Dispatch::Group&, void () block_pointer) + 40 (Security + 1772426) [0x7fff22469b8a] (running)
                3     dispatch_semaphore_signal + 5 (libdispatch.dylib + 16596) [0x7fff202890d4] (running)
                1     dispatch_semaphore_signal + 0 (libdispatch.dylib + 16591) [0x7fff202890cf] (running)
              12    _Block_release + 128 (libsystem_blocks.dylib + 5637) [0x7fff2016b605]
                11    _Block_release + 128 (libsystem_blocks.dylib + 5637) [0x7fff2016b605]
                  5     _Block_release + 128 (libsystem_blocks.dylib + 5637) [0x7fff2016b605]
                    2     free_tiny + 462 (libsystem_malloc.dylib + 25133) [0x7fff2025e22d] (running)
                    2     free + 120 (libsystem_malloc.dylib + 8477) [0x7fff2025a11d]
                      2     szone_size + 45 (libsystem_malloc.dylib + 18815) [0x7fff2025c97f]
                        1     tiny_size + 400 (libsystem_malloc.dylib + 19322) [0x7fff2025cb7a] (running)
                        1     tiny_size + 265 (libsystem_malloc.dylib + 19187) [0x7fff2025caf3] (running)
                    1     free_tiny + 149 (libsystem_malloc.dylib + 24820) [0x7fff2025e0f4] (running)
                  4     __destroy_helper_block_e8_32b40r + 23 (Security + 1464422) [0x7fff2241e866]
                    2     free_tiny + 442 (libsystem_malloc.dylib + 25113) [0x7fff2025e219]
                      1     tiny_free_no_lock + 1236 (libsystem_malloc.dylib + 26671) [0x7fff2025e82f] (running)
                      1     tiny_free_no_lock + 33 (libsystem_malloc.dylib + 25468) [0x7fff2025e37c] (running)
                    1     __Block_byref_object_dispose_.13469 + 0 (Security + 1772349) [0x7fff22469b3d] (running)
                    1     _Block_object_dispose + 128 (libsystem_blocks.dylib + 4860) [0x7fff2016b2fc] (running)
                  1     free_tiny + 462 (libsystem_malloc.dylib + 25133) [0x7fff2025e22d] (running)
                  1     _Block_release + 137 (libsystem_blocks.dylib + 5646) [0x7fff2016b60e]
                    1     objc_destructInstance + 113 (libobjc.A.dylib + 34373) [0x7fff202d2645]
                      1     _object_remove_assocations + 41 (libobjc.A.dylib + 34474) [0x7fff202d26aa] (running)
                1     _Block_release + 89 (libsystem_blocks.dylib + 5598) [0x7fff2016b5de] (running)
              2     invocation function for block in Security::Dispatch::ExceptionAwareEnqueuing::enqueueWithDispatcher(void (void () block_pointer) block_pointer, void () block_pointer) + 0 (Security + 2802582) [0x7fff22565396] (running)
              1     free_tiny + 134 (libsystem_malloc.dylib + 24805) [0x7fff2025e0e5]
                1     __ulock_wait + 10 (libsystem_kernel.dylib + 10846) [0x7fff203fea5e]
                 *1     hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
            1     DYLD-STUB$$_Block_release + 0 (libdispatch.dylib + 217526) [0x7fff202ba1b6] (running)
            1     _Block_release + 0 (libsystem_blocks.dylib + 5509) [0x7fff2016b585] (running)
          4     _dispatch_queue_override_invoke + 1056 (libdispatch.dylib + 24368) [0x7fff2028af30]
            2     _dispatch_alloc_continuation_free + 115 (libdispatch.dylib + 194640) [0x7fff202b4850] (running)
            1     _dispatch_continuation_free_to_heap + 7 (libdispatch.dylib + 194514) [0x7fff202b47d2] (running)
            1     _dispatch_continuation_free_to_heap + 0 (libdispatch.dylib + 194507) [0x7fff202b47cb] (running)
          1     _dispatch_queue_override_invoke + 1038 (libdispatch.dylib + 24350) [0x7fff2028af1e] (running)
          1     _dispatch_queue_override_invoke + 892 (libdispatch.dylib + 24204) [0x7fff2028ae8c]
            1     _dispatch_alloc_continuation_free + 63 (libdispatch.dylib + 194588) [0x7fff202b481c] (running)

  Thread 0x849dfe    30 samples (56-907)    priority 31 (base 31)    cpu time 0.106s (243.6M cycles, 171.1M instructions, 1.42c/i)
  30  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    30  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *16  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *8   call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *8   ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *3   call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *3   ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *3   ??? (kernel + 6026836) [0xffffff80007cf654]
           *1   ??? (kernel + 6029991) [0xffffff80007d02a7] (running)
           *1   ??? (kernel + 6029570) [0xffffff80007d0102]
             *1   ??? (kernel + 7821051) [0xffffff80009856fb] (running)
           *1   ??? (kernel + 6028128) [0xffffff80007cfb60]
             *1   turnstile_workq_proprietor_of_max_turnstile + 120 (kernel + 855768) [0xffffff80002e0ed8] (running)
     *2   hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)
     *1   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
       *1   workq_kernreturn + 0 (kernel + 6044928) [0xffffff80007d3d00] (running)

  Thread 0x849e39    25 samples (238-870)    priority 31 (base 31)    cpu time 0.098s (226.8M cycles, 167.9M instructions, 1.35c/i)
  23  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    23  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *17  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *5   call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *5   ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *1   call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *1   ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *1   ??? (kernel + 6026836) [0xffffff80007cf654]
           *1   ??? (kernel + 6029960) [0xffffff80007d0288]
             *1   ??? (kernel + 6023788) [0xffffff80007cea6c]
               *1   turnstile_update_inheritor + 262 (kernel + 854534) [0xffffff80002e0a06] (running)
  2   start_wqthread + 0 (libsystem_pthread.dylib + 9348) [0x7fff2042e484] (running)

  Thread 0x84a1b3    17 samples (232-809)    priority 31 (base 31)    cpu time 0.068s (155.3M cycles, 105.3M instructions, 1.47c/i)
  17  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    17  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *8   ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *4   call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *4   ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *4   ??? (kernel + 6026836) [0xffffff80007cf654]
           *2   ??? (kernel + 6030007) [0xffffff80007d02b7]
             *1   ??? (kernel + 906197) [0xffffff80002ed3d5] (running)
             *1   __bzero + 8 (kernel + 4344) [0xffffff80001010f8] (running)
           *1   ??? (kernel + 6029189) [0xffffff80007cff85]
             *1   thread_set_workq_pri + 196 (kernel + 824052) [0xffffff80002d92f4] (running)
           *1   ??? (kernel + 6028128) [0xffffff80007cfb60]
             *1   turnstile_workq_proprietor_of_max_turnstile + 120 (kernel + 855768) [0xffffff80002e0ed8] (running)
     *2   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
       *2   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
         *2   workq_kernreturn + 2372 (kernel + 6047300) [0xffffff80007d4644]
           *1   ??? (kernel + 6028077) [0xffffff80007cfb2d]
             *1   ??? (kernel + 6031328) [0xffffff80007d07e0]
               *1   waitq_assert_wait64 + 66 (kernel + 880706) [0xffffff80002e7042] (running)
           *1   ??? (kernel + 6027971) [0xffffff80007cfac3] (running)
     *2   call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *2   ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *1   hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)

  Thread 0x84a1b3,0x84a1b4,0x849dfe,0x849e39,0x84a1be,0x849ef9,0x84a1b0    DispatchQueue "com.apple.root.user-initiated-qos"(12)    15 samples (135-992)    priority 31 (base 31)    cpu time 0.078s (182.5M cycles, 123.1M instructions, 1.48c/i)
  15  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    15  _pthread_wqthread + 244 (libsystem_pthread.dylib + 13434) [0x7fff2042f47a]
      15  _dispatch_worker_thread2 + 92 (libdispatch.dylib + 77648) [0x7fff20297f50]
        5   _dispatch_root_queue_drain + 138 (libdispatch.dylib + 75580) [0x7fff2029773c]
         *5   hndl_alltraps + 223 (kernel + 141599) [0xffffff800023291f]
           *5   user_trap + 201 (kernel + 1790985) [0xffffff80003c5409] (running)
        4   _dispatch_root_queue_drain + 138 (libdispatch.dylib + 75580) [0x7fff2029773c] (running)
        3   _dispatch_root_queue_drain + 267 (libdispatch.dylib + 75709) [0x7fff202977bd]
          3   _dispatch_root_queue_poke_slow + 169 (libdispatch.dylib + 59087) [0x7fff202936cf]
            3   __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
             *3   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
               *2   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
                 *1   workq_kernreturn + 1943 (kernel + 6046871) [0xffffff80007d4497]
                   *1   ??? (kernel + 594463) [0xffffff80002a121f] (running)
                 *1   workq_kernreturn + 1578 (kernel + 6046506) [0xffffff80007d432a]
                   *1   ??? (kernel + 6023691) [0xffffff80007cea0b]
                     *1   thread_wakeup_thread + 45 (kernel + 672397) [0xffffff80002b428d]
                       *1   _global_eventq + 107 (kernel + 860587) [0xffffff80002e21ab] (running)
               *1   unix_syscall64 + 610 (kernel + 7540034) [0xffffff8000940d42] (running)
        1   _dispatch_root_queue_drain + 1135 (libdispatch.dylib + 76577) [0x7fff20297b21]
          1   objc_autoreleasePoolPop + 1 (libobjc.A.dylib + 36240) [0x7fff202d2d90] (running)
        1   _dispatch_root_queue_drain + 203 (libdispatch.dylib + 75645) [0x7fff2029777d] (running)
        1   _dispatch_queue_override_invoke + 0 (libdispatch.dylib + 23312) [0x7fff2028ab10] (running)

  Thread 0x84a1b4    15 samples (57-920)    priority 31 (base 31)    cpu time 0.070s (164.4M cycles, 159.0M instructions, 1.03c/i)
  15  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    15  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *11  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *2   call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *2   ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *2   ??? (kernel + 6026836) [0xffffff80007cf654]
           *1   ??? (kernel + 6029960) [0xffffff80007d0288]
             *1   ??? (kernel + 6023788) [0xffffff80007cea6c]
               *1   turnstile_update_inheritor + 262 (kernel + 854534) [0xffffff80002e0a06] (running)
           *1   ??? (kernel + 6029189) [0xffffff80007cff85]
             *1   thread_set_workq_pri + 196 (kernel + 824052) [0xffffff80002d92f4] (running)
     *2   call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *2   ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)

  Thread 0x84a1b2    12 samples (6-928)    priority 31 (base 31)    cpu time 0.054s (126.3M cycles, 107.9M instructions, 1.17c/i)
  11  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    11  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *9   ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *1   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
       *1   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
         *1   workq_kernreturn + 2372 (kernel + 6047300) [0xffffff80007d4644]
           *1   ??? (kernel + 6028077) [0xffffff80007cfb2d]
             *1   ??? (kernel + 6031328) [0xffffff80007d07e0]
               *1   waitq_assert_wait64 + 31 (kernel + 880671) [0xffffff80002e701f] (running)
     *1   call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *1   ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
  1   start_wqthread + 2 (libsystem_pthread.dylib + 9350) [0x7fff2042e486] (running)

  Thread 0x849d7e    11 samples (8-964)    priority 31 (base 31)    cpu time 0.042s (98.3M cycles, 72.8M instructions, 1.35c/i)
  10  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    10  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *5   ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *3   call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *3   ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *1   hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
       *1   unix_syscall64 + 718 (kernel + 7540142) [0xffffff8000940dae]
         *1   workq_kernreturn + 2372 (kernel + 6047300) [0xffffff80007d4644]
           *1   ??? (kernel + 6028077) [0xffffff80007cfb2d]
             *1   ??? (kernel + 6031169) [0xffffff80007d0741]
               *1   IOLockLock + 91 (kernel + 1757419) [0xffffff80003bd0eb] (running)
     *1   call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *1   ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *1   ??? (kernel + 6026836) [0xffffff80007cf654]
           *1   ??? (kernel + 6030007) [0xffffff80007d02b7]
             *1   ??? (kernel + 906242) [0xffffff80002ed402]
               *1   ??? (kernel + 907765) [0xffffff80002ed9f5]
                 *1   ??? (kernel + 900493) [0xffffff80002ebd8d] (running)
  1   start_wqthread + 0 (libsystem_pthread.dylib + 9348) [0x7fff2042e484] (running)

  Thread 0x84a1b0    8 samples (21-997)    priority 31 (base 31)    cpu time 0.045s (106.9M cycles, 70.4M instructions, 1.52c/i)
  8  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    8  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *5  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *2  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *2  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *1  hndl_unix_scall64 + 10 (kernel + 143850) [0xffffff80002331ea] (running)

  Thread 0x84a00d    7 samples (160-844)    priority 31 (base 31)    cpu time 0.033s (77.9M cycles, 58.9M instructions, 1.32c/i)
  7  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    7  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *5  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *1  call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *1  ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *1  ??? (kernel + 6026836) [0xffffff80007cf654]
           *1  ??? (kernel + 6029189) [0xffffff80007cff85]
             *1  thread_set_workq_pri + 196 (kernel + 824052) [0xffffff80002d92f4] (running)
     *1  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *1  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)

  Thread 0x849eef    5 samples (12-804)    priority 31 (base 31)    cpu time 0.028s (65.4M cycles, 49.7M instructions, 1.32c/i)
  5  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    5  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *2  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *2  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *2  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *1  call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *1  ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *1  ??? (kernel + 6026836) [0xffffff80007cf654]
           *1  ??? (kernel + 6029189) [0xffffff80007cff85]
             *1  ??? (kernel + 6024906) [0xffffff80007ceeca] (running)

  Thread 0x849ef7    5 samples (77-883)    priority 31 (base 31)    cpu time 0.027s (63.5M cycles, 59.8M instructions, 1.06c/i)
  3  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    3  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *3  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
  2  start_wqthread + 0 (libsystem_pthread.dylib + 9348) [0x7fff2042e484] (running)

  Thread 0x84a1b1    5 samples (200-939)    priority 31 (base 31)    cpu time 0.026s (61.3M cycles, 46.5M instructions, 1.32c/i)
  5  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    5  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *3  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *1  hndl_unix_scall64 + 22 (kernel + 143862) [0xffffff80002331f6]
       *1  unix_syscall64 + 528 (kernel + 7539952) [0xffffff8000940cf0]
         *1  kauth_cred_uthread_update + 129 (kernel + 6136401) [0xffffff80007ea251] (running)
     *1  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *1  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)

  Thread 0x84a1be    4 samples (44-822)    priority 31 (base 31)    cpu time 0.028s (66.5M cycles, 58.5M instructions, 1.14c/i)
  4  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    4  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *2  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *2  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *2  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)

  Thread 0x849ef9    3 samples (69-866)    priority 31 (base 31)    cpu time 0.013s (30.9M cycles, 26.8M instructions, 1.15c/i)
  3  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    3  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *2  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)
     *1  call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *1  ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *1  ??? (kernel + 6026836) [0xffffff80007cf654]
           *1  ??? (kernel + 6029189) [0xffffff80007cff85]
             *1  thread_set_workq_pri + 242 (kernel + 824098) [0xffffff80002d9322]
               *1  ??? (kernel + 824462) [0xffffff80002d948e] (running)

  Thread 0x84a1af    3 samples (789-875)    priority 31 (base 31)    cpu time 0.015s (34.1M cycles, 29.0M instructions, 1.18c/i)
  3  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    3  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *2  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *2  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)
     *1  call_continuation + 46 (kernel + 139582) [0xffffff800023213e]
       *1  ??? (kernel + 6026678) [0xffffff80007cf5b6]
         *1  ??? (kernel + 6026836) [0xffffff80007cf654]
           *1  ??? (kernel + 6029189) [0xffffff80007cff85]
             *1  thread_set_workq_pri + 242 (kernel + 824098) [0xffffff80002d9322]
               *1  ??? (kernel + 824462) [0xffffff80002d948e] (running)

  Thread 0x84a00e    2 samples (651-659)    priority 31 (base 31)    cpu time 0.009s (21.6M cycles, 26.2M instructions, 0.83c/i)
  2  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    2  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *2  ??? (kernel + 6026208) [0xffffff80007cf3e0] (runnable)

  Thread 0x849ffc    1 sample (63)    priority 31 (base 31)    cpu time <0.001s (453.4K cycles, 377.2K instructions, 1.20c/i)
  1  start_wqthread + 15 (libsystem_pthread.dylib + 9363) [0x7fff2042e493]
    1  __workq_kernreturn + 10 (libsystem_kernel.dylib + 10702) [0x7fff203fe9ce]
     *1  call_continuation + 35 (kernel + 139571) [0xffffff8000232133]
       *1  ml_set_interrupts_enabled + 17 (kernel + 1759601) [0xffffff80003bd971] (running)

  Binary Images:
           0x103087000 -        0x103092fff  checkCSInfoObserveCPU (0)                                           <20CDC2F4-0BAE-3A75-9078-5A2519285468>         /Users/ytian/Library/Developer/Xcode/DerivedData/checkCSInfoObserveCPU-exapmbzjiptvozdslzwcbieuyasi/Build/Products/Debug/checkCSInfoObserveCPU
        0x7fff2016a000 -     0x7fff2016bfff  libsystem_blocks.dylib (79)                                         <1C8538C3-F2BE-3F02-89AE-E7052DE66D51>         /usr/lib/system/libsystem_blocks.dylib
        0x7fff201a2000 -     0x7fff201b9fff  libsystem_trace.dylib (1277.100.21)                                 <1AAE1F8F-9F9D-3327-8A95-3A6887CED713>         /usr/lib/system/libsystem_trace.dylib
        0x7fff201ba000 -     0x7fff20257fff  libcorecrypto.dylib (1000.100.38)                                   <96A88875-7771-394E-A88E-389DCD02A935>         /usr/lib/system/libcorecrypto.dylib
        0x7fff20258000 -     0x7fff20284fff  libsystem_malloc.dylib (317.100.9)                                  <029B5632-62B4-39F6-981C-BCA99C1FBF1D>         /usr/lib/system/libsystem_malloc.dylib
        0x7fff20285000 -     0x7fff202c9fff  libdispatch.dylib (1271.100.5)                                      <6B7B23E3-2FD4-3EA2-8A89-CE06244CCA98>         /usr/lib/system/libdispatch.dylib
        0x7fff202ca000 -     0x7fff20303fff  libobjc.A.dylib (824)                                               <929E3040-4605-3C14-885B-D742EF02F2CB>         /usr/lib/libobjc.A.dylib
        0x7fff20307000 -     0x7fff2038ffff  libsystem_c.dylib (1439.100.3)                                      <DF45CDEC-6B7E-3586-94B4-F3679A762661>         /usr/lib/system/libsystem_c.dylib
        0x7fff20390000 -     0x7fff203e5fff  libc++.1.dylib (905.6)                                              <B027735F-B398-381C-84A7-606D7BBE4997>         /usr/lib/libc++.1.dylib
        0x7fff203e6000 -     0x7fff203fbfff  libc++abi.dylib (905.6)                                             <22AFC7FC-2DB6-3EF0-9CC0-EFFB9B65D5E2>         /usr/lib/libc++abi.dylib
        0x7fff203fc000 -     0x7fff2042bfff  libsystem_kernel.dylib (7195.101.2)                                 <62A19DE4-50C5-3866-B5B2-43220E379C3B>         /usr/lib/system/libsystem_kernel.dylib
        0x7fff2042c000 -     0x7fff20437fff  libsystem_pthread.dylib (454.100.8)                                 <52F807B1-41A0-3D1E-AE89-115CA570863F>         /usr/lib/system/libsystem_pthread.dylib
        0x7fff20438000 -     0x7fff20473fff  libdyld.dylib (851.27)                                              <9F95C644-D1BD-38D9-9612-6188FE9EA53C>         /usr/lib/system/libdyld.dylib
        0x7fff20474000 -     0x7fff2047dfff  libsystem_platform.dylib (254.80.2)                                 <03429519-EBEA-3549-84A6-0FD426CB7373>         /usr/lib/system/libsystem_platform.dylib
        0x7fff204aa000 -     0x7fff20947fff  com.apple.CoreFoundation 6.9 (1775.118.101)                         <895AFD1C-0307-32B3-81CB-BA33DA368DE1>         /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
        0x7fff222b9000 -     0x7fff2260dfff  com.apple.security 7.0 (59754.100.106)                              <E9261CB0-E729-3F58-98B7-172F243D4427>         /System/Library/Frameworks/Security.framework/Versions/A/Security
        0x7fff2a59b000 -     0x7fff2a5a6fff  libcommonCrypto.dylib (60178.100.1)                                 <EA0C1728-C905-3A58-A285-C32ECF903BB4>         /usr/lib/system/libcommonCrypto.dylib
   *0xffffff7f9800d000 - 0xffffff7f98025fff  com.apple.fileutil 20.036.15 (20.036.15)                            <12E9AB11-7970-3393-AD54-878FDBFB2DB4>         /System/Library/Extensions/AppleFileUtil.kext/Contents/MacOS/AppleFileUtil
   *0xffffff8000100000 - 0xffffff800019ffff  kernel (7195.101.2)                                                 <068F99A3-1DB3-31C0-87D5-09942F122BB6>__HIB    /System/Library/Kernels/kernel
   *0xffffff8000210000 - 0xffffff8000c0ffff  kernel (7195.101.2)                                                 <068F99A3-1DB3-31C0-87D5-09942F122BB6>__TEXT   /System/Library/Kernels/kernel
   *0xffffff8001726000 - 0xffffff8001731fff  com.apple.AppleFSCompression.AppleFSCompressionTypeZlib 125 (1.0.0) <B7133404-C3E6-39DA-B5CA-71311BD014C6>         /System/Library/Extensions/AppleFSCompressionTypeZlib.kext/Contents/MacOS/AppleFSCompressionTypeZlib
   *0xffffff80018b8000 - 0xffffff80018d0fff  com.apple.driver.AppleMobileFileIntegrity 1.0.5 (1.0.5)             <9B4B41D7-B68F-33D5-80A4-2C4C4A649F6D>         /System/Library/Extensions/AppleMobileFileIntegrity.kext/Contents/MacOS/AppleMobileFileIntegrity
   *0xffffff8001c46000 - 0xffffff8001c9afff  com.apple.iokit.EndpointSecurity 1.0 (1)                            <E5606D12-2743-3191-84A3-7BB4A78930BB>         /System/Library/Extensions/EndpointSecurity.kext/Contents/MacOS/EndpointSecurity
   *0xffffff8002aa0000 - 0xffffff8002ad1fff  com.apple.iokit.IONVMeFamily 2.1.0 (2.1.0)                          <2A44DC48-B629-386C-985E-3BE03CCA48F2>         /System/Library/Extensions/IONVMeFamily.kext/Contents/MacOS/IONVMeFamily
   *0xffffff8002d5f000 - 0xffffff8002d87fff  com.apple.iokit.IOPCIFamily 2.9 (2.9)                               <B99B3B05-71B8-3178-8C27-E0A0ACA9F16E>         /System/Library/Extensions/IOPCIFamily.kext/IOPCIFamily
   *0xffffff8002e62000 - 0xffffff8002e73fff  com.apple.iokit.IOStorageFamily 2.1 (2.1)                           <58EA4506-4E6B-3AC3-A70D-ED35EE2C381D>         /System/Library/Extensions/IOStorageFamily.kext/Contents/MacOS/IOStorageFamily
   *0xffffff800333c000 - 0xffffff8003399fff  com.apple.security.sandbox 300.0 (300.0)                            <A8EB8B72-CF6C-313B-96B9-B5BDA3C48E03>         /System/Library/Extensions/Sandbox.kext/Contents/MacOS/Sandbox
   *0xffffff800339a000 - 0xffffff8003513fff  com.apple.filesystems.apfs 1677.100.114 (1677.100.114)              <0F8B7E4F-B9D1-3025-8BD2-8B61FF0C7408>         /System/Library/Extensions/apfs.kext/Contents/MacOS/apfs


